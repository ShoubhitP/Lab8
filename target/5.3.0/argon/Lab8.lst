
/Users/shoubhitsstuff/Desktop/Lab8/target/5.3.0/argon/Lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000042f8  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8314  000b8314  00008314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e574  000b8338  0000e574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000210  2003e5e0  2003e5e0  0001e5e0  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b83a4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b83a8  000b83a8  000183a8  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b83ae  000b83ae  000183ae  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b83d2  000b83d2  000183d2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001478bf  00000000  00000000  000183d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000162f1  00000000  00000000  0015fc95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000447db  00000000  00000000  00175f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000032a0  00000000  00000000  001ba761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b368  00000000  00000000  001bda01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00041581  00000000  00000000  001c8d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004fe89  00000000  00000000  0020a2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00144fd3  00000000  00000000  0025a173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000093b8  00000000  00000000  0039f148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f003 f91b 	bl	b728c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f003 f923 	bl	b72a8 <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e574 	.word	0x2003e574
   b406c:	000b8338 	.word	0x000b8338
   b4070:	2003e5e0 	.word	0x2003e5e0
   b4074:	2003e5e0 	.word	0x2003e5e0
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f002 febd 	bl	b6e00 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b82f0 	.word	0x000b82f0
   b40a0:	000b8314 	.word	0x000b8314

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b834 	b.w	b4110 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f8a5 	bl	b41f8 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f002 be5d 	b.w	b6d70 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f001 be7d 	b.w	b5db4 <malloc>

000b40ba <_Znaj>:
   b40ba:	f001 be7b 	b.w	b5db4 <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f001 be81 	b.w	b5dc4 <free>
	...

000b40c4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40c6:	4a03      	ldr	r2, [pc, #12]	; (b40d4 <__cxa_pure_virtual+0x10>)
   b40c8:	4903      	ldr	r1, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x14>)
   b40ca:	200c      	movs	r0, #12
   b40cc:	f001 fdce 	bl	b5c6c <panic_>
  while (1);
   b40d0:	e7fe      	b.n	b40d0 <__cxa_pure_virtual+0xc>
   b40d2:	bf00      	nop
   b40d4:	000b591d 	.word	0x000b591d
   b40d8:	000b73f4 	.word	0x000b73f4

000b40dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40dc:	7800      	ldrb	r0, [r0, #0]
   b40de:	fab0 f080 	clz	r0, r0
   b40e2:	0940      	lsrs	r0, r0, #5
   b40e4:	4770      	bx	lr

000b40e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40e6:	2301      	movs	r3, #1
   b40e8:	7003      	strb	r3, [r0, #0]
   b40ea:	4770      	bx	lr

000b40ec <_Z14refreshDisplayv>:

}

}
void refreshDisplay()
{
   b40ec:	b510      	push	{r4, lr}
  display.clearDisplay();
   b40ee:	4c07      	ldr	r4, [pc, #28]	; (b410c <_Z14refreshDisplayv+0x20>)
   b40f0:	4620      	mov	r0, r4
   b40f2:	f000 fe8d 	bl	b4e10 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b40f6:	2101      	movs	r1, #1
   b40f8:	4620      	mov	r0, r4
   b40fa:	f000 fcd0 	bl	b4a9e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b40fe:	2200      	movs	r2, #0
   b4100:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4104:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
}
   b4108:	bd10      	pop	{r4, pc}
   b410a:	bf00      	nop
   b410c:	2003e63c 	.word	0x2003e63c

000b4110 <setup>:
void setup() {
   b4110:	b538      	push	{r3, r4, r5, lr}
display.setup();
   b4112:	4d1a      	ldr	r5, [pc, #104]	; (b417c <setup+0x6c>)
proximitySensor.begin();
   b4114:	4c1a      	ldr	r4, [pc, #104]	; (b4180 <setup+0x70>)
display.setup();
   b4116:	4628      	mov	r0, r5
   b4118:	f001 fb80 	bl	b581c <_ZN16OledWingAdafruit5setupEv>
Serial.begin(9600);
   b411c:	f002 fda2 	bl	b6c64 <_Z16_fetch_usbserialv>
   b4120:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4124:	f002 fd92 	bl	b6c4c <_ZN9USBSerial5beginEl>
Wire.begin();
   b4128:	f002 ff32 	bl	b6f90 <_Z19__fetch_global_Wirev>
   b412c:	f001 ff0a 	bl	b5f44 <_ZN7TwoWire5beginEv>
proximitySensor.begin();
   b4130:	f002 ff2e 	bl	b6f90 <_Z19__fetch_global_Wirev>
   b4134:	4601      	mov	r1, r0
   b4136:	4620      	mov	r0, r4
   b4138:	f001 fafd 	bl	b5736 <_ZN8VCNL40405beginER7TwoWire>
proximitySensor.powerOnProximity();
   b413c:	4620      	mov	r0, r4
   b413e:	f001 faa6 	bl	b568e <_ZN8VCNL404016powerOnProximityEv>
proximitySensor.powerOnAmbient();
   b4142:	4620      	mov	r0, r4
   b4144:	f001 fa80 	bl	b5648 <_ZN8VCNL404014powerOnAmbientEv>
proximitySensor.enableWhiteChannel();
   b4148:	4620      	mov	r0, r4
   b414a:	f001 fac4 	bl	b56d6 <_ZN8VCNL404018enableWhiteChannelEv>
pinMode(D5, OUTPUT);
   b414e:	2101      	movs	r1, #1
   b4150:	2005      	movs	r0, #5
   b4152:	f002 fec5 	bl	b6ee0 <pinMode>
pinMode(D6, OUTPUT);
   b4156:	2101      	movs	r1, #1
   b4158:	2006      	movs	r0, #6
   b415a:	f002 fec1 	bl	b6ee0 <pinMode>
pinMode(D7, OUTPUT);
   b415e:	2101      	movs	r1, #1
   b4160:	2007      	movs	r0, #7
   b4162:	f002 febd 	bl	b6ee0 <pinMode>
refreshDisplay();
   b4166:	f7ff ffc1 	bl	b40ec <_Z14refreshDisplayv>
display.println("Starting data reading..");
   b416a:	4628      	mov	r0, r5
   b416c:	4905      	ldr	r1, [pc, #20]	; (b4184 <setup+0x74>)
   b416e:	f002 f8ac 	bl	b62ca <_ZN5Print7printlnEPKc>
display.display();
   b4172:	4628      	mov	r0, r5
}
   b4174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
display.display();
   b4178:	f001 b8b8 	b.w	b52ec <_ZN16Adafruit_SSD13067displayEv>
   b417c:	2003e63c 	.word	0x2003e63c
   b4180:	2003e6b0 	.word	0x2003e6b0
   b4184:	000b7409 	.word	0x000b7409

000b4188 <_Z14printProximityv>:

void printProximity()
{
   b4188:	b510      	push	{r4, lr}
  display.print("Current proximity results: ");
   b418a:	4c08      	ldr	r4, [pc, #32]	; (b41ac <_Z14printProximityv+0x24>)
   b418c:	4908      	ldr	r1, [pc, #32]	; (b41b0 <_Z14printProximityv+0x28>)
   b418e:	4620      	mov	r0, r4
   b4190:	f002 f888 	bl	b62a4 <_ZN5Print5printEPKc>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4194:	4b07      	ldr	r3, [pc, #28]	; (b41b4 <_Z14printProximityv+0x2c>)
   b4196:	4620      	mov	r0, r4
   b4198:	8819      	ldrh	r1, [r3, #0]
   b419a:	220a      	movs	r2, #10
   b419c:	f002 f89f 	bl	b62de <_ZN5Print11printNumberEmh>
  display.print(proximityValue);
  display.display();
   b41a0:	4620      	mov	r0, r4
}
   b41a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
   b41a6:	f001 b8a1 	b.w	b52ec <_ZN16Adafruit_SSD13067displayEv>
   b41aa:	bf00      	nop
   b41ac:	2003e63c 	.word	0x2003e63c
   b41b0:	000b7421 	.word	0x000b7421
   b41b4:	2003e6b4 	.word	0x2003e6b4

000b41b8 <_Z17printAmbientLightv>:
void printAmbientLight()
{
   b41b8:	b510      	push	{r4, lr}
  display.print("Current light level: ");
   b41ba:	490c      	ldr	r1, [pc, #48]	; (b41ec <_Z17printAmbientLightv+0x34>)
   b41bc:	480c      	ldr	r0, [pc, #48]	; (b41f0 <_Z17printAmbientLightv+0x38>)
   b41be:	f002 f871 	bl	b62a4 <_ZN5Print5printEPKc>
  display.print(lightValue);
   b41c2:	4b0c      	ldr	r3, [pc, #48]	; (b41f4 <_Z17printAmbientLightv+0x3c>)
   b41c4:	681c      	ldr	r4, [r3, #0]
        if (n < 0 && base == 10) {
   b41c6:	2c00      	cmp	r4, #0
   b41c8:	da0d      	bge.n	b41e6 <_Z17printAmbientLightv+0x2e>
            t = print('-');
   b41ca:	212d      	movs	r1, #45	; 0x2d
   b41cc:	4808      	ldr	r0, [pc, #32]	; (b41f0 <_Z17printAmbientLightv+0x38>)
   b41ce:	f002 f86d 	bl	b62ac <_ZN5Print5printEc>
            val = -n;
   b41d2:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b41d4:	4806      	ldr	r0, [pc, #24]	; (b41f0 <_Z17printAmbientLightv+0x38>)
   b41d6:	220a      	movs	r2, #10
   b41d8:	f002 f881 	bl	b62de <_ZN5Print11printNumberEmh>
  display.display();
   b41dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
   b41e0:	4803      	ldr	r0, [pc, #12]	; (b41f0 <_Z17printAmbientLightv+0x38>)
   b41e2:	f001 b883 	b.w	b52ec <_ZN16Adafruit_SSD13067displayEv>
            val = n;
   b41e6:	4621      	mov	r1, r4
   b41e8:	e7f4      	b.n	b41d4 <_Z17printAmbientLightv+0x1c>
   b41ea:	bf00      	nop
   b41ec:	000b743d 	.word	0x000b743d
   b41f0:	2003e63c 	.word	0x2003e63c
   b41f4:	2003e6ac 	.word	0x2003e6ac

000b41f8 <loop>:
void loop() {
   b41f8:	b510      	push	{r4, lr}
display.loop();
   b41fa:	4821      	ldr	r0, [pc, #132]	; (b4280 <loop+0x88>)
proximityValue = proximitySensor.getProximity();
   b41fc:	4c21      	ldr	r4, [pc, #132]	; (b4284 <loop+0x8c>)
display.loop();
   b41fe:	f001 fb36 	bl	b586e <_ZN16OledWingAdafruit4loopEv>
proximityValue = proximitySensor.getProximity();
   b4202:	4821      	ldr	r0, [pc, #132]	; (b4288 <loop+0x90>)
   b4204:	f001 f99f 	bl	b5546 <_ZN8VCNL404012getProximityEv>
   b4208:	8020      	strh	r0, [r4, #0]
lightValue = proximitySensor.getAmbient();
   b420a:	481f      	ldr	r0, [pc, #124]	; (b4288 <loop+0x90>)
   b420c:	f001 f99e 	bl	b554c <_ZN8VCNL404010getAmbientEv>
   b4210:	4b1e      	ldr	r3, [pc, #120]	; (b428c <loop+0x94>)
   b4212:	6018      	str	r0, [r3, #0]
if(proximityValue <= 50)
   b4214:	8823      	ldrh	r3, [r4, #0]
   b4216:	2b32      	cmp	r3, #50	; 0x32
   b4218:	d820      	bhi.n	b425c <loop+0x64>
  digitalWrite(D5, HIGH);
   b421a:	2101      	movs	r1, #1
   b421c:	2005      	movs	r0, #5
   b421e:	f002 fe70 	bl	b6f02 <digitalWrite>
  digitalWrite(D6, LOW);
   b4222:	2100      	movs	r1, #0
  digitalWrite(D6, HIGH);
   b4224:	2006      	movs	r0, #6
   b4226:	f002 fe6c 	bl	b6f02 <digitalWrite>
  digitalWrite(D7, LOW);
   b422a:	2100      	movs	r1, #0
  digitalWrite(D7, HIGH);
   b422c:	2007      	movs	r0, #7
   b422e:	f002 fe68 	bl	b6f02 <digitalWrite>
if(display.pressedA())
   b4232:	4813      	ldr	r0, [pc, #76]	; (b4280 <loop+0x88>)
   b4234:	f001 fb34 	bl	b58a0 <_ZN16OledWingAdafruit8pressedAEv>
   b4238:	b118      	cbz	r0, b4242 <loop+0x4a>
    refreshDisplay();
   b423a:	f7ff ff57 	bl	b40ec <_Z14refreshDisplayv>
    printProximity();
   b423e:	f7ff ffa3 	bl	b4188 <_Z14printProximityv>
if(display.pressedB())
   b4242:	480f      	ldr	r0, [pc, #60]	; (b4280 <loop+0x88>)
   b4244:	f001 fb36 	bl	b58b4 <_ZN16OledWingAdafruit8pressedBEv>
   b4248:	b118      	cbz	r0, b4252 <loop+0x5a>
   refreshDisplay(); 
   b424a:	f7ff ff4f 	bl	b40ec <_Z14refreshDisplayv>
   printAmbientLight();
   b424e:	f7ff ffb3 	bl	b41b8 <_Z17printAmbientLightv>
}
   b4252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
if(display.pressedC())
   b4256:	480a      	ldr	r0, [pc, #40]	; (b4280 <loop+0x88>)
   b4258:	f001 bb36 	b.w	b58c8 <_ZN16OledWingAdafruit8pressedCEv>
else if(proximityValue <= 150)
   b425c:	2b96      	cmp	r3, #150	; 0x96
  digitalWrite(D5, LOW);
   b425e:	f04f 0100 	mov.w	r1, #0
   b4262:	f04f 0005 	mov.w	r0, #5
else if(proximityValue <= 150)
   b4266:	d803      	bhi.n	b4270 <loop+0x78>
  digitalWrite(D5, LOW);
   b4268:	f002 fe4b 	bl	b6f02 <digitalWrite>
  digitalWrite(D6, HIGH);
   b426c:	2101      	movs	r1, #1
   b426e:	e7d9      	b.n	b4224 <loop+0x2c>
  digitalWrite(D5, LOW);
   b4270:	f002 fe47 	bl	b6f02 <digitalWrite>
  digitalWrite(D6, LOW);
   b4274:	2100      	movs	r1, #0
   b4276:	2006      	movs	r0, #6
   b4278:	f002 fe43 	bl	b6f02 <digitalWrite>
  digitalWrite(D7, HIGH);
   b427c:	2101      	movs	r1, #1
   b427e:	e7d5      	b.n	b422c <loop+0x34>
   b4280:	2003e63c 	.word	0x2003e63c
   b4284:	2003e6b4 	.word	0x2003e6b4
   b4288:	2003e6b0 	.word	0x2003e6b0
   b428c:	2003e6ac 	.word	0x2003e6ac

000b4290 <_GLOBAL__sub_I_Blynk>:
   b4290:	b510      	push	{r4, lr}

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   b4292:	4c10      	ldr	r4, [pc, #64]	; (b42d4 <_GLOBAL__sub_I_Blynk+0x44>)
SYSTEM_THREAD(ENABLED);
   b4294:	2100      	movs	r1, #0
   b4296:	2001      	movs	r0, #1
   b4298:	f001 fd08 	bl	b5cac <system_thread_set_state>
   b429c:	4620      	mov	r0, r4
   b429e:	f002 fc13 	bl	b6ac8 <_ZN9TCPClientC1Ev>
   b42a2:	f104 001c 	add.w	r0, r4, #28
   b42a6:	f001 fec7 	bl	b6038 <_ZN9IPAddressC1Ev>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   b42aa:	4a0b      	ldr	r2, [pc, #44]	; (b42d8 <_GLOBAL__sub_I_Blynk+0x48>)
OledWingAdafruit display;
   b42ac:	480b      	ldr	r0, [pc, #44]	; (b42dc <_GLOBAL__sub_I_Blynk+0x4c>)
   b42ae:	2300      	movs	r3, #0
   b42b0:	e9c2 4300 	strd	r4, r3, [r2]
   b42b4:	e9c2 3302 	strd	r3, r3, [r2, #8]
   b42b8:	e9c2 3304 	strd	r3, r3, [r2, #16]
   b42bc:	6193      	str	r3, [r2, #24]
   b42be:	8393      	strh	r3, [r2, #28]
   b42c0:	2107      	movs	r1, #7
   b42c2:	6363      	str	r3, [r4, #52]	; 0x34
   b42c4:	8723      	strh	r3, [r4, #56]	; 0x38
   b42c6:	f001 fa7b 	bl	b57c0 <_ZN16OledWingAdafruitC1Ei>
   b42ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
VCNL4040 proximitySensor;
   b42ce:	4804      	ldr	r0, [pc, #16]	; (b42e0 <_GLOBAL__sub_I_Blynk+0x50>)
   b42d0:	f001 b8ff 	b.w	b54d2 <_ZN8VCNL4040C1Ev>
   b42d4:	2003e600 	.word	0x2003e600
   b42d8:	2003e5e0 	.word	0x2003e5e0
   b42dc:	2003e63c 	.word	0x2003e63c
   b42e0:	2003e6b0 	.word	0x2003e6b0

000b42e4 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b42e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42e8:	b085      	sub	sp, #20
   b42ea:	461f      	mov	r7, r3
   b42ec:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b42f0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b42f4:	eba8 0902 	sub.w	r9, r8, r2
   b42f8:	eba7 0a01 	sub.w	sl, r7, r1
   b42fc:	f1b9 0f00 	cmp.w	r9, #0
   b4300:	bfb8      	it	lt
   b4302:	f1c9 0900 	rsblt	r9, r9, #0
   b4306:	f1ba 0f00 	cmp.w	sl, #0
   b430a:	bfb8      	it	lt
   b430c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4310:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4312:	4683      	mov	fp, r0
   b4314:	460c      	mov	r4, r1
   b4316:	4615      	mov	r5, r2
    if (steep) {
   b4318:	dd04      	ble.n	b4324 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b431a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b431c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b431e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4320:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4322:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4324:	42bc      	cmp	r4, r7
   b4326:	dd05      	ble.n	b4334 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4328:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b432a:	4645      	mov	r5, r8
   b432c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b432e:	4622      	mov	r2, r4
   b4330:	463c      	mov	r4, r7
   b4332:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4334:	1b3e      	subs	r6, r7, r4
   b4336:	b2b2      	uxth	r2, r6
   b4338:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b433a:	eba8 0205 	sub.w	r2, r8, r5
   b433e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4342:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4346:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b434a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b434e:	4545      	cmp	r5, r8
   b4350:	bfb4      	ite	lt
   b4352:	2201      	movlt	r2, #1
   b4354:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4358:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b435a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b435c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b435e:	42bc      	cmp	r4, r7
   b4360:	dc1c      	bgt.n	b439c <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4362:	f8db 2000 	ldr.w	r2, [fp]
   b4366:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4368:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b436a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b436e:	bfc7      	ittee	gt
   b4370:	4629      	movgt	r1, r5
   b4372:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4374:	462a      	movle	r2, r5
   b4376:	4621      	movle	r1, r4
   b4378:	4658      	mov	r0, fp
   b437a:	47c0      	blx	r8
        }
        err -= dy;
   b437c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b437e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4380:	1ab6      	subs	r6, r6, r2
   b4382:	b2b1      	uxth	r1, r6
   b4384:	b236      	sxth	r6, r6
        if (err < 0) {
   b4386:	2e00      	cmp	r6, #0
   b4388:	da05      	bge.n	b4396 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b438a:	9a02      	ldr	r2, [sp, #8]
   b438c:	4415      	add	r5, r2
            err += dx;
   b438e:	9a00      	ldr	r2, [sp, #0]
   b4390:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b4392:	b22d      	sxth	r5, r5
            err += dx;
   b4394:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4396:	3401      	adds	r4, #1
   b4398:	b224      	sxth	r4, r4
   b439a:	e7e0      	b.n	b435e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b439c:	b005      	add	sp, #20
   b439e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b43a2 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b43a2:	4770      	bx	lr

000b43a4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b43a4:	b410      	push	{r4}
    drawPixel(x, y, color);
   b43a6:	6804      	ldr	r4, [r0, #0]
   b43a8:	6924      	ldr	r4, [r4, #16]
   b43aa:	46a4      	mov	ip, r4
}
   b43ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b43b0:	4760      	bx	ip

000b43b2 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b43b2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b43b4:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b43b6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b43ba:	9502      	str	r5, [sp, #8]
   b43bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b43be:	46a4      	mov	ip, r4
}
   b43c0:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b43c2:	4760      	bx	ip

000b43c4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b43c4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b43c6:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b43c8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b43cc:	9502      	str	r5, [sp, #8]
   b43ce:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b43d0:	46a4      	mov	ip, r4
}
   b43d2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b43d4:	4760      	bx	ip

000b43d6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b43d6:	b470      	push	{r4, r5, r6}
   b43d8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b43dc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b43e0:	6804      	ldr	r4, [r0, #0]
   b43e2:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b43e6:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b43e8:	46a4      	mov	ip, r4
}
   b43ea:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b43ec:	4760      	bx	ip

000b43ee <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b43ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b43f2:	461c      	mov	r4, r3
    startWrite();
   b43f4:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b43f6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b43fa:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b43fc:	4605      	mov	r5, r0
   b43fe:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4400:	3c01      	subs	r4, #1
   b4402:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4404:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4406:	b224      	sxth	r4, r4
    startWrite();
   b4408:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b440a:	682b      	ldr	r3, [r5, #0]
   b440c:	f8cd 8004 	str.w	r8, [sp, #4]
   b4410:	9400      	str	r4, [sp, #0]
   b4412:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4414:	4628      	mov	r0, r5
   b4416:	463b      	mov	r3, r7
   b4418:	4632      	mov	r2, r6
   b441a:	4639      	mov	r1, r7
   b441c:	47a0      	blx	r4
    endWrite();
   b441e:	682b      	ldr	r3, [r5, #0]
   b4420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4422:	4628      	mov	r0, r5
}
   b4424:	b002      	add	sp, #8
   b4426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b442a:	4718      	bx	r3

000b442c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b442c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4430:	461d      	mov	r5, r3
    startWrite();
   b4432:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4434:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4438:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b443a:	4604      	mov	r4, r0
   b443c:	4617      	mov	r7, r2
   b443e:	460e      	mov	r6, r1
    startWrite();
   b4440:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4442:	e9cd 7800 	strd	r7, r8, [sp]
   b4446:	6822      	ldr	r2, [r4, #0]
   b4448:	1e6b      	subs	r3, r5, #1
   b444a:	4433      	add	r3, r6
   b444c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b444e:	4620      	mov	r0, r4
   b4450:	b21b      	sxth	r3, r3
   b4452:	463a      	mov	r2, r7
   b4454:	4631      	mov	r1, r6
   b4456:	47a8      	blx	r5
    endWrite();
   b4458:	6823      	ldr	r3, [r4, #0]
   b445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b445c:	4620      	mov	r0, r4
}
   b445e:	b002      	add	sp, #8
   b4460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4464:	4718      	bx	r3

000b4466 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4466:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b446a:	461e      	mov	r6, r3
    startWrite();
   b446c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b446e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b4472:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4474:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4478:	460c      	mov	r4, r1
   b447a:	4605      	mov	r5, r0
   b447c:	4617      	mov	r7, r2
    startWrite();
   b447e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4480:	4426      	add	r6, r4
   b4482:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4484:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4486:	da0b      	bge.n	b44a0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4488:	f8cd 8000 	str.w	r8, [sp]
   b448c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4490:	4621      	mov	r1, r4
   b4492:	464b      	mov	r3, r9
   b4494:	463a      	mov	r2, r7
   b4496:	4628      	mov	r0, r5
   b4498:	3401      	adds	r4, #1
   b449a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b449c:	b224      	sxth	r4, r4
   b449e:	e7f0      	b.n	b4482 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b44a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44a2:	4628      	mov	r0, r5
}
   b44a4:	b002      	add	sp, #8
   b44a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b44aa:	4718      	bx	r3

000b44ac <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b44ac:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b44ae:	6802      	ldr	r2, [r0, #0]
   b44b0:	9101      	str	r1, [sp, #4]
   b44b2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b44b6:	9100      	str	r1, [sp, #0]
   b44b8:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b44ba:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b44be:	2200      	movs	r2, #0
   b44c0:	4611      	mov	r1, r2
   b44c2:	47a0      	blx	r4
}
   b44c4:	b002      	add	sp, #8
   b44c6:	bd10      	pop	{r4, pc}

000b44c8 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b44c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b44cc:	4299      	cmp	r1, r3
        uint16_t color) {
   b44ce:	4616      	mov	r6, r2
   b44d0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b44d4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b44d8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b44da:	4680      	mov	r8, r0
   b44dc:	460d      	mov	r5, r1
   b44de:	461c      	mov	r4, r3
    if(x0 == x1){
   b44e0:	d113      	bne.n	b450a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b44e2:	42be      	cmp	r6, r7
   b44e4:	bfc8      	it	gt
   b44e6:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b44e8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b44ec:	bfc4      	itt	gt
   b44ee:	463e      	movgt	r6, r7
   b44f0:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b44f2:	1c7b      	adds	r3, r7, #1
   b44f4:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b44f6:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b44f8:	b21b      	sxth	r3, r3
   b44fa:	4632      	mov	r2, r6
   b44fc:	4629      	mov	r1, r5
   b44fe:	4640      	mov	r0, r8
   b4500:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b4502:	b003      	add	sp, #12
   b4504:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4508:	4760      	bx	ip
    } else if(y0 == y1){
   b450a:	42be      	cmp	r6, r7
   b450c:	d10a      	bne.n	b4524 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b450e:	4299      	cmp	r1, r3
   b4510:	bfc2      	ittt	gt
   b4512:	460b      	movgt	r3, r1
   b4514:	4625      	movgt	r5, r4
   b4516:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4518:	1c63      	adds	r3, r4, #1
   b451a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b451e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b4520:	1b5b      	subs	r3, r3, r5
   b4522:	e7e9      	b.n	b44f8 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b4524:	6953      	ldr	r3, [r2, #20]
   b4526:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b4528:	e9cd 7900 	strd	r7, r9, [sp]
   b452c:	f8d8 3000 	ldr.w	r3, [r8]
   b4530:	4640      	mov	r0, r8
   b4532:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4534:	4632      	mov	r2, r6
   b4536:	4623      	mov	r3, r4
   b4538:	4629      	mov	r1, r5
   b453a:	47b8      	blx	r7
        endWrite();
   b453c:	f8d8 3000 	ldr.w	r3, [r8]
   b4540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4542:	4640      	mov	r0, r8
}
   b4544:	b003      	add	sp, #12
   b4546:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b454a:	4718      	bx	r3

000b454c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b454c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4550:	461d      	mov	r5, r3
    startWrite();
   b4552:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4554:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4558:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b455a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b455e:	4604      	mov	r4, r0
   b4560:	460f      	mov	r7, r1
   b4562:	4616      	mov	r6, r2
    startWrite();
   b4564:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4566:	6823      	ldr	r3, [r4, #0]
   b4568:	f8cd 8000 	str.w	r8, [sp]
   b456c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4570:	4632      	mov	r2, r6
   b4572:	462b      	mov	r3, r5
   b4574:	4639      	mov	r1, r7
   b4576:	4620      	mov	r0, r4
   b4578:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b457a:	6823      	ldr	r3, [r4, #0]
   b457c:	f8cd 8000 	str.w	r8, [sp]
   b4580:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4584:	4432      	add	r2, r6
   b4586:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b458a:	4639      	mov	r1, r7
   b458c:	462b      	mov	r3, r5
   b458e:	4620      	mov	r0, r4
   b4590:	b212      	sxth	r2, r2
   b4592:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b4594:	6823      	ldr	r3, [r4, #0]
   b4596:	f8cd 8000 	str.w	r8, [sp]
   b459a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b459e:	4632      	mov	r2, r6
   b45a0:	464b      	mov	r3, r9
   b45a2:	4639      	mov	r1, r7
   b45a4:	4620      	mov	r0, r4
   b45a6:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b45a8:	1e6b      	subs	r3, r5, #1
   b45aa:	19d9      	adds	r1, r3, r7
   b45ac:	6823      	ldr	r3, [r4, #0]
   b45ae:	f8cd 8000 	str.w	r8, [sp]
   b45b2:	6a1d      	ldr	r5, [r3, #32]
   b45b4:	4620      	mov	r0, r4
   b45b6:	464b      	mov	r3, r9
   b45b8:	4632      	mov	r2, r6
   b45ba:	b209      	sxth	r1, r1
   b45bc:	47a8      	blx	r5
    endWrite();
   b45be:	6823      	ldr	r3, [r4, #0]
   b45c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b45c2:	4620      	mov	r0, r4
}
   b45c4:	b002      	add	sp, #8
   b45c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b45ca:	4718      	bx	r3

000b45cc <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b45cc:	4770      	bx	lr

000b45ce <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b45ce:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b45d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b45d6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b45d8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b45da:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b45de:	bf59      	ittee	pl
   b45e0:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b45e2:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b45e4:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b45e6:	81c3      	strhmi	r3, [r0, #14]
}
   b45e8:	4770      	bx	lr
	...

000b45ec <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b45ec:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b45ee:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b45f0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b45f2:	4a07      	ldr	r2, [pc, #28]	; (b4610 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b45f4:	4d07      	ldr	r5, [pc, #28]	; (b4614 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b45f6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b45f8:	2400      	movs	r4, #0
    _width    = WIDTH;
   b45fa:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b45fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4600:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b4604:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b4606:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b4608:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b460a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b460c:	6204      	str	r4, [r0, #32]
}
   b460e:	bd30      	pop	{r4, r5, pc}
   b4610:	01000101 	.word	0x01000101
   b4614:	000b795c 	.word	0x000b795c

000b4618 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b461c:	b089      	sub	sp, #36	; 0x24
   b461e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b4622:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4624:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b4628:	9304      	str	r3, [sp, #16]
   b462a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b462e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4630:	9305      	str	r3, [sp, #20]
   b4632:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b4636:	4604      	mov	r4, r0
    startWrite();
   b4638:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b463a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b463e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4642:	bf48      	it	mi
   b4644:	f108 020e 	addmi.w	r2, r8, #14
   b4648:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b464c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b464e:	4635      	mov	r5, r6
   b4650:	9b03      	ldr	r3, [sp, #12]
   b4652:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b4654:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b4658:	189a      	adds	r2, r3, r2
   b465a:	9b05      	ldr	r3, [sp, #20]
   b465c:	428b      	cmp	r3, r1
   b465e:	b212      	sxth	r2, r2
   b4660:	dd27      	ble.n	b46b2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4662:	9b04      	ldr	r3, [sp, #16]
   b4664:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b4666:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b466a:	9306      	str	r3, [sp, #24]
   b466c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b4670:	4580      	cmp	r8, r0
   b4672:	fa1f f189 	uxth.w	r1, r9
   b4676:	dd17      	ble.n	b46a8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b4678:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b467a:	bf05      	ittet	eq
   b467c:	9b06      	ldreq	r3, [sp, #24]
   b467e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b4680:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4682:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b4684:	bf18      	it	ne
   b4686:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b4688:	062b      	lsls	r3, r5, #24
   b468a:	d50a      	bpl.n	b46a2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b468c:	9b02      	ldr	r3, [sp, #8]
   b468e:	6820      	ldr	r0, [r4, #0]
   b4690:	9207      	str	r2, [sp, #28]
   b4692:	4419      	add	r1, r3
   b4694:	6983      	ldr	r3, [r0, #24]
   b4696:	b209      	sxth	r1, r1
   b4698:	461f      	mov	r7, r3
   b469a:	4620      	mov	r0, r4
   b469c:	4653      	mov	r3, sl
   b469e:	47b8      	blx	r7
   b46a0:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b46a2:	f109 0901 	add.w	r9, r9, #1
   b46a6:	e7e1      	b.n	b466c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b46a8:	9b01      	ldr	r3, [sp, #4]
   b46aa:	3301      	adds	r3, #1
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	445e      	add	r6, fp
   b46b0:	e7ce      	b.n	b4650 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b46b2:	6823      	ldr	r3, [r4, #0]
   b46b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46b6:	4620      	mov	r0, r4
}
   b46b8:	b009      	add	sp, #36	; 0x24
   b46ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b46be:	4718      	bx	r3

000b46c0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b46c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b46c4:	ed2d 8b02 	vpush	{d8}
   b46c8:	b091      	sub	sp, #68	; 0x44
   b46ca:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b46cc:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b46ce:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b46d2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b46d6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b46da:	9103      	str	r1, [sp, #12]
   b46dc:	461f      	mov	r7, r3
   b46de:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b46e2:	9304      	str	r3, [sp, #16]
   b46e4:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b46e6:	2a00      	cmp	r2, #0
   b46e8:	f040 80c5 	bne.w	b4876 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b46ec:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b46f0:	428b      	cmp	r3, r1
   b46f2:	f340 814c 	ble.w	b498e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b46f6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b46fa:	42b3      	cmp	r3, r6
   b46fc:	f340 8147 	ble.w	b498e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4700:	2306      	movs	r3, #6
   b4702:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b4706:	2b00      	cmp	r3, #0
   b4708:	f340 8141 	ble.w	b498e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b470c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4710:	2b00      	cmp	r3, #0
   b4712:	f340 813c 	ble.w	b498e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b4716:	7f03      	ldrb	r3, [r0, #28]
   b4718:	b91b      	cbnz	r3, b4722 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b471a:	2faf      	cmp	r7, #175	; 0xaf
   b471c:	bf84      	itt	hi
   b471e:	3701      	addhi	r7, #1
   b4720:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b4722:	f8db 3000 	ldr.w	r3, [fp]
   b4726:	4658      	mov	r0, fp
   b4728:	695b      	ldr	r3, [r3, #20]
   b472a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b472c:	2205      	movs	r2, #5
   b472e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4730:	2200      	movs	r2, #0
   b4732:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4734:	4a98      	ldr	r2, [pc, #608]	; (b4998 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b4736:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b473a:	18d3      	adds	r3, r2, r3
   b473c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b473e:	b2b3      	uxth	r3, r6
   b4740:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4742:	9a05      	ldr	r2, [sp, #20]
   b4744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4746:	5c9b      	ldrb	r3, [r3, r2]
   b4748:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b474a:	b2ab      	uxth	r3, r5
   b474c:	930b      	str	r3, [sp, #44]	; 0x2c
   b474e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b4752:	9308      	str	r3, [sp, #32]
   b4754:	9b03      	ldr	r3, [sp, #12]
   b4756:	fb02 f905 	mul.w	r9, r2, r5
   b475a:	fa19 f983 	uxtah	r9, r9, r3
   b475e:	fa0f f389 	sxth.w	r3, r9
   b4762:	ee08 3a10 	vmov	s16, r3
   b4766:	2308      	movs	r3, #8
   b4768:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b476a:	9b03      	ldr	r3, [sp, #12]
   b476c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4770:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b4774:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b4778:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b477a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b477e:	07d2      	lsls	r2, r2, #31
   b4780:	d552      	bpl.n	b4828 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b4782:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4784:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4788:	d13e      	bne.n	b4808 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b478a:	2c01      	cmp	r4, #1
   b478c:	d13c      	bne.n	b4808 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b478e:	699b      	ldr	r3, [r3, #24]
   b4790:	9906      	ldr	r1, [sp, #24]
   b4792:	461f      	mov	r7, r3
   b4794:	9b04      	ldr	r3, [sp, #16]
   b4796:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b4798:	b212      	sxth	r2, r2
   b479a:	4651      	mov	r1, sl
   b479c:	4658      	mov	r0, fp
   b479e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b47a0:	f109 0301 	add.w	r3, r9, #1
   b47a4:	fa4f f983 	sxtb.w	r9, r3
   b47a8:	9b07      	ldr	r3, [sp, #28]
   b47aa:	085b      	lsrs	r3, r3, #1
   b47ac:	9307      	str	r3, [sp, #28]
   b47ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b47b0:	3b01      	subs	r3, #1
   b47b2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b47b6:	930a      	str	r3, [sp, #40]	; 0x28
   b47b8:	d1de      	bne.n	b4778 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b47ba:	9f05      	ldr	r7, [sp, #20]
   b47bc:	3701      	adds	r7, #1
   b47be:	b27b      	sxtb	r3, r7
   b47c0:	9305      	str	r3, [sp, #20]
   b47c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b47c4:	3b01      	subs	r3, #1
   b47c6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b47ca:	9309      	str	r3, [sp, #36]	; 0x24
   b47cc:	d1b9      	bne.n	b4742 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b47ce:	9b04      	ldr	r3, [sp, #16]
   b47d0:	4543      	cmp	r3, r8
   b47d2:	d00f      	beq.n	b47f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b47d4:	2d01      	cmp	r5, #1
   b47d6:	f8db 3000 	ldr.w	r3, [fp]
   b47da:	d13b      	bne.n	b4854 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b47dc:	2c01      	cmp	r4, #1
   b47de:	d139      	bne.n	b4854 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b47e0:	9908      	ldr	r1, [sp, #32]
   b47e2:	f8cd 8000 	str.w	r8, [sp]
   b47e6:	3105      	adds	r1, #5
   b47e8:	6a1c      	ldr	r4, [r3, #32]
   b47ea:	4632      	mov	r2, r6
   b47ec:	2308      	movs	r3, #8
   b47ee:	b209      	sxth	r1, r1
   b47f0:	4658      	mov	r0, fp
   b47f2:	47a0      	blx	r4
        endWrite();
   b47f4:	f8db 3000 	ldr.w	r3, [fp]
   b47f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b47fa:	4658      	mov	r0, fp
}
   b47fc:	b011      	add	sp, #68	; 0x44
   b47fe:	ecbd 8b02 	vpop	{d8}
   b4802:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b4806:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b4808:	9906      	ldr	r1, [sp, #24]
   b480a:	fb14 f202 	smulbb	r2, r4, r2
   b480e:	440a      	add	r2, r1
   b4810:	9904      	ldr	r1, [sp, #16]
   b4812:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4814:	9400      	str	r4, [sp, #0]
   b4816:	69db      	ldr	r3, [r3, #28]
   b4818:	ee18 1a10 	vmov	r1, s16
   b481c:	461f      	mov	r7, r3
   b481e:	b212      	sxth	r2, r2
   b4820:	462b      	mov	r3, r5
   b4822:	4658      	mov	r0, fp
   b4824:	47b8      	blx	r7
   b4826:	e7bb      	b.n	b47a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b4828:	9a04      	ldr	r2, [sp, #16]
   b482a:	4542      	cmp	r2, r8
   b482c:	d0b8      	beq.n	b47a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b482e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4830:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4834:	d107      	bne.n	b4846 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b4836:	2c01      	cmp	r4, #1
   b4838:	d105      	bne.n	b4846 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b483a:	699b      	ldr	r3, [r3, #24]
   b483c:	9906      	ldr	r1, [sp, #24]
   b483e:	461f      	mov	r7, r3
   b4840:	440a      	add	r2, r1
   b4842:	4643      	mov	r3, r8
   b4844:	e7a8      	b.n	b4798 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4846:	9906      	ldr	r1, [sp, #24]
   b4848:	f8cd 8004 	str.w	r8, [sp, #4]
   b484c:	fb14 f202 	smulbb	r2, r4, r2
   b4850:	440a      	add	r2, r1
   b4852:	e7df      	b.n	b4814 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b4854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4856:	f8cd 8004 	str.w	r8, [sp, #4]
   b485a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b485e:	9a08      	ldr	r2, [sp, #32]
   b4860:	00e4      	lsls	r4, r4, #3
   b4862:	440a      	add	r2, r1
   b4864:	4611      	mov	r1, r2
   b4866:	9400      	str	r4, [sp, #0]
   b4868:	69dc      	ldr	r4, [r3, #28]
   b486a:	4632      	mov	r2, r6
   b486c:	462b      	mov	r3, r5
   b486e:	b209      	sxth	r1, r1
   b4870:	4658      	mov	r0, fp
   b4872:	47a0      	blx	r4
        endWrite();
   b4874:	e7be      	b.n	b47f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4876:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b4878:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b487a:	6812      	ldr	r2, [r2, #0]
   b487c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b487e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b4880:	b2ff      	uxtb	r7, r7
   b4882:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b4886:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b488a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b488c:	789a      	ldrb	r2, [r3, #2]
   b488e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b4890:	78da      	ldrb	r2, [r3, #3]
   b4892:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b4894:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4896:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b489a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b489e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b48a0:	d801      	bhi.n	b48a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b48a2:	2c01      	cmp	r4, #1
   b48a4:	d957      	bls.n	b4956 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b48a6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b48aa:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b48ac:	fa0f f38a 	sxth.w	r3, sl
   b48b0:	9307      	str	r3, [sp, #28]
        startWrite();
   b48b2:	f8db 3000 	ldr.w	r3, [fp]
   b48b6:	4658      	mov	r0, fp
   b48b8:	695b      	ldr	r3, [r3, #20]
   b48ba:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b48bc:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b48be:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b48c2:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b48c4:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b48c8:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b48ca:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b48cc:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b48ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b48d0:	429f      	cmp	r7, r3
   b48d2:	d28f      	bcs.n	b47f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b48d4:	9b07      	ldr	r3, [sp, #28]
   b48d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b48d8:	443b      	add	r3, r7
   b48da:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b48de:	2200      	movs	r2, #0
   b48e0:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b48e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b48e4:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b48e6:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b48ea:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b48ee:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b48f2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b48f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b48f6:	9905      	ldr	r1, [sp, #20]
   b48f8:	4291      	cmp	r1, r2
   b48fa:	d241      	bcs.n	b4980 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b48fc:	1c5a      	adds	r2, r3, #1
   b48fe:	b2d2      	uxtb	r2, r2
   b4900:	075b      	lsls	r3, r3, #29
   b4902:	920d      	str	r2, [sp, #52]	; 0x34
   b4904:	d107      	bne.n	b4916 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b4906:	9b06      	ldr	r3, [sp, #24]
   b4908:	9906      	ldr	r1, [sp, #24]
   b490a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b490c:	3301      	adds	r3, #1
   b490e:	b29b      	uxth	r3, r3
   b4910:	f812 9001 	ldrb.w	r9, [r2, r1]
   b4914:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b4916:	f019 0f80 	tst.w	r9, #128	; 0x80
   b491a:	d012      	beq.n	b4942 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b491c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b491e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4922:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b4926:	d11a      	bne.n	b495e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b4928:	2c01      	cmp	r4, #1
   b492a:	d118      	bne.n	b495e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b492c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b492e:	699b      	ldr	r3, [r3, #24]
   b4930:	4411      	add	r1, r2
   b4932:	9a05      	ldr	r2, [sp, #20]
   b4934:	4411      	add	r1, r2
   b4936:	461e      	mov	r6, r3
   b4938:	4652      	mov	r2, sl
   b493a:	9b04      	ldr	r3, [sp, #16]
   b493c:	b209      	sxth	r1, r1
   b493e:	4658      	mov	r0, fp
   b4940:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b4942:	9e05      	ldr	r6, [sp, #20]
   b4944:	3601      	adds	r6, #1
   b4946:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4948:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b494c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b494e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b4952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4954:	e7ce      	b.n	b48f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4956:	2300      	movs	r3, #0
   b4958:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b495c:	e7a9      	b.n	b48b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b495e:	9805      	ldr	r0, [sp, #20]
   b4960:	9a08      	ldr	r2, [sp, #32]
   b4962:	4402      	add	r2, r0
   b4964:	fb02 1105 	mla	r1, r2, r5, r1
   b4968:	9a04      	ldr	r2, [sp, #16]
   b496a:	e9cd 4200 	strd	r4, r2, [sp]
   b496e:	69db      	ldr	r3, [r3, #28]
   b4970:	ee18 2a10 	vmov	r2, s16
   b4974:	461e      	mov	r6, r3
   b4976:	b209      	sxth	r1, r1
   b4978:	462b      	mov	r3, r5
   b497a:	4658      	mov	r0, fp
   b497c:	47b0      	blx	r6
   b497e:	e7e0      	b.n	b4942 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b4980:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b4982:	3701      	adds	r7, #1
   b4984:	4498      	add	r8, r3
   b4986:	fa5f f888 	uxtb.w	r8, r8
   b498a:	b2ff      	uxtb	r7, r7
   b498c:	e79f      	b.n	b48ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b498e:	b011      	add	sp, #68	; 0x44
   b4990:	ecbd 8b02 	vpop	{d8}
   b4994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4998:	000b7453 	.word	0x000b7453

000b499c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b499c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b499e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b49a0:	b085      	sub	sp, #20
   b49a2:	4604      	mov	r4, r0
   b49a4:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b49a6:	2a00      	cmp	r2, #0
   b49a8:	d134      	bne.n	b4a14 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b49aa:	290a      	cmp	r1, #10
   b49ac:	d108      	bne.n	b49c0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b49ae:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b49b0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b49b2:	7e42      	ldrb	r2, [r0, #25]
   b49b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b49b8:	8263      	strh	r3, [r4, #18]
}
   b49ba:	2001      	movs	r0, #1
   b49bc:	b005      	add	sp, #20
   b49be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b49c0:	290d      	cmp	r1, #13
   b49c2:	d0fa      	beq.n	b49ba <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b49c4:	7ee1      	ldrb	r1, [r4, #27]
   b49c6:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b49c8:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b49ca:	b171      	cbz	r1, b49ea <_ZN12Adafruit_GFX5writeEh+0x4e>
   b49cc:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b49d0:	2106      	movs	r1, #6
   b49d2:	fb11 6100 	smlabb	r1, r1, r0, r6
   b49d6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b49da:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b49dc:	bfc1      	itttt	gt
   b49de:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b49e2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b49e4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b49e8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b49ea:	8ae2      	ldrh	r2, [r4, #22]
   b49ec:	9201      	str	r2, [sp, #4]
   b49ee:	8aa2      	ldrh	r2, [r4, #20]
   b49f0:	9200      	str	r2, [sp, #0]
   b49f2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b49f6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b49fa:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b49fe:	4620      	mov	r0, r4
   b4a00:	f7ff fe5e 	bl	b46c0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b4a04:	7e23      	ldrb	r3, [r4, #24]
   b4a06:	8a22      	ldrh	r2, [r4, #16]
   b4a08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4a0c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4a10:	8223      	strh	r3, [r4, #16]
   b4a12:	e7d2      	b.n	b49ba <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b4a14:	290a      	cmp	r1, #10
   b4a16:	d107      	bne.n	b4a28 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b4a18:	2300      	movs	r3, #0
   b4a1a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b4a1c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4a1e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b4a20:	8a43      	ldrh	r3, [r0, #18]
   b4a22:	fb01 3302 	mla	r3, r1, r2, r3
   b4a26:	e7c7      	b.n	b49b8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b4a28:	290d      	cmp	r1, #13
   b4a2a:	d0c6      	beq.n	b49ba <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b4a2c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b4a2e:	42a9      	cmp	r1, r5
   b4a30:	d3c3      	bcc.n	b49ba <_ZN12Adafruit_GFX5writeEh+0x1e>
   b4a32:	7a51      	ldrb	r1, [r2, #9]
   b4a34:	4299      	cmp	r1, r3
   b4a36:	d3c0      	bcc.n	b49ba <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4a38:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b4a3a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b4a3c:	b2ed      	uxtb	r5, r5
   b4a3e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b4a42:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4a44:	b328      	cbz	r0, b4a92 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4a46:	78e9      	ldrb	r1, [r5, #3]
   b4a48:	b319      	cbz	r1, b4a92 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4a4a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4a4c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4a4e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4a50:	b191      	cbz	r1, b4a78 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b4a52:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4a56:	4408      	add	r0, r1
   b4a58:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4a5c:	fb06 1100 	mla	r1, r6, r0, r1
   b4a60:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4a64:	4281      	cmp	r1, r0
   b4a66:	dd07      	ble.n	b4a78 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4a68:	2000      	movs	r0, #0
   b4a6a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4a6c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4a70:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b4a72:	fb02 1207 	mla	r2, r2, r7, r1
   b4a76:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4a78:	8ae2      	ldrh	r2, [r4, #22]
   b4a7a:	9201      	str	r2, [sp, #4]
   b4a7c:	8aa2      	ldrh	r2, [r4, #20]
   b4a7e:	9200      	str	r2, [sp, #0]
   b4a80:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4a84:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4a88:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4a8c:	4620      	mov	r0, r4
   b4a8e:	f7ff fe17 	bl	b46c0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4a92:	7929      	ldrb	r1, [r5, #4]
   b4a94:	7e22      	ldrb	r2, [r4, #24]
   b4a96:	8a23      	ldrh	r3, [r4, #16]
   b4a98:	fb01 3302 	mla	r3, r1, r2, r3
   b4a9c:	e7b8      	b.n	b4a10 <_ZN12Adafruit_GFX5writeEh+0x74>

000b4a9e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b4a9e:	2901      	cmp	r1, #1
   b4aa0:	bf38      	it	cc
   b4aa2:	2101      	movcc	r1, #1
   b4aa4:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b4aa6:	7641      	strb	r1, [r0, #25]
}
   b4aa8:	4770      	bx	lr

000b4aaa <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4aaa:	4770      	bx	lr

000b4aac <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4aac:	b510      	push	{r4, lr}
  }
   b4aae:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4ab0:	4604      	mov	r4, r0
  }
   b4ab2:	f7ff fb04 	bl	b40be <_ZdlPvj>
   b4ab6:	4620      	mov	r0, r4
   b4ab8:	bd10      	pop	{r4, pc}

000b4aba <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4aba:	b40e      	push	{r1, r2, r3}
   b4abc:	b503      	push	{r0, r1, lr}
   b4abe:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4ac0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4ac2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4ac6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4ac8:	f001 fc27 	bl	b631a <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4acc:	b002      	add	sp, #8
   b4ace:	f85d eb04 	ldr.w	lr, [sp], #4
   b4ad2:	b003      	add	sp, #12
   b4ad4:	4770      	bx	lr
	...

000b4ad8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4ad8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4ada:	4604      	mov	r4, r0
   b4adc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4ade:	7922      	ldrb	r2, [r4, #4]
   b4ae0:	68a3      	ldr	r3, [r4, #8]
   b4ae2:	b132      	cbz	r2, b4af2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4ae4:	b9a3      	cbnz	r3, b4b10 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4ae6:	490b      	ldr	r1, [pc, #44]	; (b4b14 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4ae8:	b002      	add	sp, #8
   b4aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4aee:	f001 bbd9 	b.w	b62a4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4af2:	4a09      	ldr	r2, [pc, #36]	; (b4b18 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4af4:	7b26      	ldrb	r6, [r4, #12]
   b4af6:	4d09      	ldr	r5, [pc, #36]	; (b4b1c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4af8:	4909      	ldr	r1, [pc, #36]	; (b4b20 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4afa:	7b64      	ldrb	r4, [r4, #13]
   b4afc:	2e01      	cmp	r6, #1
   b4afe:	bf18      	it	ne
   b4b00:	4629      	movne	r1, r5
   b4b02:	e9cd 1400 	strd	r1, r4, [sp]
   b4b06:	4907      	ldr	r1, [pc, #28]	; (b4b24 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4b08:	f7ff ffd7 	bl	b4aba <_ZN5Print6printfEPKcz>
  }
   b4b0c:	b002      	add	sp, #8
   b4b0e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4b10:	4a05      	ldr	r2, [pc, #20]	; (b4b28 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4b12:	e7ef      	b.n	b4af4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4b14:	000b79bd 	.word	0x000b79bd
   b4b18:	000b7452 	.word	0x000b7452
   b4b1c:	000b79b9 	.word	0x000b79b9
   b4b20:	000b79b5 	.word	0x000b79b5
   b4b24:	000b79d3 	.word	0x000b79d3
   b4b28:	000b79ac 	.word	0x000b79ac

000b4b2c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4b2c:	b510      	push	{r4, lr}
   b4b2e:	4b04      	ldr	r3, [pc, #16]	; (b4b40 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b4b30:	6003      	str	r3, [r0, #0]
   b4b32:	4604      	mov	r4, r0
  if(buffer) {
   b4b34:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4b36:	b108      	cbz	r0, b4b3c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b4b38:	f001 f944 	bl	b5dc4 <free>
    buffer = NULL;
  }
}
   b4b3c:	4620      	mov	r0, r4
   b4b3e:	bd10      	pop	{r4, pc}
   b4b40:	000b7eac 	.word	0x000b7eac

000b4b44 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4b44:	b510      	push	{r4, lr}
   b4b46:	4604      	mov	r4, r0
}
   b4b48:	f7ff fff0 	bl	b4b2c <_ZN16Adafruit_SSD1306D1Ev>
   b4b4c:	4620      	mov	r0, r4
   b4b4e:	2150      	movs	r1, #80	; 0x50
   b4b50:	f7ff fab5 	bl	b40be <_ZdlPvj>
   b4b54:	4620      	mov	r0, r4
   b4b56:	bd10      	pop	{r4, pc}

000b4b58 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4b58:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4b5a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4b5c:	db4b      	blt.n	b4bf6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4b5e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b4b62:	428c      	cmp	r4, r1
   b4b64:	dd47      	ble.n	b4bf6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4b66:	2a00      	cmp	r2, #0
   b4b68:	db45      	blt.n	b4bf6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4b6a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b4b6e:	4294      	cmp	r4, r2
   b4b70:	dd41      	ble.n	b4bf6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b4b72:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b4b74:	2c02      	cmp	r4, #2
   b4b76:	d01f      	beq.n	b4bb8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4b78:	2c03      	cmp	r4, #3
   b4b7a:	d026      	beq.n	b4bca <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b4b7c:	2c01      	cmp	r4, #1
   b4b7e:	d104      	bne.n	b4b8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4b80:	8904      	ldrh	r4, [r0, #8]
   b4b82:	43d2      	mvns	r2, r2
   b4b84:	4414      	add	r4, r2
      break;
   b4b86:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4b88:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b4b8a:	2b01      	cmp	r3, #1
   b4b8c:	d023      	beq.n	b4bd6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b4b8e:	2b02      	cmp	r3, #2
   b4b90:	d032      	beq.n	b4bf8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b4b92:	bb83      	cbnz	r3, b4bf6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b4b94:	2a00      	cmp	r2, #0
   b4b96:	4613      	mov	r3, r2
   b4b98:	8904      	ldrh	r4, [r0, #8]
   b4b9a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4b9c:	bfb8      	it	lt
   b4b9e:	1dd3      	addlt	r3, r2, #7
   b4ba0:	10db      	asrs	r3, r3, #3
   b4ba2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4ba6:	f002 0207 	and.w	r2, r2, #7
   b4baa:	2301      	movs	r3, #1
   b4bac:	4093      	lsls	r3, r2
   b4bae:	5c42      	ldrb	r2, [r0, r1]
   b4bb0:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4bb4:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b4bb6:	e01e      	b.n	b4bf6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b4bb8:	8904      	ldrh	r4, [r0, #8]
   b4bba:	3c01      	subs	r4, #1
   b4bbc:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b4bbe:	8944      	ldrh	r4, [r0, #10]
   b4bc0:	43d2      	mvns	r2, r2
   b4bc2:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b4bc4:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b4bc6:	b212      	sxth	r2, r2
      break;
   b4bc8:	e7df      	b.n	b4b8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b4bca:	8944      	ldrh	r4, [r0, #10]
   b4bcc:	3c01      	subs	r4, #1
   b4bce:	1a64      	subs	r4, r4, r1
      break;
   b4bd0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b4bd2:	b222      	sxth	r2, r4
      break;
   b4bd4:	e7d9      	b.n	b4b8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b4bd6:	2a00      	cmp	r2, #0
   b4bd8:	8904      	ldrh	r4, [r0, #8]
   b4bda:	4613      	mov	r3, r2
   b4bdc:	bfb8      	it	lt
   b4bde:	1dd3      	addlt	r3, r2, #7
   b4be0:	10db      	asrs	r3, r3, #3
   b4be2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4be6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4be8:	f002 0007 	and.w	r0, r2, #7
   b4bec:	2201      	movs	r2, #1
   b4bee:	4082      	lsls	r2, r0
   b4bf0:	5c58      	ldrb	r0, [r3, r1]
   b4bf2:	4302      	orrs	r2, r0
   b4bf4:	545a      	strb	r2, [r3, r1]
}
   b4bf6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4bf8:	2a00      	cmp	r2, #0
   b4bfa:	4613      	mov	r3, r2
   b4bfc:	8904      	ldrh	r4, [r0, #8]
   b4bfe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4c00:	bfb8      	it	lt
   b4c02:	1dd3      	addlt	r3, r2, #7
   b4c04:	10db      	asrs	r3, r3, #3
   b4c06:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4c0a:	f002 0207 	and.w	r2, r2, #7
   b4c0e:	2301      	movs	r3, #1
   b4c10:	fa03 f202 	lsl.w	r2, r3, r2
   b4c14:	5c43      	ldrb	r3, [r0, r1]
   b4c16:	405a      	eors	r2, r3
   b4c18:	e7cc      	b.n	b4bb4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b4c1c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b4c1c:	b570      	push	{r4, r5, r6, lr}
   b4c1e:	4604      	mov	r4, r0
   b4c20:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4c22:	2600      	movs	r6, #0
   b4c24:	f7ff fce2 	bl	b45ec <_ZN12Adafruit_GFXC1Ess>
   b4c28:	4b11      	ldr	r3, [pc, #68]	; (b4c70 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b4c2a:	6023      	str	r3, [r4, #0]
   b4c2c:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b4c2e:	b915      	cbnz	r5, b4c36 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b4c30:	f002 f9ae 	bl	b6f90 <_Z19__fetch_global_Wirev>
   b4c34:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4c36:	23ff      	movs	r3, #255	; 0xff
   b4c38:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b4c3c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b4c40:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b4c44:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b4c48:	4b0a      	ldr	r3, [pc, #40]	; (b4c74 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b4c4a:	63a3      	str	r3, [r4, #56]	; 0x38
   b4c4c:	2301      	movs	r3, #1
   b4c4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b4c52:	9b05      	ldr	r3, [sp, #20]
   b4c54:	64a3      	str	r3, [r4, #72]	; 0x48
   b4c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b4c5a:	9b06      	ldr	r3, [sp, #24]
   b4c5c:	86a2      	strh	r2, [r4, #52]	; 0x34
   b4c5e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b4c62:	6426      	str	r6, [r4, #64]	; 0x40
   b4c64:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b4c68:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b4c6a:	4620      	mov	r0, r4
   b4c6c:	bd70      	pop	{r4, r5, r6, pc}
   b4c6e:	bf00      	nop
   b4c70:	000b7eac 	.word	0x000b7eac
   b4c74:	000b79f8 	.word	0x000b79f8

000b4c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c7a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4c7c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4c7e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4c80:	b190      	cbz	r0, b4ca8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b4c82:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4c86:	f001 f993 	bl	b5fb0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4c8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c8c:	6803      	ldr	r3, [r0, #0]
   b4c8e:	2100      	movs	r1, #0
   b4c90:	689b      	ldr	r3, [r3, #8]
   b4c92:	4798      	blx	r3
    WIRE_WRITE(c);
   b4c94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c96:	6803      	ldr	r3, [r0, #0]
   b4c98:	4629      	mov	r1, r5
   b4c9a:	689b      	ldr	r3, [r3, #8]
   b4c9c:	4798      	blx	r3
    wire->endTransmission();
   b4c9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b4ca0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b4ca4:	f001 b98b 	b.w	b5fbe <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4ca8:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4cac:	4601      	mov	r1, r0
   b4cae:	b298      	uxth	r0, r3
   b4cb0:	f002 f927 	bl	b6f02 <digitalWrite>
  if(spi) {
   b4cb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4cb6:	b120      	cbz	r0, b4cc2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b4cb8:	4629      	mov	r1, r5
}
   b4cba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b4cbe:	f001 bc0f 	b.w	b64e0 <_ZN8SPIClass8transferEh>
   b4cc2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4cc4:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4cc6:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4cca:	ea05 0107 	and.w	r1, r5, r7
   b4cce:	b280      	uxth	r0, r0
   b4cd0:	f002 f917 	bl	b6f02 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4cd4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4cd8:	2101      	movs	r1, #1
   b4cda:	b280      	uxth	r0, r0
   b4cdc:	f002 f911 	bl	b6f02 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4ce0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4ce4:	2100      	movs	r1, #0
   b4ce6:	b280      	uxth	r0, r0
   b4ce8:	f002 f90b 	bl	b6f02 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4cec:	3e01      	subs	r6, #1
   b4cee:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b4cf2:	d1e8      	bne.n	b4cc6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b4cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4cf6 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4cf6:	b538      	push	{r3, r4, r5, lr}
   b4cf8:	4604      	mov	r4, r0
  TRANSACTION_START
   b4cfa:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4cfc:	460d      	mov	r5, r1
  TRANSACTION_START
   b4cfe:	b180      	cbz	r0, b4d22 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4d00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4d02:	f001 f91b 	bl	b5f3c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b4d06:	2d00      	cmp	r5, #0
   b4d08:	4620      	mov	r0, r4
   b4d0a:	bf14      	ite	ne
   b4d0c:	21a7      	movne	r1, #167	; 0xa7
   b4d0e:	21a6      	moveq	r1, #166	; 0xa6
   b4d10:	f7ff ffb2 	bl	b4c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b4d14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4d16:	b188      	cbz	r0, b4d3c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b4d18:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b4d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4d1e:	f001 b90d 	b.w	b5f3c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b4d22:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4d24:	b118      	cbz	r0, b4d2e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b4d26:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4d2a:	f001 fb6b 	bl	b6404 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4d2e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4d32:	2100      	movs	r1, #0
   b4d34:	b280      	uxth	r0, r0
   b4d36:	f002 f8e4 	bl	b6f02 <digitalWrite>
   b4d3a:	e7e4      	b.n	b4d06 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b4d3c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4d40:	2101      	movs	r1, #1
   b4d42:	b280      	uxth	r0, r0
   b4d44:	f002 f8dd 	bl	b6f02 <digitalWrite>
   b4d48:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4d4a:	b118      	cbz	r0, b4d54 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b4d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b4d50:	f001 bb3e 	b.w	b63d0 <_ZN8SPIClass14endTransactionEv>
}
   b4d54:	bd38      	pop	{r3, r4, r5, pc}

000b4d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4d56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4d5a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4d5c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4d5e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4d60:	188f      	adds	r7, r1, r2
   b4d62:	b340      	cbz	r0, b4db6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b4d64:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4d68:	f001 f922 	bl	b5fb0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4d6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4d6e:	6803      	ldr	r3, [r0, #0]
   b4d70:	2100      	movs	r1, #0
   b4d72:	689b      	ldr	r3, [r3, #8]
   b4d74:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b4d76:	2601      	movs	r6, #1
    while(n--) {
   b4d78:	42af      	cmp	r7, r5
        wire->endTransmission();
   b4d7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b4d7c:	d017      	beq.n	b4dae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b4d7e:	2e1f      	cmp	r6, #31
   b4d80:	d90c      	bls.n	b4d9c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b4d82:	f001 f91c 	bl	b5fbe <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b4d86:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4d8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4d8c:	f001 f910 	bl	b5fb0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4d90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4d92:	6803      	ldr	r3, [r0, #0]
   b4d94:	2100      	movs	r1, #0
   b4d96:	689b      	ldr	r3, [r3, #8]
   b4d98:	4798      	blx	r3
        bytesOut = 1;
   b4d9a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4d9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4d9e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4da2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b4da4:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4da6:	689b      	ldr	r3, [r3, #8]
   b4da8:	4798      	blx	r3
      bytesOut++;
   b4daa:	b2f6      	uxtb	r6, r6
    while(n--) {
   b4dac:	e7e4      	b.n	b4d78 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b4dae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b4db2:	f001 b904 	b.w	b5fbe <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4db6:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4dba:	4601      	mov	r1, r0
   b4dbc:	b298      	uxth	r0, r3
   b4dbe:	f002 f8a0 	bl	b6f02 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4dc2:	42bd      	cmp	r5, r7
   b4dc4:	d022      	beq.n	b4e0c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b4dc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4dc8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b4dcc:	b118      	cbz	r0, b4dd6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b4dce:	4649      	mov	r1, r9
   b4dd0:	f001 fb86 	bl	b64e0 <_ZN8SPIClass8transferEh>
   b4dd4:	e7f5      	b.n	b4dc2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b4dd6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4dd8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4ddc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4de0:	ea09 0108 	and.w	r1, r9, r8
   b4de4:	b280      	uxth	r0, r0
   b4de6:	f002 f88c 	bl	b6f02 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4dea:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4dee:	2101      	movs	r1, #1
   b4df0:	b280      	uxth	r0, r0
   b4df2:	f002 f886 	bl	b6f02 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4df6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4dfa:	2100      	movs	r1, #0
   b4dfc:	b280      	uxth	r0, r0
   b4dfe:	f002 f880 	bl	b6f02 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4e02:	3e01      	subs	r6, #1
   b4e04:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b4e08:	d1e8      	bne.n	b4ddc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b4e0a:	e7da      	b.n	b4dc2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b4e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4e10 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b4e10:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4e14:	1dda      	adds	r2, r3, #7
   b4e16:	bf48      	it	mi
   b4e18:	f103 020e 	addmi.w	r2, r3, #14
   b4e1c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4e20:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4e22:	10d2      	asrs	r2, r2, #3
   b4e24:	435a      	muls	r2, r3
   b4e26:	2100      	movs	r1, #0
   b4e28:	f002 ba3e 	b.w	b72a8 <memset>

000b4e2c <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b4e2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4e30:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4e32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b4e34:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b4e38:	4604      	mov	r4, r0
   b4e3a:	460f      	mov	r7, r1
   b4e3c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4e3e:	b1c3      	cbz	r3, b4e72 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b4e40:	4620      	mov	r0, r4
   b4e42:	f7ff ffe5 	bl	b4e10 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b4e46:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b4e4a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b4e4e:	2820      	cmp	r0, #32
   b4e50:	dc21      	bgt.n	b4e96 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4e52:	2320      	movs	r3, #32
   b4e54:	2201      	movs	r2, #1
   b4e56:	3820      	subs	r0, #32
   b4e58:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4e5c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b4e60:	2373      	movs	r3, #115	; 0x73
   b4e62:	3973      	subs	r1, #115	; 0x73
   b4e64:	9300      	str	r3, [sp, #0]
   b4e66:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4e6a:	4b89      	ldr	r3, [pc, #548]	; (b5090 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b4e6c:	f340 024f 	sbfx	r2, r0, #1, #16
   b4e70:	e021      	b.n	b4eb6 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4e72:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4e76:	1dd8      	adds	r0, r3, #7
   b4e78:	bf48      	it	mi
   b4e7a:	f103 000e 	addmi.w	r0, r3, #14
   b4e7e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b4e82:	10c0      	asrs	r0, r0, #3
   b4e84:	4358      	muls	r0, r3
   b4e86:	f000 ff95 	bl	b5db4 <malloc>
   b4e8a:	62e0      	str	r0, [r4, #44]	; 0x2c
   b4e8c:	2800      	cmp	r0, #0
   b4e8e:	d1d7      	bne.n	b4e40 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b4e90:	b004      	add	sp, #16
   b4e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b4e96:	3840      	subs	r0, #64	; 0x40
   b4e98:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b4e9c:	fa02 f280 	sxtah	r2, r2, r0
   b4ea0:	2340      	movs	r3, #64	; 0x40
   b4ea2:	2001      	movs	r0, #1
   b4ea4:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b4ea8:	2352      	movs	r3, #82	; 0x52
   b4eaa:	3952      	subs	r1, #82	; 0x52
   b4eac:	9300      	str	r3, [sp, #0]
   b4eae:	4b79      	ldr	r3, [pc, #484]	; (b5094 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b4eb0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4eb4:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4eb6:	4620      	mov	r0, r4
   b4eb8:	f341 014f 	sbfx	r1, r1, #1, #16
   b4ebc:	f7ff fbac 	bl	b4618 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b4ec0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b4ec2:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b4ec6:	2800      	cmp	r0, #0
   b4ec8:	d078      	beq.n	b4fbc <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4eca:	2d00      	cmp	r5, #0
   b4ecc:	d174      	bne.n	b4fb8 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b4ece:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b4ed2:	2b20      	cmp	r3, #32
   b4ed4:	bf0c      	ite	eq
   b4ed6:	253c      	moveq	r5, #60	; 0x3c
   b4ed8:	253d      	movne	r5, #61	; 0x3d
   b4eda:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b4ede:	f1b8 0f00 	cmp.w	r8, #0
   b4ee2:	d001      	beq.n	b4ee8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4ee4:	f001 f82e 	bl	b5f44 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b4ee8:	b1fe      	cbz	r6, b4f2a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b4eea:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4eee:	2800      	cmp	r0, #0
   b4ef0:	db1b      	blt.n	b4f2a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b4ef2:	2101      	movs	r1, #1
   b4ef4:	b280      	uxth	r0, r0
   b4ef6:	f001 fff3 	bl	b6ee0 <pinMode>
    digitalWrite(rstPin, HIGH);
   b4efa:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4efe:	2101      	movs	r1, #1
   b4f00:	b280      	uxth	r0, r0
   b4f02:	f001 fffe 	bl	b6f02 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b4f06:	2001      	movs	r0, #1
   b4f08:	f000 ff84 	bl	b5e14 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b4f0c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4f10:	2100      	movs	r1, #0
   b4f12:	b280      	uxth	r0, r0
   b4f14:	f001 fff5 	bl	b6f02 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b4f18:	200a      	movs	r0, #10
   b4f1a:	f000 ff7b 	bl	b5e14 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b4f1e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4f22:	2101      	movs	r1, #1
   b4f24:	b280      	uxth	r0, r0
   b4f26:	f001 ffec 	bl	b6f02 <digitalWrite>
  TRANSACTION_START
   b4f2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f2c:	2800      	cmp	r0, #0
   b4f2e:	d074      	beq.n	b501a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b4f30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4f32:	f001 f803 	bl	b5f3c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b4f36:	2204      	movs	r2, #4
   b4f38:	4957      	ldr	r1, [pc, #348]	; (b5098 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b4f3a:	4620      	mov	r0, r4
   b4f3c:	f7ff ff0b 	bl	b4d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b4f40:	8961      	ldrh	r1, [r4, #10]
   b4f42:	3901      	subs	r1, #1
   b4f44:	b2c9      	uxtb	r1, r1
   b4f46:	4620      	mov	r0, r4
   b4f48:	f7ff fe96 	bl	b4c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b4f4c:	4953      	ldr	r1, [pc, #332]	; (b509c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b4f4e:	2204      	movs	r2, #4
   b4f50:	4620      	mov	r0, r4
   b4f52:	f7ff ff00 	bl	b4d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b4f56:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4f5a:	2b01      	cmp	r3, #1
   b4f5c:	bf0c      	ite	eq
   b4f5e:	2110      	moveq	r1, #16
   b4f60:	2114      	movne	r1, #20
   b4f62:	4620      	mov	r0, r4
   b4f64:	f7ff fe88 	bl	b4c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b4f68:	2204      	movs	r2, #4
   b4f6a:	494d      	ldr	r1, [pc, #308]	; (b50a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b4f6c:	4620      	mov	r0, r4
   b4f6e:	f7ff fef2 	bl	b4d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b4f72:	68a3      	ldr	r3, [r4, #8]
   b4f74:	4a4b      	ldr	r2, [pc, #300]	; (b50a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b4f76:	4293      	cmp	r3, r2
   b4f78:	d15c      	bne.n	b5034 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b4f7a:	494b      	ldr	r1, [pc, #300]	; (b50a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b4f7c:	2204      	movs	r2, #4
   b4f7e:	4620      	mov	r0, r4
   b4f80:	f7ff fee9 	bl	b4d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b4f84:	21d9      	movs	r1, #217	; 0xd9
   b4f86:	4620      	mov	r0, r4
   b4f88:	f7ff fe76 	bl	b4c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b4f8c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4f90:	2b01      	cmp	r3, #1
   b4f92:	bf0c      	ite	eq
   b4f94:	2122      	moveq	r1, #34	; 0x22
   b4f96:	21f1      	movne	r1, #241	; 0xf1
   b4f98:	4620      	mov	r0, r4
   b4f9a:	f7ff fe6d 	bl	b4c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b4f9e:	4620      	mov	r0, r4
   b4fa0:	4942      	ldr	r1, [pc, #264]	; (b50ac <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b4fa2:	2206      	movs	r2, #6
   b4fa4:	f7ff fed7 	bl	b4d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b4fa8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4faa:	2800      	cmp	r0, #0
   b4fac:	d063      	beq.n	b5076 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b4fae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b4fb0:	f000 ffc4 	bl	b5f3c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b4fb4:	2001      	movs	r0, #1
   b4fb6:	e76b      	b.n	b4e90 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4fb8:	b26d      	sxtb	r5, r5
   b4fba:	e78e      	b.n	b4eda <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b4fbc:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b4fc0:	2101      	movs	r1, #1
   b4fc2:	b280      	uxth	r0, r0
   b4fc4:	f001 ff8c 	bl	b6ee0 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b4fc8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4fcc:	2101      	movs	r1, #1
   b4fce:	b280      	uxth	r0, r0
   b4fd0:	f001 ff86 	bl	b6ee0 <pinMode>
    SSD1306_DESELECT
   b4fd4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4fd8:	2101      	movs	r1, #1
   b4fda:	b280      	uxth	r0, r0
   b4fdc:	f001 ff91 	bl	b6f02 <digitalWrite>
    if(spi) { // Hardware SPI
   b4fe0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b4fe2:	b13d      	cbz	r5, b4ff4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b4fe4:	f1b8 0f00 	cmp.w	r8, #0
   b4fe8:	f43f af7e 	beq.w	b4ee8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4fec:	4628      	mov	r0, r5
   b4fee:	f001 f9db 	bl	b63a8 <_ZN8SPIClass5beginEv>
   b4ff2:	e779      	b.n	b4ee8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b4ff4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4ff8:	2101      	movs	r1, #1
   b4ffa:	b280      	uxth	r0, r0
   b4ffc:	f001 ff70 	bl	b6ee0 <pinMode>
      pinMode(clkPin , OUTPUT);
   b5000:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5004:	2101      	movs	r1, #1
   b5006:	b280      	uxth	r0, r0
   b5008:	f001 ff6a 	bl	b6ee0 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b500c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5010:	4629      	mov	r1, r5
   b5012:	b280      	uxth	r0, r0
   b5014:	f001 ff75 	bl	b6f02 <digitalWrite>
   b5018:	e766      	b.n	b4ee8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b501a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b501c:	b118      	cbz	r0, b5026 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b501e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5022:	f001 f9ef 	bl	b6404 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5026:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b502a:	2100      	movs	r1, #0
   b502c:	b280      	uxth	r0, r0
   b502e:	f001 ff68 	bl	b6f02 <digitalWrite>
   b5032:	e780      	b.n	b4f36 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b5034:	4a1e      	ldr	r2, [pc, #120]	; (b50b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b5036:	4293      	cmp	r3, r2
   b5038:	d10e      	bne.n	b5058 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b503a:	491e      	ldr	r1, [pc, #120]	; (b50b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b503c:	2203      	movs	r2, #3
   b503e:	4620      	mov	r0, r4
   b5040:	f7ff fe89 	bl	b4d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5044:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5048:	2b01      	cmp	r3, #1
   b504a:	bf0c      	ite	eq
   b504c:	219f      	moveq	r1, #159	; 0x9f
   b504e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5050:	4620      	mov	r0, r4
   b5052:	f7ff fe11 	bl	b4c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5056:	e795      	b.n	b4f84 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b5058:	4a17      	ldr	r2, [pc, #92]	; (b50b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b505a:	4293      	cmp	r3, r2
   b505c:	d192      	bne.n	b4f84 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b505e:	4917      	ldr	r1, [pc, #92]	; (b50bc <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b5060:	2203      	movs	r2, #3
   b5062:	4620      	mov	r0, r4
   b5064:	f7ff fe77 	bl	b4d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5068:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b506c:	2b01      	cmp	r3, #1
   b506e:	bf0c      	ite	eq
   b5070:	2110      	moveq	r1, #16
   b5072:	21af      	movne	r1, #175	; 0xaf
   b5074:	e7ec      	b.n	b5050 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b5076:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b507a:	2101      	movs	r1, #1
   b507c:	b280      	uxth	r0, r0
   b507e:	f001 ff40 	bl	b6f02 <digitalWrite>
   b5082:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5084:	2800      	cmp	r0, #0
   b5086:	d095      	beq.n	b4fb4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5088:	f001 f9a2 	bl	b63d0 <_ZN8SPIClass14endTransactionEv>
   b508c:	e792      	b.n	b4fb4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b508e:	bf00      	nop
   b5090:	000b7cc4 	.word	0x000b7cc4
   b5094:	000b7a04 	.word	0x000b7a04
   b5098:	000b7f0c 	.word	0x000b7f0c
   b509c:	000b7f10 	.word	0x000b7f10
   b50a0:	000b7f14 	.word	0x000b7f14
   b50a4:	00200080 	.word	0x00200080
   b50a8:	000b7f1e 	.word	0x000b7f1e
   b50ac:	000b7f18 	.word	0x000b7f18
   b50b0:	00400080 	.word	0x00400080
   b50b4:	000b7f22 	.word	0x000b7f22
   b50b8:	00100060 	.word	0x00100060
   b50bc:	000b7f25 	.word	0x000b7f25

000b50c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b50c0:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b50c2:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b50c4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b50c8:	db3d      	blt.n	b5146 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b50ca:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b50ce:	4294      	cmp	r4, r2
   b50d0:	dd39      	ble.n	b5146 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b50d2:	2900      	cmp	r1, #0
      w += x;
   b50d4:	bfbe      	ittt	lt
   b50d6:	185b      	addlt	r3, r3, r1
   b50d8:	b21b      	sxthlt	r3, r3
      x  = 0;
   b50da:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b50dc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b50e0:	18ce      	adds	r6, r1, r3
   b50e2:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b50e4:	bfc4      	itt	gt
   b50e6:	1a63      	subgt	r3, r4, r1
   b50e8:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b50ea:	2b00      	cmp	r3, #0
   b50ec:	dd2b      	ble.n	b5146 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b50ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b50f0:	10d6      	asrs	r6, r2, #3
   b50f2:	fb14 1106 	smlabb	r1, r4, r6, r1
   b50f6:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b50f8:	f002 0007 	and.w	r0, r2, #7
   b50fc:	2201      	movs	r2, #1
   b50fe:	4082      	lsls	r2, r0
      switch(color) {
   b5100:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b5102:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5104:	d016      	beq.n	b5134 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5106:	2d02      	cmp	r5, #2
   b5108:	d00b      	beq.n	b5122 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b510a:	b9e5      	cbnz	r5, b5146 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b510c:	43d2      	mvns	r2, r2
   b510e:	b2d2      	uxtb	r2, r2
   b5110:	440b      	add	r3, r1
   b5112:	4299      	cmp	r1, r3
   b5114:	d017      	beq.n	b5146 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5116:	f811 0b01 	ldrb.w	r0, [r1], #1
   b511a:	4010      	ands	r0, r2
   b511c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5120:	e7f7      	b.n	b5112 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5122:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5124:	4299      	cmp	r1, r3
   b5126:	d00e      	beq.n	b5146 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5128:	f811 0b01 	ldrb.w	r0, [r1], #1
   b512c:	4050      	eors	r0, r2
   b512e:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5132:	e7f7      	b.n	b5124 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5134:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5136:	4299      	cmp	r1, r3
   b5138:	d005      	beq.n	b5146 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b513a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b513e:	4310      	orrs	r0, r2
   b5140:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5144:	e7f7      	b.n	b5136 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5146:	bd70      	pop	{r4, r5, r6, pc}

000b5148 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5148:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b514a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b514c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5150:	db76      	blt.n	b5240 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5152:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5156:	42b1      	cmp	r1, r6
   b5158:	da72      	bge.n	b5240 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b515a:	2a00      	cmp	r2, #0
      __h += __y;
   b515c:	bfbe      	ittt	lt
   b515e:	189b      	addlt	r3, r3, r2
   b5160:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5162:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5164:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5168:	18d7      	adds	r7, r2, r3
   b516a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b516c:	bfc4      	itt	gt
   b516e:	1aa3      	subgt	r3, r4, r2
   b5170:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5172:	2b00      	cmp	r3, #0
   b5174:	dd64      	ble.n	b5240 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5176:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b517a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b517c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5180:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5184:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5186:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b518a:	d023      	beq.n	b51d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b518c:	f1c2 0208 	rsb	r2, r2, #8
   b5190:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5192:	492d      	ldr	r1, [pc, #180]	; (b5248 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5194:	4293      	cmp	r3, r2
   b5196:	bf3c      	itt	cc
   b5198:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b519c:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b51a0:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b51a2:	bf3c      	itt	cc
   b51a4:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b51a8:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b51ac:	2d01      	cmp	r5, #1
   b51ae:	d007      	beq.n	b51c0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b51b0:	2d02      	cmp	r5, #2
   b51b2:	d02e      	beq.n	b5212 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b51b4:	b94d      	cbnz	r5, b51ca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b51b6:	f817 c006 	ldrb.w	ip, [r7, r6]
   b51ba:	ea2c 0101 	bic.w	r1, ip, r1
   b51be:	e003      	b.n	b51c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b51c0:	f817 c006 	ldrb.w	ip, [r7, r6]
   b51c4:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b51c8:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b51ca:	4293      	cmp	r3, r2
   b51cc:	d338      	bcc.n	b5240 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b51ce:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b51d2:	440c      	add	r4, r1
        h -= mod;
   b51d4:	1a9a      	subs	r2, r3, r2
   b51d6:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b51d8:	2a07      	cmp	r2, #7
   b51da:	d90e      	bls.n	b51fa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b51dc:	2d02      	cmp	r5, #2
   b51de:	d11d      	bne.n	b521c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b51e0:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b51e2:	7821      	ldrb	r1, [r4, #0]
   b51e4:	43c9      	mvns	r1, r1
   b51e6:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b51e8:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b51ea:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b51ee:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b51f0:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b51f2:	440c      	add	r4, r1
            } while(h >= 8);
   b51f4:	d8f5      	bhi.n	b51e2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b51f6:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b51fa:	b30a      	cbz	r2, b5240 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b51fc:	4b13      	ldr	r3, [pc, #76]	; (b524c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b51fe:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5200:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b5202:	d01a      	beq.n	b523a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5204:	2d02      	cmp	r5, #2
   b5206:	d01c      	beq.n	b5242 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5208:	b9d5      	cbnz	r5, b5240 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b520a:	7822      	ldrb	r2, [r4, #0]
   b520c:	ea22 0303 	bic.w	r3, r2, r3
   b5210:	e015      	b.n	b523e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b5212:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5216:	ea81 010c 	eor.w	r1, r1, ip
   b521a:	e7d5      	b.n	b51c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b521c:	1e29      	subs	r1, r5, #0
   b521e:	bf18      	it	ne
   b5220:	2101      	movne	r1, #1
   b5222:	4249      	negs	r1, r1
   b5224:	b2c9      	uxtb	r1, r1
   b5226:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b5228:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b522a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b522c:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b5230:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5232:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5234:	4434      	add	r4, r6
            } while(h >= 8);
   b5236:	d8f7      	bhi.n	b5228 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5238:	e7dd      	b.n	b51f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b523a:	7822      	ldrb	r2, [r4, #0]
   b523c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b523e:	7023      	strb	r3, [r4, #0]
}
   b5240:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b5242:	7822      	ldrb	r2, [r4, #0]
   b5244:	4053      	eors	r3, r2
   b5246:	e7fa      	b.n	b523e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5248:	000b7efc 	.word	0x000b7efc
   b524c:	000b7f04 	.word	0x000b7f04

000b5250 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5250:	b470      	push	{r4, r5, r6}
   b5252:	4614      	mov	r4, r2
  switch(rotation) {
   b5254:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5256:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b525a:	2a02      	cmp	r2, #2
   b525c:	d00d      	beq.n	b527a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b525e:	2a03      	cmp	r2, #3
   b5260:	d018      	beq.n	b5294 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5262:	2a01      	cmp	r2, #1
   b5264:	d111      	bne.n	b528a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5266:	8902      	ldrh	r2, [r0, #8]
   b5268:	43e4      	mvns	r4, r4
   b526a:	4414      	add	r4, r2
   b526c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b526e:	9603      	str	r6, [sp, #12]
   b5270:	460a      	mov	r2, r1
   b5272:	4621      	mov	r1, r4
}
   b5274:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5276:	f7ff bf67 	b.w	b5148 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b527a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b527c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b527e:	43e4      	mvns	r4, r4
    x -= (w-1);
   b5280:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b5282:	4414      	add	r4, r2
    x -= (w-1);
   b5284:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5286:	b224      	sxth	r4, r4
    x -= (w-1);
   b5288:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b528a:	9603      	str	r6, [sp, #12]
   b528c:	4622      	mov	r2, r4
}
   b528e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b5290:	f7ff bf16 	b.w	b50c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5294:	8945      	ldrh	r5, [r0, #10]
   b5296:	4419      	add	r1, r3
   b5298:	1a69      	subs	r1, r5, r1
   b529a:	b209      	sxth	r1, r1
    break;
   b529c:	e7e7      	b.n	b526e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b529e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b529e:	b430      	push	{r4, r5}
   b52a0:	4614      	mov	r4, r2
  switch(rotation) {
   b52a2:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b52a4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b52a8:	2a02      	cmp	r2, #2
   b52aa:	d00d      	beq.n	b52c8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b52ac:	2a03      	cmp	r2, #3
   b52ae:	d018      	beq.n	b52e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b52b0:	2a01      	cmp	r2, #1
   b52b2:	d111      	bne.n	b52d8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b52b4:	18e2      	adds	r2, r4, r3
   b52b6:	8904      	ldrh	r4, [r0, #8]
   b52b8:	1aa4      	subs	r4, r4, r2
   b52ba:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b52bc:	9502      	str	r5, [sp, #8]
   b52be:	460a      	mov	r2, r1
   b52c0:	4621      	mov	r1, r4
}
   b52c2:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b52c4:	f7ff befc 	b.w	b50c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b52c8:	8902      	ldrh	r2, [r0, #8]
   b52ca:	43c9      	mvns	r1, r1
   b52cc:	4411      	add	r1, r2
    y -= (h-1);
   b52ce:	18e2      	adds	r2, r4, r3
   b52d0:	8944      	ldrh	r4, [r0, #10]
   b52d2:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b52d4:	b209      	sxth	r1, r1
    y -= (h-1);
   b52d6:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b52d8:	9502      	str	r5, [sp, #8]
   b52da:	4622      	mov	r2, r4
}
   b52dc:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b52de:	f7ff bf33 	b.w	b5148 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b52e2:	8942      	ldrh	r2, [r0, #10]
   b52e4:	43c9      	mvns	r1, r1
   b52e6:	4411      	add	r1, r2
   b52e8:	b209      	sxth	r1, r1
    break;
   b52ea:	e7e7      	b.n	b52bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b52ec <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b52ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b52f0:	4604      	mov	r4, r0
  TRANSACTION_START
   b52f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b52f4:	2800      	cmp	r0, #0
   b52f6:	d042      	beq.n	b537e <_ZN16Adafruit_SSD13067displayEv+0x92>
   b52f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b52fa:	f000 fe1f 	bl	b5f3c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b52fe:	4947      	ldr	r1, [pc, #284]	; (b541c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b5300:	2205      	movs	r2, #5
   b5302:	4620      	mov	r0, r4
   b5304:	f7ff fd27 	bl	b4d56 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b5308:	8921      	ldrh	r1, [r4, #8]
   b530a:	3901      	subs	r1, #1
   b530c:	4620      	mov	r0, r4
   b530e:	b2c9      	uxtb	r1, r1
   b5310:	f7ff fcb2 	bl	b4c78 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5314:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5318:	1dde      	adds	r6, r3, #7
   b531a:	bf48      	it	mi
   b531c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b5320:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5324:	8923      	ldrh	r3, [r4, #8]
   b5326:	10f6      	asrs	r6, r6, #3
   b5328:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b532c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b5330:	2800      	cmp	r0, #0
   b5332:	d03a      	beq.n	b53aa <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b5334:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5338:	f000 fe3a 	bl	b5fb0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b533c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b533e:	6803      	ldr	r3, [r0, #0]
   b5340:	2140      	movs	r1, #64	; 0x40
   b5342:	689b      	ldr	r3, [r3, #8]
   b5344:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5346:	2701      	movs	r7, #1
    while(count--) {
   b5348:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b534a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b534c:	d024      	beq.n	b5398 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b534e:	2f1f      	cmp	r7, #31
   b5350:	d90c      	bls.n	b536c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b5352:	f000 fe34 	bl	b5fbe <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5356:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b535a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b535c:	f000 fe28 	bl	b5fb0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b5360:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5362:	6803      	ldr	r3, [r0, #0]
   b5364:	2140      	movs	r1, #64	; 0x40
   b5366:	689b      	ldr	r3, [r3, #8]
   b5368:	4798      	blx	r3
        bytesOut = 1;
   b536a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b536c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b536e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5372:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5374:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b5376:	689b      	ldr	r3, [r3, #8]
   b5378:	4798      	blx	r3
      bytesOut++;
   b537a:	b2ff      	uxtb	r7, r7
    while(count--) {
   b537c:	e7e4      	b.n	b5348 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b537e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5380:	b118      	cbz	r0, b538a <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b5382:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5386:	f001 f83d 	bl	b6404 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b538a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b538e:	2100      	movs	r1, #0
   b5390:	b280      	uxth	r0, r0
   b5392:	f001 fdb6 	bl	b6f02 <digitalWrite>
   b5396:	e7b2      	b.n	b52fe <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b5398:	f000 fe11 	bl	b5fbe <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b539c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b539e:	b378      	cbz	r0, b5400 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b53a0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b53a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b53a6:	f000 bdc9 	b.w	b5f3c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b53aa:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b53ae:	2101      	movs	r1, #1
   b53b0:	b280      	uxth	r0, r0
   b53b2:	f001 fda6 	bl	b6f02 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b53b6:	42ae      	cmp	r6, r5
   b53b8:	d0f0      	beq.n	b539c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b53ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b53bc:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b53c0:	b118      	cbz	r0, b53ca <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b53c2:	4649      	mov	r1, r9
   b53c4:	f001 f88c 	bl	b64e0 <_ZN8SPIClass8transferEh>
   b53c8:	e7f5      	b.n	b53b6 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b53ca:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b53cc:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b53d0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b53d4:	ea09 0108 	and.w	r1, r9, r8
   b53d8:	b280      	uxth	r0, r0
   b53da:	f001 fd92 	bl	b6f02 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b53de:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b53e2:	2101      	movs	r1, #1
   b53e4:	b280      	uxth	r0, r0
   b53e6:	f001 fd8c 	bl	b6f02 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b53ea:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b53ee:	2100      	movs	r1, #0
   b53f0:	b280      	uxth	r0, r0
   b53f2:	f001 fd86 	bl	b6f02 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b53f6:	3f01      	subs	r7, #1
   b53f8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b53fc:	d1e8      	bne.n	b53d0 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b53fe:	e7da      	b.n	b53b6 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b5400:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5404:	2101      	movs	r1, #1
   b5406:	b280      	uxth	r0, r0
   b5408:	f001 fd7b 	bl	b6f02 <digitalWrite>
   b540c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b540e:	b118      	cbz	r0, b5418 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b5410:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b5414:	f000 bfdc 	b.w	b63d0 <_ZN8SPIClass14endTransactionEv>
}
   b5418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b541c:	000b7f28 	.word	0x000b7f28

000b5420 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b5420:	2100      	movs	r1, #0
   b5422:	220a      	movs	r2, #10
   b5424:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5428:	4770      	bx	lr

000b542a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b542a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b542c:	b510      	push	{r4, lr}
   b542e:	4604      	mov	r4, r0
    this->pin = pin;
   b5430:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b5432:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b5434:	b288      	uxth	r0, r1
   b5436:	f001 fd7d 	bl	b6f34 <digitalRead>
   b543a:	b108      	cbz	r0, b5440 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b543c:	2303      	movs	r3, #3
   b543e:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5440:	f000 fa74 	bl	b592c <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5444:	6020      	str	r0, [r4, #0]
#endif
}
   b5446:	bd10      	pop	{r4, pc}

000b5448 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b5448:	b538      	push	{r3, r4, r5, lr}
   b544a:	460c      	mov	r4, r1
   b544c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b544e:	4611      	mov	r1, r2
   b5450:	b2a0      	uxth	r0, r4
   b5452:	f001 fd45 	bl	b6ee0 <pinMode>
  
  this->attach(pin);
   b5456:	4621      	mov	r1, r4
   b5458:	4628      	mov	r0, r5
}
   b545a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b545e:	f7ff bfe4 	b.w	b542a <_ZN8Debounce6attachEi>

000b5462 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b5462:	b538      	push	{r3, r4, r5, lr}
   b5464:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5466:	79c0      	ldrb	r0, [r0, #7]
   b5468:	f001 fd64 	bl	b6f34 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b546c:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b546e:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b5470:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5474:	bf18      	it	ne
   b5476:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5478:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b547c:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b547e:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5480:	d00a      	beq.n	b5498 <_ZN8Debounce6updateEv+0x36>
   b5482:	f000 fa53 	bl	b592c <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b5486:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b5488:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b548a:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b548e:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b5490:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b5492:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b5496:	bd38      	pop	{r3, r4, r5, pc}
   b5498:	f000 fa48 	bl	b592c <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b549c:	6823      	ldr	r3, [r4, #0]
   b549e:	1ac0      	subs	r0, r0, r3
   b54a0:	88a3      	ldrh	r3, [r4, #4]
   b54a2:	4298      	cmp	r0, r3
   b54a4:	d3f4      	bcc.n	b5490 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b54a6:	79a3      	ldrb	r3, [r4, #6]
   b54a8:	f003 0301 	and.w	r3, r3, #1
   b54ac:	42ab      	cmp	r3, r5
   b54ae:	d0ef      	beq.n	b5490 <_ZN8Debounce6updateEv+0x2e>
   b54b0:	f000 fa3c 	bl	b592c <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b54b4:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b54b6:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b54b8:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b54bc:	f043 0308 	orr.w	r3, r3, #8
   b54c0:	e7e5      	b.n	b548e <_ZN8Debounce6updateEv+0x2c>

000b54c2 <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   b54c2:	7980      	ldrb	r0, [r0, #6]
   b54c4:	f000 0009 	and.w	r0, r0, #9
   b54c8:	f1a0 0308 	sub.w	r3, r0, #8
   b54cc:	4258      	negs	r0, r3
   b54ce:	4158      	adcs	r0, r3
   b54d0:	4770      	bx	lr

000b54d2 <_ZN8VCNL4040C1Ev>:
#define VCNL4040_WHITE_DATA 0x0A
#define VCNL4040_INT_FLAG 0x0B //Upper
#define VCNL4040_ID 0x0C

//Class constructor
VCNL4040::VCNL4040(void) {}
   b54d2:	4770      	bx	lr

000b54d4 <_ZN8VCNL404011isConnectedEv>:

  return (true);
}

//Test to see if the device is responding
boolean VCNL4040::isConnected(void) {
   b54d4:	b510      	push	{r4, lr}
   b54d6:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)VCNL4040_ADDR);
   b54d8:	2160      	movs	r1, #96	; 0x60
   b54da:	6800      	ldr	r0, [r0, #0]
   b54dc:	f000 fd64 	bl	b5fa8 <_ZN7TwoWire17beginTransmissionEh>
  return (_i2cPort->endTransmission() == 0);
   b54e0:	6820      	ldr	r0, [r4, #0]
   b54e2:	f000 fd6c 	bl	b5fbe <_ZN7TwoWire15endTransmissionEv>
}
   b54e6:	fab0 f080 	clz	r0, r0
   b54ea:	0940      	lsrs	r0, r0, #5
   b54ec:	bd10      	pop	{r4, pc}

000b54ee <_ZN8VCNL404011readCommandEh>:
  return (interruptFlags & VCNL4040_INT_FLAG_ALS_LOW);
}

//Reads two consecutive bytes from a given 'command code' location
uint16_t VCNL4040::readCommand(uint8_t commandCode)
{
   b54ee:	b538      	push	{r3, r4, r5, lr}
   b54f0:	4605      	mov	r5, r0
   b54f2:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b54f4:	6800      	ldr	r0, [r0, #0]
   b54f6:	2160      	movs	r1, #96	; 0x60
   b54f8:	f000 fd56 	bl	b5fa8 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b54fc:	6828      	ldr	r0, [r5, #0]
   b54fe:	6803      	ldr	r3, [r0, #0]
   b5500:	4621      	mov	r1, r4
   b5502:	689b      	ldr	r3, [r3, #8]
   b5504:	4798      	blx	r3
  if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   b5506:	6828      	ldr	r0, [r5, #0]
   b5508:	2100      	movs	r1, #0
   b550a:	f000 fd54 	bl	b5fb6 <_ZN7TwoWire15endTransmissionEh>
   b550e:	b108      	cbz	r0, b5514 <_ZN8VCNL404011readCommandEh+0x26>
  {
    return (0); //Sensor did not ACK
   b5510:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }

  return (0); //Sensor did not respond
}
   b5512:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)VCNL4040_ADDR, (uint8_t)2);
   b5514:	6828      	ldr	r0, [r5, #0]
   b5516:	2202      	movs	r2, #2
   b5518:	2160      	movs	r1, #96	; 0x60
   b551a:	f000 fd42 	bl	b5fa2 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b551e:	6828      	ldr	r0, [r5, #0]
   b5520:	6803      	ldr	r3, [r0, #0]
   b5522:	691b      	ldr	r3, [r3, #16]
   b5524:	4798      	blx	r3
   b5526:	2800      	cmp	r0, #0
   b5528:	d0f2      	beq.n	b5510 <_ZN8VCNL404011readCommandEh+0x22>
    uint8_t lsb = _i2cPort->read();
   b552a:	6828      	ldr	r0, [r5, #0]
   b552c:	6803      	ldr	r3, [r0, #0]
   b552e:	695b      	ldr	r3, [r3, #20]
   b5530:	4798      	blx	r3
   b5532:	4604      	mov	r4, r0
    uint8_t msb = _i2cPort->read();
   b5534:	6828      	ldr	r0, [r5, #0]
   b5536:	6803      	ldr	r3, [r0, #0]
   b5538:	695b      	ldr	r3, [r3, #20]
   b553a:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   b553c:	b2e4      	uxtb	r4, r4
   b553e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   b5542:	b280      	uxth	r0, r0
   b5544:	e7e5      	b.n	b5512 <_ZN8VCNL404011readCommandEh+0x24>

000b5546 <_ZN8VCNL404012getProximityEv>:
  return (readCommand(VCNL4040_PS_DATA));
   b5546:	2108      	movs	r1, #8
   b5548:	f7ff bfd1 	b.w	b54ee <_ZN8VCNL404011readCommandEh>

000b554c <_ZN8VCNL404010getAmbientEv>:
  return (readCommand(VCNL4040_ALS_DATA));
   b554c:	2109      	movs	r1, #9
   b554e:	f7ff bfce 	b.w	b54ee <_ZN8VCNL404011readCommandEh>

000b5552 <_ZN8VCNL40405getIDEv>:
  return (readCommand(VCNL4040_ID));
   b5552:	210c      	movs	r1, #12
   b5554:	f7ff bfcb 	b.w	b54ee <_ZN8VCNL404011readCommandEh>

000b5558 <_ZN8VCNL404012writeCommandEht>:

//Write two bytes to a given command code location (8 bits)
boolean VCNL4040::writeCommand(uint8_t commandCode, uint16_t value)
{
   b5558:	b570      	push	{r4, r5, r6, lr}
   b555a:	4604      	mov	r4, r0
   b555c:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b555e:	6800      	ldr	r0, [r0, #0]
   b5560:	2160      	movs	r1, #96	; 0x60
{
   b5562:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b5564:	f000 fd20 	bl	b5fa8 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b5568:	6820      	ldr	r0, [r4, #0]
   b556a:	6803      	ldr	r3, [r0, #0]
   b556c:	4631      	mov	r1, r6
   b556e:	689b      	ldr	r3, [r3, #8]
   b5570:	4798      	blx	r3
  _i2cPort->write(value & 0xFF); //LSB
   b5572:	6820      	ldr	r0, [r4, #0]
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5574:	6803      	ldr	r3, [r0, #0]
   b5576:	b2e9      	uxtb	r1, r5
   b5578:	689b      	ldr	r3, [r3, #8]
   b557a:	4798      	blx	r3
  _i2cPort->write(value >> 8); //MSB
   b557c:	6820      	ldr	r0, [r4, #0]
   b557e:	6803      	ldr	r3, [r0, #0]
   b5580:	0a29      	lsrs	r1, r5, #8
   b5582:	689b      	ldr	r3, [r3, #8]
   b5584:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   b5586:	6820      	ldr	r0, [r4, #0]
   b5588:	f000 fd19 	bl	b5fbe <_ZN7TwoWire15endTransmissionEv>
  {
    return (false); //Sensor did not ACK
  }

  return (true);
}
   b558c:	fab0 f080 	clz	r0, r0
   b5590:	0940      	lsrs	r0, r0, #5
   b5592:	bd70      	pop	{r4, r5, r6, pc}

000b5594 <_ZN8VCNL404017writeCommandLowerEhh>:

//Given a command code (address) write to the lower byte without affecting the upper byte
boolean VCNL4040::writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
   b5594:	b570      	push	{r4, r5, r6, lr}
   b5596:	4604      	mov	r4, r0
   b5598:	460d      	mov	r5, r1
   b559a:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b559c:	f7ff ffa7 	bl	b54ee <_ZN8VCNL404011readCommandEh>
  commandValue &= 0xFF00; //Remove lower 8 bits
   b55a0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  commandValue |= (uint16_t)newValue; //Mask in
  return (writeCommand(commandCode, commandValue));
   b55a4:	ea40 0206 	orr.w	r2, r0, r6
   b55a8:	4629      	mov	r1, r5
   b55aa:	4620      	mov	r0, r4
}
   b55ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b55b0:	f7ff bfd2 	b.w	b5558 <_ZN8VCNL404012writeCommandEht>

000b55b4 <_ZN8VCNL404017writeCommandUpperEhh>:

//Given a command code (address) write to the upper byte without affecting the lower byte
boolean VCNL4040::writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
   b55b4:	b570      	push	{r4, r5, r6, lr}
   b55b6:	4604      	mov	r4, r0
   b55b8:	460d      	mov	r5, r1
   b55ba:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b55bc:	f7ff ff97 	bl	b54ee <_ZN8VCNL404011readCommandEh>
  commandValue &= 0x00FF; //Remove upper 8 bits
   b55c0:	b2c0      	uxtb	r0, r0
  commandValue |= (uint16_t)newValue << 8; //Mask in
  return (writeCommand(commandCode, commandValue));
   b55c2:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   b55c6:	4629      	mov	r1, r5
   b55c8:	4620      	mov	r0, r4
}
   b55ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b55ce:	f7ff bfc3 	b.w	b5558 <_ZN8VCNL404012writeCommandEht>

000b55d2 <_ZN8VCNL404016readCommandUpperEh>:
  return (commandValue & 0xFF);
}

//Given a command code (address) read the upper byte
uint8_t VCNL4040::readCommandUpper(uint8_t commandCode)
{
   b55d2:	b508      	push	{r3, lr}
  uint16_t commandValue = readCommand(commandCode);
   b55d4:	f7ff ff8b 	bl	b54ee <_ZN8VCNL404011readCommandEh>
  return (commandValue >> 8);
}
   b55d8:	f3c0 2007 	ubfx	r0, r0, #8, #8
   b55dc:	bd08      	pop	{r3, pc}

000b55de <_ZN8VCNL40407bitMaskEhbhh>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void VCNL4040::bitMask(uint8_t commandAddress, boolean commandHeight, uint8_t mask, uint8_t thing)
{
   b55de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b55e2:	4604      	mov	r4, r0
   b55e4:	f89d 7018 	ldrb.w	r7, [sp, #24]
   b55e8:	460d      	mov	r5, r1
   b55ea:	4698      	mov	r8, r3
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
   b55ec:	4616      	mov	r6, r2
   b55ee:	b16a      	cbz	r2, b560c <_ZN8VCNL40407bitMaskEhbhh+0x2e>
  uint16_t commandValue = readCommand(commandCode);
   b55f0:	f7ff ff7d 	bl	b54ee <_ZN8VCNL404011readCommandEh>
  return (commandValue & 0xFF);
   b55f4:	b2c0      	uxtb	r0, r0
  else registerContents = readCommandUpper(commandAddress);

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
   b55f6:	ea00 0308 	and.w	r3, r0, r8

  // Mask in new thing
  registerContents |= thing;
   b55fa:	ea43 0207 	orr.w	r2, r3, r7

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b55fe:	4629      	mov	r1, r5
   b5600:	4620      	mov	r0, r4
   b5602:	b136      	cbz	r6, b5612 <_ZN8VCNL40407bitMaskEhbhh+0x34>
  else writeCommandUpper(commandAddress, registerContents);
}
   b5604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b5608:	f7ff bfc4 	b.w	b5594 <_ZN8VCNL404017writeCommandLowerEhh>
  else registerContents = readCommandUpper(commandAddress);
   b560c:	f7ff ffe1 	bl	b55d2 <_ZN8VCNL404016readCommandUpperEh>
   b5610:	e7f1      	b.n	b55f6 <_ZN8VCNL40407bitMaskEhbhh+0x18>
}
   b5612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else writeCommandUpper(commandAddress, registerContents);
   b5616:	f7ff bfcd 	b.w	b55b4 <_ZN8VCNL404017writeCommandUpperEhh>

000b561a <_ZN8VCNL404014setIRDutyCycleEt>:
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b561a:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
{
   b561e:	b507      	push	{r0, r1, r2, lr}
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b5620:	d20e      	bcs.n	b5640 <_ZN8VCNL404014setIRDutyCycleEt+0x26>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b5622:	299f      	cmp	r1, #159	; 0x9f
   b5624:	d80e      	bhi.n	b5644 <_ZN8VCNL404014setIRDutyCycleEt+0x2a>
  else dutyValue = VCNL4040_PS_DUTY_40;
   b5626:	294f      	cmp	r1, #79	; 0x4f
   b5628:	bf8c      	ite	hi
   b562a:	2340      	movhi	r3, #64	; 0x40
   b562c:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
   b562e:	9300      	str	r3, [sp, #0]
   b5630:	2201      	movs	r2, #1
   b5632:	233f      	movs	r3, #63	; 0x3f
   b5634:	2103      	movs	r1, #3
   b5636:	f7ff ffd2 	bl	b55de <_ZN8VCNL40407bitMaskEhbhh>
}
   b563a:	b003      	add	sp, #12
   b563c:	f85d fb04 	ldr.w	pc, [sp], #4
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b5640:	23c0      	movs	r3, #192	; 0xc0
   b5642:	e7f4      	b.n	b562e <_ZN8VCNL404014setIRDutyCycleEt+0x14>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b5644:	2380      	movs	r3, #128	; 0x80
   b5646:	e7f2      	b.n	b562e <_ZN8VCNL404014setIRDutyCycleEt+0x14>

000b5648 <_ZN8VCNL404014powerOnAmbientEv>:
{
   b5648:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_SD_MASK, VCNL4040_ALS_SD_POWER_ON);
   b564a:	2100      	movs	r1, #0
   b564c:	9100      	str	r1, [sp, #0]
   b564e:	23fe      	movs	r3, #254	; 0xfe
   b5650:	2201      	movs	r2, #1
   b5652:	f7ff ffc4 	bl	b55de <_ZN8VCNL40407bitMaskEhbhh>
}
   b5656:	b003      	add	sp, #12
   b5658:	f85d fb04 	ldr.w	pc, [sp], #4

000b565c <_ZN8VCNL404022setProxIntegrationTimeEh>:
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b565c:	2907      	cmp	r1, #7
{
   b565e:	b507      	push	{r0, r1, r2, lr}
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b5660:	d80f      	bhi.n	b5682 <_ZN8VCNL404022setProxIntegrationTimeEh+0x26>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b5662:	2903      	cmp	r1, #3
   b5664:	d80f      	bhi.n	b5686 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2a>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b5666:	d010      	beq.n	b568a <_ZN8VCNL404022setProxIntegrationTimeEh+0x2e>
  else timeValue = VCNL4040_PS_IT_1T;
   b5668:	2902      	cmp	r1, #2
   b566a:	bf0c      	ite	eq
   b566c:	2304      	moveq	r3, #4
   b566e:	2300      	movne	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
   b5670:	9300      	str	r3, [sp, #0]
   b5672:	2201      	movs	r2, #1
   b5674:	23f1      	movs	r3, #241	; 0xf1
   b5676:	2103      	movs	r1, #3
   b5678:	f7ff ffb1 	bl	b55de <_ZN8VCNL40407bitMaskEhbhh>
}
   b567c:	b003      	add	sp, #12
   b567e:	f85d fb04 	ldr.w	pc, [sp], #4
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b5682:	230e      	movs	r3, #14
   b5684:	e7f4      	b.n	b5670 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b5686:	230c      	movs	r3, #12
   b5688:	e7f2      	b.n	b5670 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b568a:	2308      	movs	r3, #8
   b568c:	e7f0      	b.n	b5670 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>

000b568e <_ZN8VCNL404016powerOnProximityEv>:
{
   b568e:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
   b5690:	2300      	movs	r3, #0
   b5692:	9300      	str	r3, [sp, #0]
   b5694:	2201      	movs	r2, #1
   b5696:	23fe      	movs	r3, #254	; 0xfe
   b5698:	2103      	movs	r1, #3
   b569a:	f7ff ffa0 	bl	b55de <_ZN8VCNL40407bitMaskEhbhh>
}
   b569e:	b003      	add	sp, #12
   b56a0:	f85d fb04 	ldr.w	pc, [sp], #4

000b56a4 <_ZN8VCNL404017setProxResolutionEh>:
{
   b56a4:	b507      	push	{r0, r1, r2, lr}
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
   b56a6:	290f      	cmp	r1, #15
   b56a8:	bf8c      	ite	hi
   b56aa:	2308      	movhi	r3, #8
   b56ac:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
   b56ae:	9300      	str	r3, [sp, #0]
   b56b0:	2200      	movs	r2, #0
   b56b2:	23f7      	movs	r3, #247	; 0xf7
   b56b4:	2103      	movs	r1, #3
   b56b6:	f7ff ff92 	bl	b55de <_ZN8VCNL40407bitMaskEhbhh>
}
   b56ba:	b003      	add	sp, #12
   b56bc:	f85d fb04 	ldr.w	pc, [sp], #4

000b56c0 <_ZN8VCNL404022enableSmartPersistanceEv>:
{
   b56c0:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
   b56c2:	2302      	movs	r3, #2
   b56c4:	9300      	str	r3, [sp, #0]
   b56c6:	2201      	movs	r2, #1
   b56c8:	23ef      	movs	r3, #239	; 0xef
   b56ca:	2104      	movs	r1, #4
   b56cc:	f7ff ff87 	bl	b55de <_ZN8VCNL40407bitMaskEhbhh>
}
   b56d0:	b003      	add	sp, #12
   b56d2:	f85d fb04 	ldr.w	pc, [sp], #4

000b56d6 <_ZN8VCNL404018enableWhiteChannelEv>:
{
   b56d6:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_WHITE_EN_MASK, VCNL4040_WHITE_ENABLE);
   b56d8:	2200      	movs	r2, #0
   b56da:	9200      	str	r2, [sp, #0]
   b56dc:	237f      	movs	r3, #127	; 0x7f
   b56de:	2104      	movs	r1, #4
   b56e0:	f7ff ff7d 	bl	b55de <_ZN8VCNL40407bitMaskEhbhh>
}
   b56e4:	b003      	add	sp, #12
   b56e6:	f85d fb04 	ldr.w	pc, [sp], #4

000b56ea <_ZN8VCNL404013setLEDCurrentEh>:
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b56ea:	29c7      	cmp	r1, #199	; 0xc7
{
   b56ec:	b507      	push	{r0, r1, r2, lr}
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b56ee:	d816      	bhi.n	b571e <_ZN8VCNL404013setLEDCurrentEh+0x34>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b56f0:	29b3      	cmp	r1, #179	; 0xb3
   b56f2:	d816      	bhi.n	b5722 <_ZN8VCNL404013setLEDCurrentEh+0x38>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b56f4:	299f      	cmp	r1, #159	; 0x9f
   b56f6:	d816      	bhi.n	b5726 <_ZN8VCNL404013setLEDCurrentEh+0x3c>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b56f8:	298b      	cmp	r1, #139	; 0x8b
   b56fa:	d816      	bhi.n	b572a <_ZN8VCNL404013setLEDCurrentEh+0x40>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b56fc:	2977      	cmp	r1, #119	; 0x77
   b56fe:	d816      	bhi.n	b572e <_ZN8VCNL404013setLEDCurrentEh+0x44>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b5700:	2963      	cmp	r1, #99	; 0x63
   b5702:	d816      	bhi.n	b5732 <_ZN8VCNL404013setLEDCurrentEh+0x48>
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b5704:	294a      	cmp	r1, #74	; 0x4a
   b5706:	bf94      	ite	ls
   b5708:	2100      	movls	r1, #0
   b570a:	2101      	movhi	r1, #1
	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
   b570c:	9100      	str	r1, [sp, #0]
   b570e:	23f8      	movs	r3, #248	; 0xf8
   b5710:	2200      	movs	r2, #0
   b5712:	2104      	movs	r1, #4
   b5714:	f7ff ff63 	bl	b55de <_ZN8VCNL40407bitMaskEhbhh>
}
   b5718:	b003      	add	sp, #12
   b571a:	f85d fb04 	ldr.w	pc, [sp], #4
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b571e:	2107      	movs	r1, #7
   b5720:	e7f4      	b.n	b570c <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b5722:	2106      	movs	r1, #6
   b5724:	e7f2      	b.n	b570c <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b5726:	2105      	movs	r1, #5
   b5728:	e7f0      	b.n	b570c <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b572a:	2104      	movs	r1, #4
   b572c:	e7ee      	b.n	b570c <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b572e:	2103      	movs	r1, #3
   b5730:	e7ec      	b.n	b570c <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b5732:	2102      	movs	r1, #2
   b5734:	e7ea      	b.n	b570c <_ZN8VCNL404013setLEDCurrentEh+0x22>

000b5736 <_ZN8VCNL40405beginER7TwoWire>:
boolean VCNL4040::begin(TwoWire &wirePort) {
   b5736:	b538      	push	{r3, r4, r5, lr}
   b5738:	4604      	mov	r4, r0
   b573a:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b573c:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   b573e:	f000 fc01 	bl	b5f44 <_ZN7TwoWire5beginEv>
  if (isConnected() == false) return (false); //I2C comm failure
   b5742:	4620      	mov	r0, r4
   b5744:	f7ff fec6 	bl	b54d4 <_ZN8VCNL404011isConnectedEv>
   b5748:	4605      	mov	r5, r0
   b574a:	b910      	cbnz	r0, b5752 <_ZN8VCNL40405beginER7TwoWire+0x1c>
   b574c:	2500      	movs	r5, #0
}
   b574e:	4628      	mov	r0, r5
   b5750:	bd38      	pop	{r3, r4, r5, pc}
  if (getID() != 0x0186) return (false); //Check default ID value
   b5752:	4620      	mov	r0, r4
   b5754:	f7ff fefd 	bl	b5552 <_ZN8VCNL40405getIDEv>
   b5758:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   b575c:	d1f6      	bne.n	b574c <_ZN8VCNL40405beginER7TwoWire+0x16>
  setLEDCurrent(200); //Max IR LED current
   b575e:	4620      	mov	r0, r4
   b5760:	21c8      	movs	r1, #200	; 0xc8
   b5762:	f7ff ffc2 	bl	b56ea <_ZN8VCNL404013setLEDCurrentEh>
  setIRDutyCycle(40); //Set to highest duty cycle
   b5766:	4620      	mov	r0, r4
   b5768:	2128      	movs	r1, #40	; 0x28
   b576a:	f7ff ff56 	bl	b561a <_ZN8VCNL404014setIRDutyCycleEt>
  setProxIntegrationTime(8); //Set to max integration
   b576e:	4620      	mov	r0, r4
   b5770:	2108      	movs	r1, #8
   b5772:	f7ff ff73 	bl	b565c <_ZN8VCNL404022setProxIntegrationTimeEh>
  setProxResolution(16); //Set to 16-bit output
   b5776:	2110      	movs	r1, #16
   b5778:	4620      	mov	r0, r4
   b577a:	f7ff ff93 	bl	b56a4 <_ZN8VCNL404017setProxResolutionEh>
  enableSmartPersistance(); //Turn on smart presistance
   b577e:	4620      	mov	r0, r4
   b5780:	f7ff ff9e 	bl	b56c0 <_ZN8VCNL404022enableSmartPersistanceEv>
  powerOnProximity(); //Turn on prox sensing
   b5784:	4620      	mov	r0, r4
   b5786:	f7ff ff82 	bl	b568e <_ZN8VCNL404016powerOnProximityEv>
  return (true);
   b578a:	e7e0      	b.n	b574e <_ZN8VCNL40405beginER7TwoWire+0x18>

000b578c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b578c:	b510      	push	{r4, lr}
   b578e:	4b06      	ldr	r3, [pc, #24]	; (b57a8 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b5790:	6003      	str	r3, [r0, #0]
   b5792:	4604      	mov	r4, r0
	if (mutex) {
   b5794:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b5796:	b108      	cbz	r0, b579c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b5798:	f000 f8a8 	bl	b58ec <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b579c:	4620      	mov	r0, r4
   b579e:	f7ff f9c5 	bl	b4b2c <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b57a2:	4620      	mov	r0, r4
   b57a4:	bd10      	pop	{r4, pc}
   b57a6:	bf00      	nop
   b57a8:	000b7f38 	.word	0x000b7f38

000b57ac <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b57ac:	b510      	push	{r4, lr}
   b57ae:	4604      	mov	r4, r0
}
   b57b0:	f7ff ffec 	bl	b578c <_ZN16OledWingAdafruitD1Ev>
   b57b4:	4620      	mov	r0, r4
   b57b6:	2170      	movs	r1, #112	; 0x70
   b57b8:	f7fe fc81 	bl	b40be <_ZdlPvj>
   b57bc:	4620      	mov	r0, r4
   b57be:	bd10      	pop	{r4, pc}

000b57c0 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b57c0:	b530      	push	{r4, r5, lr}
   b57c2:	b085      	sub	sp, #20
   b57c4:	4604      	mov	r4, r0
   b57c6:	460d      	mov	r5, r1
   b57c8:	f001 fbe2 	bl	b6f90 <_Z19__fetch_global_Wirev>
   b57cc:	4a10      	ldr	r2, [pc, #64]	; (b5810 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b57ce:	4911      	ldr	r1, [pc, #68]	; (b5814 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b57d0:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b57d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b57d8:	2180      	movs	r1, #128	; 0x80
   b57da:	4603      	mov	r3, r0
   b57dc:	9200      	str	r2, [sp, #0]
   b57de:	4620      	mov	r0, r4
   b57e0:	2220      	movs	r2, #32
   b57e2:	f7ff fa1b 	bl	b4c1c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b57e6:	4b0c      	ldr	r3, [pc, #48]	; (b5818 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b57e8:	6023      	str	r3, [r4, #0]
   b57ea:	2300      	movs	r3, #0
   b57ec:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b57f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b57f4:	f7ff fe14 	bl	b5420 <_ZN8DebounceC1Ev>
   b57f8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b57fc:	f7ff fe10 	bl	b5420 <_ZN8DebounceC1Ev>
   b5800:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5804:	f7ff fe0c 	bl	b5420 <_ZN8DebounceC1Ev>
}
   b5808:	4620      	mov	r0, r4
   b580a:	b005      	add	sp, #20
   b580c:	bd30      	pop	{r4, r5, pc}
   b580e:	bf00      	nop
   b5810:	00061a80 	.word	0x00061a80
   b5814:	000186a0 	.word	0x000186a0
   b5818:	000b7f38 	.word	0x000b7f38

000b581c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b581c:	b513      	push	{r0, r1, r4, lr}
   b581e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5820:	3050      	adds	r0, #80	; 0x50
   b5822:	f000 f85b 	bl	b58dc <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b5826:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5828:	07d9      	lsls	r1, r3, #31
   b582a:	d505      	bpl.n	b5838 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b582c:	2202      	movs	r2, #2
   b582e:	2104      	movs	r1, #4
   b5830:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5834:	f7ff fe08 	bl	b5448 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b5838:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b583a:	079a      	lsls	r2, r3, #30
   b583c:	d505      	bpl.n	b584a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b583e:	2200      	movs	r2, #0
   b5840:	2103      	movs	r1, #3
   b5842:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5846:	f7ff fdff 	bl	b5448 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b584a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b584c:	075b      	lsls	r3, r3, #29
   b584e:	d505      	bpl.n	b585c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b5850:	2202      	movs	r2, #2
   b5852:	4611      	mov	r1, r2
   b5854:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5858:	f7ff fdf6 	bl	b5448 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b585c:	2301      	movs	r3, #1
   b585e:	9300      	str	r3, [sp, #0]
   b5860:	223c      	movs	r2, #60	; 0x3c
   b5862:	2102      	movs	r1, #2
   b5864:	4620      	mov	r0, r4
   b5866:	f7ff fae1 	bl	b4e2c <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b586a:	b002      	add	sp, #8
   b586c:	bd10      	pop	{r4, pc}

000b586e <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b586e:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b5870:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b5872:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b5874:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b5876:	d502      	bpl.n	b587e <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b5878:	3058      	adds	r0, #88	; 0x58
   b587a:	f7ff fdf2 	bl	b5462 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b587e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5880:	079a      	lsls	r2, r3, #30
   b5882:	d503      	bpl.n	b588c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b5884:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5888:	f7ff fdeb 	bl	b5462 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b588c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b588e:	075b      	lsls	r3, r3, #29
   b5890:	d505      	bpl.n	b589e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b5892:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b5896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b589a:	f7ff bde2 	b.w	b5462 <_ZN8Debounce6updateEv>
}
   b589e:	bd10      	pop	{r4, pc}

000b58a0 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b58a0:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   b58a2:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b58a4:	f013 0001 	ands.w	r0, r3, #1
   b58a8:	d003      	beq.n	b58b2 <_ZN16OledWingAdafruit8pressedAEv+0x12>
   b58aa:	f102 0058 	add.w	r0, r2, #88	; 0x58
   b58ae:	f7ff be08 	b.w	b54c2 <_ZN8Debounce4fellEv>
}
   b58b2:	4770      	bx	lr

000b58b4 <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b58b4:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   b58b6:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b58b8:	f013 0002 	ands.w	r0, r3, #2
   b58bc:	d003      	beq.n	b58c6 <_ZN16OledWingAdafruit8pressedBEv+0x12>
   b58be:	f102 0060 	add.w	r0, r2, #96	; 0x60
   b58c2:	f7ff bdfe 	b.w	b54c2 <_ZN8Debounce4fellEv>
}
   b58c6:	4770      	bx	lr

000b58c8 <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b58c8:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   b58ca:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b58cc:	f013 0004 	ands.w	r0, r3, #4
   b58d0:	d003      	beq.n	b58da <_ZN16OledWingAdafruit8pressedCEv+0x12>
   b58d2:	f102 0068 	add.w	r0, r2, #104	; 0x68
   b58d6:	f7ff bdf4 	b.w	b54c2 <_ZN8Debounce4fellEv>
}
   b58da:	4770      	bx	lr

000b58dc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b58dc:	b508      	push	{r3, lr}
   b58de:	4b02      	ldr	r3, [pc, #8]	; (b58e8 <os_mutex_create+0xc>)
   b58e0:	681b      	ldr	r3, [r3, #0]
   b58e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b58e4:	9301      	str	r3, [sp, #4]
   b58e6:	bd08      	pop	{r3, pc}
   b58e8:	00030248 	.word	0x00030248

000b58ec <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b58ec:	b508      	push	{r3, lr}
   b58ee:	4b02      	ldr	r3, [pc, #8]	; (b58f8 <os_mutex_destroy+0xc>)
   b58f0:	681b      	ldr	r3, [r3, #0]
   b58f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b58f4:	9301      	str	r3, [sp, #4]
   b58f6:	bd08      	pop	{r3, pc}
   b58f8:	00030248 	.word	0x00030248

000b58fc <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b58fc:	b508      	push	{r3, lr}
   b58fe:	4b02      	ldr	r3, [pc, #8]	; (b5908 <os_mutex_recursive_create+0xc>)
   b5900:	681b      	ldr	r3, [r3, #0]
   b5902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5904:	9301      	str	r3, [sp, #4]
   b5906:	bd08      	pop	{r3, pc}
   b5908:	00030248 	.word	0x00030248

000b590c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b590c:	b508      	push	{r3, lr}
   b590e:	4b02      	ldr	r3, [pc, #8]	; (b5918 <HAL_RNG_GetRandomNumber+0xc>)
   b5910:	681b      	ldr	r3, [r3, #0]
   b5912:	685b      	ldr	r3, [r3, #4]
   b5914:	9301      	str	r3, [sp, #4]
   b5916:	bd08      	pop	{r3, pc}
   b5918:	00030218 	.word	0x00030218

000b591c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b591c:	b508      	push	{r3, lr}
   b591e:	4b02      	ldr	r3, [pc, #8]	; (b5928 <HAL_Delay_Microseconds+0xc>)
   b5920:	681b      	ldr	r3, [r3, #0]
   b5922:	68db      	ldr	r3, [r3, #12]
   b5924:	9301      	str	r3, [sp, #4]
   b5926:	bd08      	pop	{r3, pc}
   b5928:	00030218 	.word	0x00030218

000b592c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b592c:	b508      	push	{r3, lr}
   b592e:	4b02      	ldr	r3, [pc, #8]	; (b5938 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5930:	681b      	ldr	r3, [r3, #0]
   b5932:	695b      	ldr	r3, [r3, #20]
   b5934:	9301      	str	r3, [sp, #4]
   b5936:	bd08      	pop	{r3, pc}
   b5938:	00030218 	.word	0x00030218

000b593c <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b593c:	b508      	push	{r3, lr}
   b593e:	4b02      	ldr	r3, [pc, #8]	; (b5948 <hal_gpio_mode+0xc>)
   b5940:	681b      	ldr	r3, [r3, #0]
   b5942:	689b      	ldr	r3, [r3, #8]
   b5944:	9301      	str	r3, [sp, #4]
   b5946:	bd08      	pop	{r3, pc}
   b5948:	0003022c 	.word	0x0003022c

000b594c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b594c:	b508      	push	{r3, lr}
   b594e:	4b02      	ldr	r3, [pc, #8]	; (b5958 <hal_gpio_get_mode+0xc>)
   b5950:	681b      	ldr	r3, [r3, #0]
   b5952:	68db      	ldr	r3, [r3, #12]
   b5954:	9301      	str	r3, [sp, #4]
   b5956:	bd08      	pop	{r3, pc}
   b5958:	0003022c 	.word	0x0003022c

000b595c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b595c:	b508      	push	{r3, lr}
   b595e:	4b02      	ldr	r3, [pc, #8]	; (b5968 <hal_gpio_write+0xc>)
   b5960:	681b      	ldr	r3, [r3, #0]
   b5962:	691b      	ldr	r3, [r3, #16]
   b5964:	9301      	str	r3, [sp, #4]
   b5966:	bd08      	pop	{r3, pc}
   b5968:	0003022c 	.word	0x0003022c

000b596c <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b596c:	b508      	push	{r3, lr}
   b596e:	4b02      	ldr	r3, [pc, #8]	; (b5978 <hal_gpio_read+0xc>)
   b5970:	681b      	ldr	r3, [r3, #0]
   b5972:	695b      	ldr	r3, [r3, #20]
   b5974:	9301      	str	r3, [sp, #4]
   b5976:	bd08      	pop	{r3, pc}
   b5978:	0003022c 	.word	0x0003022c

000b597c <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b597c:	b508      	push	{r3, lr}
   b597e:	4b02      	ldr	r3, [pc, #8]	; (b5988 <hal_i2c_set_speed+0xc>)
   b5980:	681b      	ldr	r3, [r3, #0]
   b5982:	681b      	ldr	r3, [r3, #0]
   b5984:	9301      	str	r3, [sp, #4]
   b5986:	bd08      	pop	{r3, pc}
   b5988:	00030228 	.word	0x00030228

000b598c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b598c:	b508      	push	{r3, lr}
   b598e:	4b02      	ldr	r3, [pc, #8]	; (b5998 <hal_i2c_begin+0xc>)
   b5990:	681b      	ldr	r3, [r3, #0]
   b5992:	68db      	ldr	r3, [r3, #12]
   b5994:	9301      	str	r3, [sp, #4]
   b5996:	bd08      	pop	{r3, pc}
   b5998:	00030228 	.word	0x00030228

000b599c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b599c:	b508      	push	{r3, lr}
   b599e:	4b02      	ldr	r3, [pc, #8]	; (b59a8 <hal_i2c_begin_transmission+0xc>)
   b59a0:	681b      	ldr	r3, [r3, #0]
   b59a2:	699b      	ldr	r3, [r3, #24]
   b59a4:	9301      	str	r3, [sp, #4]
   b59a6:	bd08      	pop	{r3, pc}
   b59a8:	00030228 	.word	0x00030228

000b59ac <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b59ac:	b508      	push	{r3, lr}
   b59ae:	4b02      	ldr	r3, [pc, #8]	; (b59b8 <hal_i2c_end_transmission+0xc>)
   b59b0:	681b      	ldr	r3, [r3, #0]
   b59b2:	69db      	ldr	r3, [r3, #28]
   b59b4:	9301      	str	r3, [sp, #4]
   b59b6:	bd08      	pop	{r3, pc}
   b59b8:	00030228 	.word	0x00030228

000b59bc <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b59bc:	b508      	push	{r3, lr}
   b59be:	4b02      	ldr	r3, [pc, #8]	; (b59c8 <hal_i2c_write+0xc>)
   b59c0:	681b      	ldr	r3, [r3, #0]
   b59c2:	6a1b      	ldr	r3, [r3, #32]
   b59c4:	9301      	str	r3, [sp, #4]
   b59c6:	bd08      	pop	{r3, pc}
   b59c8:	00030228 	.word	0x00030228

000b59cc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b59cc:	b508      	push	{r3, lr}
   b59ce:	4b02      	ldr	r3, [pc, #8]	; (b59d8 <hal_i2c_available+0xc>)
   b59d0:	681b      	ldr	r3, [r3, #0]
   b59d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b59d4:	9301      	str	r3, [sp, #4]
   b59d6:	bd08      	pop	{r3, pc}
   b59d8:	00030228 	.word	0x00030228

000b59dc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b59dc:	b508      	push	{r3, lr}
   b59de:	4b02      	ldr	r3, [pc, #8]	; (b59e8 <hal_i2c_read+0xc>)
   b59e0:	681b      	ldr	r3, [r3, #0]
   b59e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b59e4:	9301      	str	r3, [sp, #4]
   b59e6:	bd08      	pop	{r3, pc}
   b59e8:	00030228 	.word	0x00030228

000b59ec <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b59ec:	b508      	push	{r3, lr}
   b59ee:	4b02      	ldr	r3, [pc, #8]	; (b59f8 <hal_i2c_peek+0xc>)
   b59f0:	681b      	ldr	r3, [r3, #0]
   b59f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b59f4:	9301      	str	r3, [sp, #4]
   b59f6:	bd08      	pop	{r3, pc}
   b59f8:	00030228 	.word	0x00030228

000b59fc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b59fc:	b508      	push	{r3, lr}
   b59fe:	4b02      	ldr	r3, [pc, #8]	; (b5a08 <hal_i2c_flush+0xc>)
   b5a00:	681b      	ldr	r3, [r3, #0]
   b5a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5a04:	9301      	str	r3, [sp, #4]
   b5a06:	bd08      	pop	{r3, pc}
   b5a08:	00030228 	.word	0x00030228

000b5a0c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5a0c:	b508      	push	{r3, lr}
   b5a0e:	4b02      	ldr	r3, [pc, #8]	; (b5a18 <hal_i2c_is_enabled+0xc>)
   b5a10:	681b      	ldr	r3, [r3, #0]
   b5a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5a14:	9301      	str	r3, [sp, #4]
   b5a16:	bd08      	pop	{r3, pc}
   b5a18:	00030228 	.word	0x00030228

000b5a1c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5a1c:	b508      	push	{r3, lr}
   b5a1e:	4b02      	ldr	r3, [pc, #8]	; (b5a28 <hal_i2c_init+0xc>)
   b5a20:	681b      	ldr	r3, [r3, #0]
   b5a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5a24:	9301      	str	r3, [sp, #4]
   b5a26:	bd08      	pop	{r3, pc}
   b5a28:	00030228 	.word	0x00030228

000b5a2c <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5a2c:	b508      	push	{r3, lr}
   b5a2e:	4b02      	ldr	r3, [pc, #8]	; (b5a38 <hal_i2c_request_ex+0xc>)
   b5a30:	681b      	ldr	r3, [r3, #0]
   b5a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5a34:	9301      	str	r3, [sp, #4]
   b5a36:	bd08      	pop	{r3, pc}
   b5a38:	00030228 	.word	0x00030228

000b5a3c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5a3c:	b508      	push	{r3, lr}
   b5a3e:	4b02      	ldr	r3, [pc, #8]	; (b5a48 <if_index_to_name+0xc>)
   b5a40:	681b      	ldr	r3, [r3, #0]
   b5a42:	695b      	ldr	r3, [r3, #20]
   b5a44:	9301      	str	r3, [sp, #4]
   b5a46:	bd08      	pop	{r3, pc}
   b5a48:	0003026c 	.word	0x0003026c

000b5a4c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5a4c:	b508      	push	{r3, lr}
   b5a4e:	4b02      	ldr	r3, [pc, #8]	; (b5a58 <inet_inet_ntop+0xc>)
   b5a50:	681b      	ldr	r3, [r3, #0]
   b5a52:	695b      	ldr	r3, [r3, #20]
   b5a54:	9301      	str	r3, [sp, #4]
   b5a56:	bd08      	pop	{r3, pc}
   b5a58:	00030264 	.word	0x00030264

000b5a5c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5a5c:	b508      	push	{r3, lr}
   b5a5e:	4b02      	ldr	r3, [pc, #8]	; (b5a68 <inet_htonl+0xc>)
   b5a60:	681b      	ldr	r3, [r3, #0]
   b5a62:	6a1b      	ldr	r3, [r3, #32]
   b5a64:	9301      	str	r3, [sp, #4]
   b5a66:	bd08      	pop	{r3, pc}
   b5a68:	00030264 	.word	0x00030264

000b5a6c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5a6c:	b508      	push	{r3, lr}
   b5a6e:	4b02      	ldr	r3, [pc, #8]	; (b5a78 <inet_htons+0xc>)
   b5a70:	681b      	ldr	r3, [r3, #0]
   b5a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5a74:	9301      	str	r3, [sp, #4]
   b5a76:	bd08      	pop	{r3, pc}
   b5a78:	00030264 	.word	0x00030264

000b5a7c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5a7c:	b508      	push	{r3, lr}
   b5a7e:	4b02      	ldr	r3, [pc, #8]	; (b5a88 <netdb_freeaddrinfo+0xc>)
   b5a80:	681b      	ldr	r3, [r3, #0]
   b5a82:	689b      	ldr	r3, [r3, #8]
   b5a84:	9301      	str	r3, [sp, #4]
   b5a86:	bd08      	pop	{r3, pc}
   b5a88:	00030268 	.word	0x00030268

000b5a8c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5a8c:	b508      	push	{r3, lr}
   b5a8e:	4b02      	ldr	r3, [pc, #8]	; (b5a98 <netdb_getaddrinfo+0xc>)
   b5a90:	681b      	ldr	r3, [r3, #0]
   b5a92:	68db      	ldr	r3, [r3, #12]
   b5a94:	9301      	str	r3, [sp, #4]
   b5a96:	bd08      	pop	{r3, pc}
   b5a98:	00030268 	.word	0x00030268

000b5a9c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5a9c:	b508      	push	{r3, lr}
   b5a9e:	4b02      	ldr	r3, [pc, #8]	; (b5aa8 <sock_setsockopt+0xc>)
   b5aa0:	681b      	ldr	r3, [r3, #0]
   b5aa2:	699b      	ldr	r3, [r3, #24]
   b5aa4:	9301      	str	r3, [sp, #4]
   b5aa6:	bd08      	pop	{r3, pc}
   b5aa8:	00030238 	.word	0x00030238

000b5aac <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5aac:	b508      	push	{r3, lr}
   b5aae:	4b02      	ldr	r3, [pc, #8]	; (b5ab8 <sock_close+0xc>)
   b5ab0:	681b      	ldr	r3, [r3, #0]
   b5ab2:	69db      	ldr	r3, [r3, #28]
   b5ab4:	9301      	str	r3, [sp, #4]
   b5ab6:	bd08      	pop	{r3, pc}
   b5ab8:	00030238 	.word	0x00030238

000b5abc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5abc:	b508      	push	{r3, lr}
   b5abe:	4b02      	ldr	r3, [pc, #8]	; (b5ac8 <sock_connect+0xc>)
   b5ac0:	681b      	ldr	r3, [r3, #0]
   b5ac2:	6a1b      	ldr	r3, [r3, #32]
   b5ac4:	9301      	str	r3, [sp, #4]
   b5ac6:	bd08      	pop	{r3, pc}
   b5ac8:	00030238 	.word	0x00030238

000b5acc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5acc:	b508      	push	{r3, lr}
   b5ace:	4b02      	ldr	r3, [pc, #8]	; (b5ad8 <sock_recv+0xc>)
   b5ad0:	681b      	ldr	r3, [r3, #0]
   b5ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ad4:	9301      	str	r3, [sp, #4]
   b5ad6:	bd08      	pop	{r3, pc}
   b5ad8:	00030238 	.word	0x00030238

000b5adc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5adc:	b508      	push	{r3, lr}
   b5ade:	4b02      	ldr	r3, [pc, #8]	; (b5ae8 <sock_send+0xc>)
   b5ae0:	681b      	ldr	r3, [r3, #0]
   b5ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ae4:	9301      	str	r3, [sp, #4]
   b5ae6:	bd08      	pop	{r3, pc}
   b5ae8:	00030238 	.word	0x00030238

000b5aec <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5aec:	b508      	push	{r3, lr}
   b5aee:	4b02      	ldr	r3, [pc, #8]	; (b5af8 <sock_socket+0xc>)
   b5af0:	681b      	ldr	r3, [r3, #0]
   b5af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5af4:	9301      	str	r3, [sp, #4]
   b5af6:	bd08      	pop	{r3, pc}
   b5af8:	00030238 	.word	0x00030238

000b5afc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5afc:	b508      	push	{r3, lr}
   b5afe:	4b02      	ldr	r3, [pc, #8]	; (b5b08 <hal_spi_begin+0xc>)
   b5b00:	681b      	ldr	r3, [r3, #0]
   b5b02:	681b      	ldr	r3, [r3, #0]
   b5b04:	9301      	str	r3, [sp, #4]
   b5b06:	bd08      	pop	{r3, pc}
   b5b08:	00030230 	.word	0x00030230

000b5b0c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5b0c:	b508      	push	{r3, lr}
   b5b0e:	4b02      	ldr	r3, [pc, #8]	; (b5b18 <hal_spi_transfer+0xc>)
   b5b10:	681b      	ldr	r3, [r3, #0]
   b5b12:	695b      	ldr	r3, [r3, #20]
   b5b14:	9301      	str	r3, [sp, #4]
   b5b16:	bd08      	pop	{r3, pc}
   b5b18:	00030230 	.word	0x00030230

000b5b1c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5b1c:	b508      	push	{r3, lr}
   b5b1e:	4b02      	ldr	r3, [pc, #8]	; (b5b28 <hal_spi_init+0xc>)
   b5b20:	681b      	ldr	r3, [r3, #0]
   b5b22:	69db      	ldr	r3, [r3, #28]
   b5b24:	9301      	str	r3, [sp, #4]
   b5b26:	bd08      	pop	{r3, pc}
   b5b28:	00030230 	.word	0x00030230

000b5b2c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5b2c:	b508      	push	{r3, lr}
   b5b2e:	4b02      	ldr	r3, [pc, #8]	; (b5b38 <hal_spi_is_enabled+0xc>)
   b5b30:	681b      	ldr	r3, [r3, #0]
   b5b32:	6a1b      	ldr	r3, [r3, #32]
   b5b34:	9301      	str	r3, [sp, #4]
   b5b36:	bd08      	pop	{r3, pc}
   b5b38:	00030230 	.word	0x00030230

000b5b3c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5b3c:	b508      	push	{r3, lr}
   b5b3e:	4b02      	ldr	r3, [pc, #8]	; (b5b48 <hal_spi_info+0xc>)
   b5b40:	681b      	ldr	r3, [r3, #0]
   b5b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5b44:	9301      	str	r3, [sp, #4]
   b5b46:	bd08      	pop	{r3, pc}
   b5b48:	00030230 	.word	0x00030230

000b5b4c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5b4c:	b508      	push	{r3, lr}
   b5b4e:	4b02      	ldr	r3, [pc, #8]	; (b5b58 <hal_spi_set_settings+0xc>)
   b5b50:	681b      	ldr	r3, [r3, #0]
   b5b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5b54:	9301      	str	r3, [sp, #4]
   b5b56:	bd08      	pop	{r3, pc}
   b5b58:	00030230 	.word	0x00030230

000b5b5c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5b5c:	b508      	push	{r3, lr}
   b5b5e:	4b02      	ldr	r3, [pc, #8]	; (b5b68 <hal_spi_acquire+0xc>)
   b5b60:	681b      	ldr	r3, [r3, #0]
   b5b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5b64:	9301      	str	r3, [sp, #4]
   b5b66:	bd08      	pop	{r3, pc}
   b5b68:	00030230 	.word	0x00030230

000b5b6c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5b6c:	b508      	push	{r3, lr}
   b5b6e:	4b02      	ldr	r3, [pc, #8]	; (b5b78 <hal_spi_release+0xc>)
   b5b70:	681b      	ldr	r3, [r3, #0]
   b5b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b74:	9301      	str	r3, [sp, #4]
   b5b76:	bd08      	pop	{r3, pc}
   b5b78:	00030230 	.word	0x00030230

000b5b7c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5b7c:	b508      	push	{r3, lr}
   b5b7e:	4b02      	ldr	r3, [pc, #8]	; (b5b88 <hal_usart_write+0xc>)
   b5b80:	681b      	ldr	r3, [r3, #0]
   b5b82:	68db      	ldr	r3, [r3, #12]
   b5b84:	9301      	str	r3, [sp, #4]
   b5b86:	bd08      	pop	{r3, pc}
   b5b88:	0003023c 	.word	0x0003023c

000b5b8c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5b8c:	b508      	push	{r3, lr}
   b5b8e:	4b02      	ldr	r3, [pc, #8]	; (b5b98 <hal_usart_available+0xc>)
   b5b90:	681b      	ldr	r3, [r3, #0]
   b5b92:	691b      	ldr	r3, [r3, #16]
   b5b94:	9301      	str	r3, [sp, #4]
   b5b96:	bd08      	pop	{r3, pc}
   b5b98:	0003023c 	.word	0x0003023c

000b5b9c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5b9c:	b508      	push	{r3, lr}
   b5b9e:	4b02      	ldr	r3, [pc, #8]	; (b5ba8 <hal_usart_read+0xc>)
   b5ba0:	681b      	ldr	r3, [r3, #0]
   b5ba2:	695b      	ldr	r3, [r3, #20]
   b5ba4:	9301      	str	r3, [sp, #4]
   b5ba6:	bd08      	pop	{r3, pc}
   b5ba8:	0003023c 	.word	0x0003023c

000b5bac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5bac:	b508      	push	{r3, lr}
   b5bae:	4b02      	ldr	r3, [pc, #8]	; (b5bb8 <hal_usart_peek+0xc>)
   b5bb0:	681b      	ldr	r3, [r3, #0]
   b5bb2:	699b      	ldr	r3, [r3, #24]
   b5bb4:	9301      	str	r3, [sp, #4]
   b5bb6:	bd08      	pop	{r3, pc}
   b5bb8:	0003023c 	.word	0x0003023c

000b5bbc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5bbc:	b508      	push	{r3, lr}
   b5bbe:	4b02      	ldr	r3, [pc, #8]	; (b5bc8 <hal_usart_flush+0xc>)
   b5bc0:	681b      	ldr	r3, [r3, #0]
   b5bc2:	69db      	ldr	r3, [r3, #28]
   b5bc4:	9301      	str	r3, [sp, #4]
   b5bc6:	bd08      	pop	{r3, pc}
   b5bc8:	0003023c 	.word	0x0003023c

000b5bcc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5bcc:	b508      	push	{r3, lr}
   b5bce:	4b02      	ldr	r3, [pc, #8]	; (b5bd8 <hal_usart_is_enabled+0xc>)
   b5bd0:	681b      	ldr	r3, [r3, #0]
   b5bd2:	6a1b      	ldr	r3, [r3, #32]
   b5bd4:	9301      	str	r3, [sp, #4]
   b5bd6:	bd08      	pop	{r3, pc}
   b5bd8:	0003023c 	.word	0x0003023c

000b5bdc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5bdc:	b508      	push	{r3, lr}
   b5bde:	4b02      	ldr	r3, [pc, #8]	; (b5be8 <hal_usart_available_data_for_write+0xc>)
   b5be0:	681b      	ldr	r3, [r3, #0]
   b5be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5be4:	9301      	str	r3, [sp, #4]
   b5be6:	bd08      	pop	{r3, pc}
   b5be8:	0003023c 	.word	0x0003023c

000b5bec <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5bec:	b508      	push	{r3, lr}
   b5bee:	4b02      	ldr	r3, [pc, #8]	; (b5bf8 <hal_usart_init_ex+0xc>)
   b5bf0:	681b      	ldr	r3, [r3, #0]
   b5bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5bf4:	9301      	str	r3, [sp, #4]
   b5bf6:	bd08      	pop	{r3, pc}
   b5bf8:	0003023c 	.word	0x0003023c

000b5bfc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5bfc:	b508      	push	{r3, lr}
   b5bfe:	4b02      	ldr	r3, [pc, #8]	; (b5c08 <HAL_USB_USART_Init+0xc>)
   b5c00:	681b      	ldr	r3, [r3, #0]
   b5c02:	681b      	ldr	r3, [r3, #0]
   b5c04:	9301      	str	r3, [sp, #4]
   b5c06:	bd08      	pop	{r3, pc}
   b5c08:	0003024c 	.word	0x0003024c

000b5c0c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5c0c:	b508      	push	{r3, lr}
   b5c0e:	4b02      	ldr	r3, [pc, #8]	; (b5c18 <HAL_USB_USART_Begin+0xc>)
   b5c10:	681b      	ldr	r3, [r3, #0]
   b5c12:	685b      	ldr	r3, [r3, #4]
   b5c14:	9301      	str	r3, [sp, #4]
   b5c16:	bd08      	pop	{r3, pc}
   b5c18:	0003024c 	.word	0x0003024c

000b5c1c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5c1c:	b508      	push	{r3, lr}
   b5c1e:	4b02      	ldr	r3, [pc, #8]	; (b5c28 <HAL_USB_USART_Available_Data+0xc>)
   b5c20:	681b      	ldr	r3, [r3, #0]
   b5c22:	691b      	ldr	r3, [r3, #16]
   b5c24:	9301      	str	r3, [sp, #4]
   b5c26:	bd08      	pop	{r3, pc}
   b5c28:	0003024c 	.word	0x0003024c

000b5c2c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5c2c:	b508      	push	{r3, lr}
   b5c2e:	4b02      	ldr	r3, [pc, #8]	; (b5c38 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5c30:	681b      	ldr	r3, [r3, #0]
   b5c32:	695b      	ldr	r3, [r3, #20]
   b5c34:	9301      	str	r3, [sp, #4]
   b5c36:	bd08      	pop	{r3, pc}
   b5c38:	0003024c 	.word	0x0003024c

000b5c3c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5c3c:	b508      	push	{r3, lr}
   b5c3e:	4b02      	ldr	r3, [pc, #8]	; (b5c48 <HAL_USB_USART_Receive_Data+0xc>)
   b5c40:	681b      	ldr	r3, [r3, #0]
   b5c42:	699b      	ldr	r3, [r3, #24]
   b5c44:	9301      	str	r3, [sp, #4]
   b5c46:	bd08      	pop	{r3, pc}
   b5c48:	0003024c 	.word	0x0003024c

000b5c4c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5c4c:	b508      	push	{r3, lr}
   b5c4e:	4b02      	ldr	r3, [pc, #8]	; (b5c58 <HAL_USB_USART_Send_Data+0xc>)
   b5c50:	681b      	ldr	r3, [r3, #0]
   b5c52:	69db      	ldr	r3, [r3, #28]
   b5c54:	9301      	str	r3, [sp, #4]
   b5c56:	bd08      	pop	{r3, pc}
   b5c58:	0003024c 	.word	0x0003024c

000b5c5c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5c5c:	b508      	push	{r3, lr}
   b5c5e:	4b02      	ldr	r3, [pc, #8]	; (b5c68 <HAL_USB_USART_Flush_Data+0xc>)
   b5c60:	681b      	ldr	r3, [r3, #0]
   b5c62:	6a1b      	ldr	r3, [r3, #32]
   b5c64:	9301      	str	r3, [sp, #4]
   b5c66:	bd08      	pop	{r3, pc}
   b5c68:	0003024c 	.word	0x0003024c

000b5c6c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5c6c:	b508      	push	{r3, lr}
   b5c6e:	4b02      	ldr	r3, [pc, #8]	; (b5c78 <panic_+0xc>)
   b5c70:	681b      	ldr	r3, [r3, #0]
   b5c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5c74:	9301      	str	r3, [sp, #4]
   b5c76:	bd08      	pop	{r3, pc}
   b5c78:	00030260 	.word	0x00030260

000b5c7c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5c7c:	b508      	push	{r3, lr}
   b5c7e:	4b02      	ldr	r3, [pc, #8]	; (b5c88 <log_message+0xc>)
   b5c80:	681b      	ldr	r3, [r3, #0]
   b5c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5c84:	9301      	str	r3, [sp, #4]
   b5c86:	bd08      	pop	{r3, pc}
   b5c88:	00030260 	.word	0x00030260

000b5c8c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5c8c:	b508      	push	{r3, lr}
   b5c8e:	4b02      	ldr	r3, [pc, #8]	; (b5c98 <set_system_mode+0xc>)
   b5c90:	681b      	ldr	r3, [r3, #0]
   b5c92:	685b      	ldr	r3, [r3, #4]
   b5c94:	9301      	str	r3, [sp, #4]
   b5c96:	bd08      	pop	{r3, pc}
   b5c98:	00030220 	.word	0x00030220

000b5c9c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5c9c:	b508      	push	{r3, lr}
   b5c9e:	4b02      	ldr	r3, [pc, #8]	; (b5ca8 <system_delay_ms+0xc>)
   b5ca0:	681b      	ldr	r3, [r3, #0]
   b5ca2:	695b      	ldr	r3, [r3, #20]
   b5ca4:	9301      	str	r3, [sp, #4]
   b5ca6:	bd08      	pop	{r3, pc}
   b5ca8:	00030220 	.word	0x00030220

000b5cac <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5cac:	b508      	push	{r3, lr}
   b5cae:	4b02      	ldr	r3, [pc, #8]	; (b5cb8 <system_thread_set_state+0xc>)
   b5cb0:	681b      	ldr	r3, [r3, #0]
   b5cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5cb4:	9301      	str	r3, [sp, #4]
   b5cb6:	bd08      	pop	{r3, pc}
   b5cb8:	00030220 	.word	0x00030220

000b5cbc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5cbc:	b508      	push	{r3, lr}
   b5cbe:	4b03      	ldr	r3, [pc, #12]	; (b5ccc <system_ctrl_set_app_request_handler+0x10>)
   b5cc0:	681b      	ldr	r3, [r3, #0]
   b5cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5cc6:	9301      	str	r3, [sp, #4]
   b5cc8:	bd08      	pop	{r3, pc}
   b5cca:	0000      	.short	0x0000
   b5ccc:	00030220 	.word	0x00030220

000b5cd0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5cd0:	b508      	push	{r3, lr}
   b5cd2:	4b03      	ldr	r3, [pc, #12]	; (b5ce0 <system_ctrl_set_result+0x10>)
   b5cd4:	681b      	ldr	r3, [r3, #0]
   b5cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5cda:	9301      	str	r3, [sp, #4]
   b5cdc:	bd08      	pop	{r3, pc}
   b5cde:	0000      	.short	0x0000
   b5ce0:	00030220 	.word	0x00030220

000b5ce4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5ce4:	b508      	push	{r3, lr}
   b5ce6:	4b02      	ldr	r3, [pc, #8]	; (b5cf0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5ce8:	681b      	ldr	r3, [r3, #0]
   b5cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5cec:	9301      	str	r3, [sp, #4]
   b5cee:	bd08      	pop	{r3, pc}
   b5cf0:	00030244 	.word	0x00030244

000b5cf4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5cf4:	b508      	push	{r3, lr}
   b5cf6:	4b02      	ldr	r3, [pc, #8]	; (b5d00 <network_connect+0xc>)
   b5cf8:	681b      	ldr	r3, [r3, #0]
   b5cfa:	685b      	ldr	r3, [r3, #4]
   b5cfc:	9301      	str	r3, [sp, #4]
   b5cfe:	bd08      	pop	{r3, pc}
   b5d00:	00030240 	.word	0x00030240

000b5d04 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5d04:	b508      	push	{r3, lr}
   b5d06:	4b02      	ldr	r3, [pc, #8]	; (b5d10 <network_connecting+0xc>)
   b5d08:	681b      	ldr	r3, [r3, #0]
   b5d0a:	689b      	ldr	r3, [r3, #8]
   b5d0c:	9301      	str	r3, [sp, #4]
   b5d0e:	bd08      	pop	{r3, pc}
   b5d10:	00030240 	.word	0x00030240

000b5d14 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5d14:	b508      	push	{r3, lr}
   b5d16:	4b02      	ldr	r3, [pc, #8]	; (b5d20 <network_disconnect+0xc>)
   b5d18:	681b      	ldr	r3, [r3, #0]
   b5d1a:	68db      	ldr	r3, [r3, #12]
   b5d1c:	9301      	str	r3, [sp, #4]
   b5d1e:	bd08      	pop	{r3, pc}
   b5d20:	00030240 	.word	0x00030240

000b5d24 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5d24:	b508      	push	{r3, lr}
   b5d26:	4b02      	ldr	r3, [pc, #8]	; (b5d30 <network_ready+0xc>)
   b5d28:	681b      	ldr	r3, [r3, #0]
   b5d2a:	691b      	ldr	r3, [r3, #16]
   b5d2c:	9301      	str	r3, [sp, #4]
   b5d2e:	bd08      	pop	{r3, pc}
   b5d30:	00030240 	.word	0x00030240

000b5d34 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5d34:	b508      	push	{r3, lr}
   b5d36:	4b02      	ldr	r3, [pc, #8]	; (b5d40 <network_on+0xc>)
   b5d38:	681b      	ldr	r3, [r3, #0]
   b5d3a:	695b      	ldr	r3, [r3, #20]
   b5d3c:	9301      	str	r3, [sp, #4]
   b5d3e:	bd08      	pop	{r3, pc}
   b5d40:	00030240 	.word	0x00030240

000b5d44 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5d44:	b508      	push	{r3, lr}
   b5d46:	4b02      	ldr	r3, [pc, #8]	; (b5d50 <network_off+0xc>)
   b5d48:	681b      	ldr	r3, [r3, #0]
   b5d4a:	699b      	ldr	r3, [r3, #24]
   b5d4c:	9301      	str	r3, [sp, #4]
   b5d4e:	bd08      	pop	{r3, pc}
   b5d50:	00030240 	.word	0x00030240

000b5d54 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5d54:	b508      	push	{r3, lr}
   b5d56:	4b02      	ldr	r3, [pc, #8]	; (b5d60 <network_listen+0xc>)
   b5d58:	681b      	ldr	r3, [r3, #0]
   b5d5a:	69db      	ldr	r3, [r3, #28]
   b5d5c:	9301      	str	r3, [sp, #4]
   b5d5e:	bd08      	pop	{r3, pc}
   b5d60:	00030240 	.word	0x00030240

000b5d64 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5d64:	b508      	push	{r3, lr}
   b5d66:	4b02      	ldr	r3, [pc, #8]	; (b5d70 <network_listening+0xc>)
   b5d68:	681b      	ldr	r3, [r3, #0]
   b5d6a:	6a1b      	ldr	r3, [r3, #32]
   b5d6c:	9301      	str	r3, [sp, #4]
   b5d6e:	bd08      	pop	{r3, pc}
   b5d70:	00030240 	.word	0x00030240

000b5d74 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5d74:	b508      	push	{r3, lr}
   b5d76:	4b02      	ldr	r3, [pc, #8]	; (b5d80 <network_set_listen_timeout+0xc>)
   b5d78:	681b      	ldr	r3, [r3, #0]
   b5d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5d7c:	9301      	str	r3, [sp, #4]
   b5d7e:	bd08      	pop	{r3, pc}
   b5d80:	00030240 	.word	0x00030240

000b5d84 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5d84:	b508      	push	{r3, lr}
   b5d86:	4b02      	ldr	r3, [pc, #8]	; (b5d90 <network_get_listen_timeout+0xc>)
   b5d88:	681b      	ldr	r3, [r3, #0]
   b5d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5d8c:	9301      	str	r3, [sp, #4]
   b5d8e:	bd08      	pop	{r3, pc}
   b5d90:	00030240 	.word	0x00030240

000b5d94 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5d94:	b508      	push	{r3, lr}
   b5d96:	4b02      	ldr	r3, [pc, #8]	; (b5da0 <network_is_on+0xc>)
   b5d98:	681b      	ldr	r3, [r3, #0]
   b5d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d9c:	9301      	str	r3, [sp, #4]
   b5d9e:	bd08      	pop	{r3, pc}
   b5da0:	00030240 	.word	0x00030240

000b5da4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5da4:	b508      	push	{r3, lr}
   b5da6:	4b02      	ldr	r3, [pc, #8]	; (b5db0 <network_is_off+0xc>)
   b5da8:	681b      	ldr	r3, [r3, #0]
   b5daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5dac:	9301      	str	r3, [sp, #4]
   b5dae:	bd08      	pop	{r3, pc}
   b5db0:	00030240 	.word	0x00030240

000b5db4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5db4:	b508      	push	{r3, lr}
   b5db6:	4b02      	ldr	r3, [pc, #8]	; (b5dc0 <malloc+0xc>)
   b5db8:	681b      	ldr	r3, [r3, #0]
   b5dba:	681b      	ldr	r3, [r3, #0]
   b5dbc:	9301      	str	r3, [sp, #4]
   b5dbe:	bd08      	pop	{r3, pc}
   b5dc0:	0003021c 	.word	0x0003021c

000b5dc4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5dc4:	b508      	push	{r3, lr}
   b5dc6:	4b02      	ldr	r3, [pc, #8]	; (b5dd0 <free+0xc>)
   b5dc8:	681b      	ldr	r3, [r3, #0]
   b5dca:	685b      	ldr	r3, [r3, #4]
   b5dcc:	9301      	str	r3, [sp, #4]
   b5dce:	bd08      	pop	{r3, pc}
   b5dd0:	0003021c 	.word	0x0003021c

000b5dd4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5dd4:	b508      	push	{r3, lr}
   b5dd6:	4b02      	ldr	r3, [pc, #8]	; (b5de0 <vsnprintf+0xc>)
   b5dd8:	681b      	ldr	r3, [r3, #0]
   b5dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ddc:	9301      	str	r3, [sp, #4]
   b5dde:	bd08      	pop	{r3, pc}
   b5de0:	0003021c 	.word	0x0003021c

000b5de4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5de4:	b508      	push	{r3, lr}
   b5de6:	4b02      	ldr	r3, [pc, #8]	; (b5df0 <__errno+0xc>)
   b5de8:	681b      	ldr	r3, [r3, #0]
   b5dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5dec:	9301      	str	r3, [sp, #4]
   b5dee:	bd08      	pop	{r3, pc}
   b5df0:	0003021c 	.word	0x0003021c

000b5df4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5df4:	b508      	push	{r3, lr}
   b5df6:	4b02      	ldr	r3, [pc, #8]	; (b5e00 <__assert_func+0xc>)
   b5df8:	681b      	ldr	r3, [r3, #0]
   b5dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5dfc:	9301      	str	r3, [sp, #4]
   b5dfe:	bd08      	pop	{r3, pc}
   b5e00:	0003021c 	.word	0x0003021c

000b5e04 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5e04:	b508      	push	{r3, lr}
   b5e06:	4b02      	ldr	r3, [pc, #8]	; (b5e10 <newlib_impure_ptr_callback+0xc>)
   b5e08:	681b      	ldr	r3, [r3, #0]
   b5e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5e0c:	9301      	str	r3, [sp, #4]
   b5e0e:	bd08      	pop	{r3, pc}
   b5e10:	0003021c 	.word	0x0003021c

000b5e14 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5e14:	2100      	movs	r1, #0
   b5e16:	f7ff bf41 	b.w	b5c9c <system_delay_ms>
	...

000b5e1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5e1c:	4802      	ldr	r0, [pc, #8]	; (b5e28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5e1e:	2300      	movs	r3, #0
   b5e20:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5e22:	f7ff bd6b 	b.w	b58fc <os_mutex_recursive_create>
   b5e26:	bf00      	nop
   b5e28:	2003e6c4 	.word	0x2003e6c4

000b5e2c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5e2c:	2200      	movs	r2, #0
   b5e2e:	6840      	ldr	r0, [r0, #4]
   b5e30:	4611      	mov	r1, r2
   b5e32:	f7ff bf97 	b.w	b5d64 <network_listening>

000b5e36 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5e36:	2200      	movs	r2, #0
   b5e38:	6840      	ldr	r0, [r0, #4]
   b5e3a:	4611      	mov	r1, r2
   b5e3c:	f7ff bfa2 	b.w	b5d84 <network_get_listen_timeout>

000b5e40 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5e40:	6840      	ldr	r0, [r0, #4]
   b5e42:	2200      	movs	r2, #0
   b5e44:	f7ff bf96 	b.w	b5d74 <network_set_listen_timeout>

000b5e48 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5e48:	6840      	ldr	r0, [r0, #4]
   b5e4a:	2200      	movs	r2, #0
   b5e4c:	f081 0101 	eor.w	r1, r1, #1
   b5e50:	f7ff bf80 	b.w	b5d54 <network_listen>

000b5e54 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5e54:	2300      	movs	r3, #0
   b5e56:	6840      	ldr	r0, [r0, #4]
   b5e58:	461a      	mov	r2, r3
   b5e5a:	4619      	mov	r1, r3
   b5e5c:	f7ff bf72 	b.w	b5d44 <network_off>

000b5e60 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5e60:	2300      	movs	r3, #0
   b5e62:	6840      	ldr	r0, [r0, #4]
   b5e64:	461a      	mov	r2, r3
   b5e66:	4619      	mov	r1, r3
   b5e68:	f7ff bf64 	b.w	b5d34 <network_on>

000b5e6c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5e6c:	2200      	movs	r2, #0
   b5e6e:	6840      	ldr	r0, [r0, #4]
   b5e70:	4611      	mov	r1, r2
   b5e72:	f7ff bf57 	b.w	b5d24 <network_ready>

000b5e76 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5e76:	2200      	movs	r2, #0
   b5e78:	6840      	ldr	r0, [r0, #4]
   b5e7a:	4611      	mov	r1, r2
   b5e7c:	f7ff bf42 	b.w	b5d04 <network_connecting>

000b5e80 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5e80:	6840      	ldr	r0, [r0, #4]
   b5e82:	2200      	movs	r2, #0
   b5e84:	2102      	movs	r1, #2
   b5e86:	f7ff bf45 	b.w	b5d14 <network_disconnect>

000b5e8a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5e8a:	2300      	movs	r3, #0
   b5e8c:	6840      	ldr	r0, [r0, #4]
   b5e8e:	461a      	mov	r2, r3
   b5e90:	f7ff bf30 	b.w	b5cf4 <network_connect>

000b5e94 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5e94:	4b02      	ldr	r3, [pc, #8]	; (b5ea0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5e96:	2203      	movs	r2, #3
   b5e98:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5e9a:	4a02      	ldr	r2, [pc, #8]	; (b5ea4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5e9c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5e9e:	4770      	bx	lr
   b5ea0:	2003e6c8 	.word	0x2003e6c8
   b5ea4:	000b7f98 	.word	0x000b7f98

000b5ea8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5ea8:	4770      	bx	lr

000b5eaa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5eac:	4606      	mov	r6, r0
   b5eae:	4615      	mov	r5, r2
   b5eb0:	460c      	mov	r4, r1
   b5eb2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5eb4:	42bc      	cmp	r4, r7
   b5eb6:	d006      	beq.n	b5ec6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5eb8:	6833      	ldr	r3, [r6, #0]
   b5eba:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5ebe:	689b      	ldr	r3, [r3, #8]
   b5ec0:	4630      	mov	r0, r6
   b5ec2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5ec4:	e7f6      	b.n	b5eb4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5ec6:	4628      	mov	r0, r5
   b5ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5eca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5eca:	7c00      	ldrb	r0, [r0, #16]
   b5ecc:	2200      	movs	r2, #0
   b5ece:	f7ff bd75 	b.w	b59bc <hal_i2c_write>

000b5ed2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5ed2:	7c00      	ldrb	r0, [r0, #16]
   b5ed4:	2100      	movs	r1, #0
   b5ed6:	f7ff bd79 	b.w	b59cc <hal_i2c_available>

000b5eda <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5eda:	7c00      	ldrb	r0, [r0, #16]
   b5edc:	2100      	movs	r1, #0
   b5ede:	f7ff bd7d 	b.w	b59dc <hal_i2c_read>

000b5ee2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5ee2:	7c00      	ldrb	r0, [r0, #16]
   b5ee4:	2100      	movs	r1, #0
   b5ee6:	f7ff bd81 	b.w	b59ec <hal_i2c_peek>

000b5eea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5eea:	7c00      	ldrb	r0, [r0, #16]
   b5eec:	2100      	movs	r1, #0
   b5eee:	f7ff bd85 	b.w	b59fc <hal_i2c_flush>

000b5ef2 <_ZN7TwoWireD0Ev>:
   b5ef2:	b510      	push	{r4, lr}
   b5ef4:	2114      	movs	r1, #20
   b5ef6:	4604      	mov	r4, r0
   b5ef8:	f7fe f8e1 	bl	b40be <_ZdlPvj>
   b5efc:	4620      	mov	r0, r4
   b5efe:	bd10      	pop	{r4, pc}

000b5f00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5f00:	b538      	push	{r3, r4, r5, lr}
   b5f02:	4604      	mov	r4, r0
   b5f04:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5f0a:	2200      	movs	r2, #0
   b5f0c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5f10:	4b09      	ldr	r3, [pc, #36]	; (b5f38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5f12:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5f14:	4608      	mov	r0, r1
   b5f16:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5f18:	4629      	mov	r1, r5
   b5f1a:	f7ff fd7f 	bl	b5a1c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5f1e:	30bf      	adds	r0, #191	; 0xbf
   b5f20:	d108      	bne.n	b5f34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5f22:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5f24:	07db      	lsls	r3, r3, #31
   b5f26:	d505      	bpl.n	b5f34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5f28:	6868      	ldr	r0, [r5, #4]
   b5f2a:	f7ff ff4b 	bl	b5dc4 <free>
    free(conf.tx_buffer);
   b5f2e:	68e8      	ldr	r0, [r5, #12]
   b5f30:	f7ff ff48 	bl	b5dc4 <free>
}
   b5f34:	4620      	mov	r0, r4
   b5f36:	bd38      	pop	{r3, r4, r5, pc}
   b5f38:	000b7fd4 	.word	0x000b7fd4

000b5f3c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b5f3c:	7c00      	ldrb	r0, [r0, #16]
   b5f3e:	2200      	movs	r2, #0
   b5f40:	f7ff bd1c 	b.w	b597c <hal_i2c_set_speed>

000b5f44 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5f44:	2300      	movs	r3, #0
   b5f46:	7c00      	ldrb	r0, [r0, #16]
   b5f48:	461a      	mov	r2, r3
   b5f4a:	4619      	mov	r1, r3
   b5f4c:	f7ff bd1e 	b.w	b598c <hal_i2c_begin>

000b5f50 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5f50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5f52:	2200      	movs	r2, #0
   b5f54:	2314      	movs	r3, #20
   b5f56:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5f5a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5f5e:	780b      	ldrb	r3, [r1, #0]
   b5f60:	f88d 3008 	strb.w	r3, [sp, #8]
   b5f64:	684b      	ldr	r3, [r1, #4]
   b5f66:	9303      	str	r3, [sp, #12]
   b5f68:	68cb      	ldr	r3, [r1, #12]
   b5f6a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5f6c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5f6e:	7a0b      	ldrb	r3, [r1, #8]
   b5f70:	9305      	str	r3, [sp, #20]
   b5f72:	a901      	add	r1, sp, #4
   b5f74:	f7ff fd5a 	bl	b5a2c <hal_i2c_request_ex>
}
   b5f78:	b007      	add	sp, #28
   b5f7a:	f85d fb04 	ldr.w	pc, [sp], #4

000b5f7e <_ZN7TwoWire11requestFromEhjh>:
{
   b5f7e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5f80:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5f82:	f88d 1000 	strb.w	r1, [sp]
   b5f86:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5f8a:	9103      	str	r1, [sp, #12]
   b5f8c:	bf18      	it	ne
   b5f8e:	2301      	movne	r3, #1
   b5f90:	4669      	mov	r1, sp
    size_ = size;
   b5f92:	9201      	str	r2, [sp, #4]
   b5f94:	f88d 3008 	strb.w	r3, [sp, #8]
   b5f98:	f7ff ffda 	bl	b5f50 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5f9c:	b005      	add	sp, #20
   b5f9e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5fa2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b5fa2:	2301      	movs	r3, #1
   b5fa4:	f7ff bfeb 	b.w	b5f7e <_ZN7TwoWire11requestFromEhjh>

000b5fa8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5fa8:	7c00      	ldrb	r0, [r0, #16]
   b5faa:	2200      	movs	r2, #0
   b5fac:	f7ff bcf6 	b.w	b599c <hal_i2c_begin_transmission>

000b5fb0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b5fb0:	b2c9      	uxtb	r1, r1
   b5fb2:	f7ff bff9 	b.w	b5fa8 <_ZN7TwoWire17beginTransmissionEh>

000b5fb6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5fb6:	7c00      	ldrb	r0, [r0, #16]
   b5fb8:	2200      	movs	r2, #0
   b5fba:	f7ff bcf7 	b.w	b59ac <hal_i2c_end_transmission>

000b5fbe <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5fbe:	2101      	movs	r1, #1
   b5fc0:	f7ff bff9 	b.w	b5fb6 <_ZN7TwoWire15endTransmissionEh>

000b5fc4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5fc4:	4770      	bx	lr

000b5fc6 <_ZN9IPAddressD0Ev>:
   b5fc6:	b510      	push	{r4, lr}
   b5fc8:	2118      	movs	r1, #24
   b5fca:	4604      	mov	r4, r0
   b5fcc:	f7fe f877 	bl	b40be <_ZdlPvj>
   b5fd0:	4620      	mov	r0, r4
   b5fd2:	bd10      	pop	{r4, pc}

000b5fd4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5fd6:	7d03      	ldrb	r3, [r0, #20]
   b5fd8:	2b06      	cmp	r3, #6
{
   b5fda:	b08d      	sub	sp, #52	; 0x34
   b5fdc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5fde:	f100 0704 	add.w	r7, r0, #4
   b5fe2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5fe6:	d012      	beq.n	b600e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5fe8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5fec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5ff0:	220a      	movs	r2, #10
   b5ff2:	4630      	mov	r0, r6
   b5ff4:	f000 f973 	bl	b62de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5ff8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5ffa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5ffc:	d019      	beq.n	b6032 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5ffe:	2c00      	cmp	r4, #0
   b6000:	d0f4      	beq.n	b5fec <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6002:	212e      	movs	r1, #46	; 0x2e
   b6004:	4630      	mov	r0, r6
   b6006:	f000 f951 	bl	b62ac <_ZN5Print5printEc>
   b600a:	4404      	add	r4, r0
   b600c:	e7ee      	b.n	b5fec <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b600e:	232f      	movs	r3, #47	; 0x2f
   b6010:	466a      	mov	r2, sp
   b6012:	4639      	mov	r1, r7
   b6014:	200a      	movs	r0, #10
		buf[0] = 0;
   b6016:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b601a:	f7ff fd17 	bl	b5a4c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b601e:	4668      	mov	r0, sp
   b6020:	f7fe f806 	bl	b4030 <strlen>
   b6024:	6833      	ldr	r3, [r6, #0]
   b6026:	4602      	mov	r2, r0
   b6028:	68db      	ldr	r3, [r3, #12]
   b602a:	4669      	mov	r1, sp
   b602c:	4630      	mov	r0, r6
   b602e:	4798      	blx	r3
   b6030:	4604      	mov	r4, r0
    }
    return n;
}
   b6032:	4620      	mov	r0, r4
   b6034:	b00d      	add	sp, #52	; 0x34
   b6036:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6038 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6038:	b510      	push	{r4, lr}
   b603a:	4b05      	ldr	r3, [pc, #20]	; (b6050 <_ZN9IPAddressC1Ev+0x18>)
   b603c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b603e:	2211      	movs	r2, #17
   b6040:	f840 3b04 	str.w	r3, [r0], #4
   b6044:	2100      	movs	r1, #0
   b6046:	f001 f92f 	bl	b72a8 <memset>
}
   b604a:	4620      	mov	r0, r4
   b604c:	bd10      	pop	{r4, pc}
   b604e:	bf00      	nop
   b6050:	000b7ffc 	.word	0x000b7ffc

000b6054 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6054:	4603      	mov	r3, r0
   b6056:	4a07      	ldr	r2, [pc, #28]	; (b6074 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6058:	b510      	push	{r4, lr}
   b605a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b605e:	f101 0210 	add.w	r2, r1, #16
   b6062:	f851 4b04 	ldr.w	r4, [r1], #4
   b6066:	f843 4b04 	str.w	r4, [r3], #4
   b606a:	4291      	cmp	r1, r2
   b606c:	d1f9      	bne.n	b6062 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b606e:	780a      	ldrb	r2, [r1, #0]
   b6070:	701a      	strb	r2, [r3, #0]
}
   b6072:	bd10      	pop	{r4, pc}
   b6074:	000b7ffc 	.word	0x000b7ffc

000b6078 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6078:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b607a:	2b04      	cmp	r3, #4
   b607c:	d104      	bne.n	b6088 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b607e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6080:	3800      	subs	r0, #0
   b6082:	bf18      	it	ne
   b6084:	2001      	movne	r0, #1
   b6086:	4770      	bx	lr
    } else if (version() == 6) {
   b6088:	2b06      	cmp	r3, #6
   b608a:	d107      	bne.n	b609c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b608c:	6843      	ldr	r3, [r0, #4]
   b608e:	b93b      	cbnz	r3, b60a0 <_ZNK9IPAddresscvbEv+0x28>
   b6090:	6883      	ldr	r3, [r0, #8]
   b6092:	b92b      	cbnz	r3, b60a0 <_ZNK9IPAddresscvbEv+0x28>
   b6094:	68c3      	ldr	r3, [r0, #12]
   b6096:	b91b      	cbnz	r3, b60a0 <_ZNK9IPAddresscvbEv+0x28>
   b6098:	6900      	ldr	r0, [r0, #16]
   b609a:	e7f1      	b.n	b6080 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b609c:	2000      	movs	r0, #0
   b609e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b60a0:	2001      	movs	r0, #1
}
   b60a2:	4770      	bx	lr

000b60a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b60a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b60a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b60aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b60ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b60b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b60b6:	2304      	movs	r3, #4
   b60b8:	6041      	str	r1, [r0, #4]
   b60ba:	7503      	strb	r3, [r0, #20]
}
   b60bc:	bd10      	pop	{r4, pc}
	...

000b60c0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b60c0:	b507      	push	{r0, r1, r2, lr}
   b60c2:	4b06      	ldr	r3, [pc, #24]	; (b60dc <_ZN9IPAddressC1EPKh+0x1c>)
   b60c4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b60c6:	78cb      	ldrb	r3, [r1, #3]
   b60c8:	9300      	str	r3, [sp, #0]
   b60ca:	788b      	ldrb	r3, [r1, #2]
   b60cc:	784a      	ldrb	r2, [r1, #1]
   b60ce:	7809      	ldrb	r1, [r1, #0]
   b60d0:	f7ff ffe8 	bl	b60a4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b60d4:	b003      	add	sp, #12
   b60d6:	f85d fb04 	ldr.w	pc, [sp], #4
   b60da:	bf00      	nop
   b60dc:	000b7ffc 	.word	0x000b7ffc

000b60e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b60e0:	4b01      	ldr	r3, [pc, #4]	; (b60e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b60e2:	4a02      	ldr	r2, [pc, #8]	; (b60ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b60e4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b60e6:	4770      	bx	lr
   b60e8:	2003e6d0 	.word	0x2003e6d0
   b60ec:	000b8008 	.word	0x000b8008

000b60f0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b60f0:	2300      	movs	r3, #0
   b60f2:	6840      	ldr	r0, [r0, #4]
   b60f4:	461a      	mov	r2, r3
   b60f6:	f7ff bdfd 	b.w	b5cf4 <network_connect>

000b60fa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b60fa:	6840      	ldr	r0, [r0, #4]
   b60fc:	2200      	movs	r2, #0
   b60fe:	2102      	movs	r1, #2
   b6100:	f7ff be08 	b.w	b5d14 <network_disconnect>

000b6104 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6104:	2200      	movs	r2, #0
   b6106:	6840      	ldr	r0, [r0, #4]
   b6108:	4611      	mov	r1, r2
   b610a:	f7ff bdfb 	b.w	b5d04 <network_connecting>

000b610e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b610e:	2200      	movs	r2, #0
   b6110:	6840      	ldr	r0, [r0, #4]
   b6112:	4611      	mov	r1, r2
   b6114:	f7ff be06 	b.w	b5d24 <network_ready>

000b6118 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6118:	2300      	movs	r3, #0
   b611a:	6840      	ldr	r0, [r0, #4]
   b611c:	461a      	mov	r2, r3
   b611e:	4619      	mov	r1, r3
   b6120:	f7ff be08 	b.w	b5d34 <network_on>

000b6124 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6124:	2300      	movs	r3, #0
   b6126:	6840      	ldr	r0, [r0, #4]
   b6128:	461a      	mov	r2, r3
   b612a:	4619      	mov	r1, r3
   b612c:	f7ff be0a 	b.w	b5d44 <network_off>

000b6130 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6130:	6840      	ldr	r0, [r0, #4]
   b6132:	2100      	movs	r1, #0
   b6134:	f7ff be2e 	b.w	b5d94 <network_is_on>

000b6138 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6138:	6840      	ldr	r0, [r0, #4]
   b613a:	2100      	movs	r1, #0
   b613c:	f7ff be32 	b.w	b5da4 <network_is_off>

000b6140 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6140:	6840      	ldr	r0, [r0, #4]
   b6142:	2200      	movs	r2, #0
   b6144:	f081 0101 	eor.w	r1, r1, #1
   b6148:	f7ff be04 	b.w	b5d54 <network_listen>

000b614c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b614c:	6840      	ldr	r0, [r0, #4]
   b614e:	2200      	movs	r2, #0
   b6150:	f7ff be10 	b.w	b5d74 <network_set_listen_timeout>

000b6154 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6154:	2200      	movs	r2, #0
   b6156:	6840      	ldr	r0, [r0, #4]
   b6158:	4611      	mov	r1, r2
   b615a:	f7ff be13 	b.w	b5d84 <network_get_listen_timeout>

000b615e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b615e:	2200      	movs	r2, #0
   b6160:	6840      	ldr	r0, [r0, #4]
   b6162:	4611      	mov	r1, r2
   b6164:	f7ff bdfe 	b.w	b5d64 <network_listening>

000b6168 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b616c:	b095      	sub	sp, #84	; 0x54
   b616e:	4614      	mov	r4, r2
   b6170:	460d      	mov	r5, r1
   b6172:	4607      	mov	r7, r0
    IPAddress addr;
   b6174:	f7ff ff60 	bl	b6038 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6178:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b617a:	221c      	movs	r2, #28
   b617c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b617e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6180:	f001 f892 	bl	b72a8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6184:	2340      	movs	r3, #64	; 0x40
   b6186:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6188:	4620      	mov	r0, r4
   b618a:	466b      	mov	r3, sp
   b618c:	aa0c      	add	r2, sp, #48	; 0x30
   b618e:	2100      	movs	r1, #0
   b6190:	f7ff fc7c 	bl	b5a8c <netdb_getaddrinfo>
    if (!r) {
   b6194:	4604      	mov	r4, r0
   b6196:	2800      	cmp	r0, #0
   b6198:	d14b      	bne.n	b6232 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b619a:	4602      	mov	r2, r0
   b619c:	2101      	movs	r1, #1
   b619e:	6868      	ldr	r0, [r5, #4]
   b61a0:	f7ff fdc0 	bl	b5d24 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b61a4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b61a6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b61a8:	4622      	mov	r2, r4
   b61aa:	6868      	ldr	r0, [r5, #4]
   b61ac:	f7ff fdba 	bl	b5d24 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b61b0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b61b2:	4681      	mov	r9, r0
        bool ok = false;
   b61b4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b61b6:	2e00      	cmp	r6, #0
   b61b8:	d03b      	beq.n	b6232 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b61ba:	2900      	cmp	r1, #0
   b61bc:	d139      	bne.n	b6232 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b61be:	6873      	ldr	r3, [r6, #4]
   b61c0:	2b02      	cmp	r3, #2
   b61c2:	d003      	beq.n	b61cc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b61c4:	2b0a      	cmp	r3, #10
   b61c6:	d011      	beq.n	b61ec <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b61c8:	69f6      	ldr	r6, [r6, #28]
   b61ca:	e7f4      	b.n	b61b6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b61cc:	f1b8 0f00 	cmp.w	r8, #0
   b61d0:	d0fa      	beq.n	b61c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b61d2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b61d4:	a806      	add	r0, sp, #24
   b61d6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b61d8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b61da:	f7ff ff71 	bl	b60c0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b61de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b61e0:	1d3c      	adds	r4, r7, #4
   b61e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b61e4:	682b      	ldr	r3, [r5, #0]
   b61e6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b61e8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b61ea:	e7ed      	b.n	b61c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b61ec:	f1b9 0f00 	cmp.w	r9, #0
   b61f0:	d0ea      	beq.n	b61c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b61f2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b61f4:	2210      	movs	r2, #16
   b61f6:	a801      	add	r0, sp, #4
   b61f8:	f001 f856 	bl	b72a8 <memset>
                    a.v = 6;
   b61fc:	2306      	movs	r3, #6
   b61fe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6202:	ad01      	add	r5, sp, #4
   b6204:	f104 0308 	add.w	r3, r4, #8
   b6208:	3418      	adds	r4, #24
   b620a:	6818      	ldr	r0, [r3, #0]
   b620c:	6859      	ldr	r1, [r3, #4]
   b620e:	462a      	mov	r2, r5
   b6210:	c203      	stmia	r2!, {r0, r1}
   b6212:	3308      	adds	r3, #8
   b6214:	42a3      	cmp	r3, r4
   b6216:	4615      	mov	r5, r2
   b6218:	d1f7      	bne.n	b620a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b621a:	a901      	add	r1, sp, #4
   b621c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b621e:	ad07      	add	r5, sp, #28
   b6220:	f7ff ff18 	bl	b6054 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6226:	1d3c      	adds	r4, r7, #4
   b6228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b622a:	682b      	ldr	r3, [r5, #0]
   b622c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b622e:	4649      	mov	r1, r9
   b6230:	e7ca      	b.n	b61c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6232:	9800      	ldr	r0, [sp, #0]
   b6234:	f7ff fc22 	bl	b5a7c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6238:	4638      	mov	r0, r7
   b623a:	b015      	add	sp, #84	; 0x54
   b623c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6240 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6240:	4b02      	ldr	r3, [pc, #8]	; (b624c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6242:	4a03      	ldr	r2, [pc, #12]	; (b6250 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6244:	601a      	str	r2, [r3, #0]
   b6246:	2200      	movs	r2, #0
   b6248:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b624a:	4770      	bx	lr
   b624c:	2003e6d4 	.word	0x2003e6d4
   b6250:	000b8014 	.word	0x000b8014

000b6254 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6256:	4606      	mov	r6, r0
   b6258:	460d      	mov	r5, r1
  size_t n = 0;
   b625a:	188f      	adds	r7, r1, r2
   b625c:	2400      	movs	r4, #0
  while (size--) {
   b625e:	42bd      	cmp	r5, r7
   b6260:	d00c      	beq.n	b627c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6262:	6833      	ldr	r3, [r6, #0]
   b6264:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6268:	689b      	ldr	r3, [r3, #8]
   b626a:	4630      	mov	r0, r6
   b626c:	4798      	blx	r3
     if (chunk>=0)
   b626e:	1e03      	subs	r3, r0, #0
   b6270:	db01      	blt.n	b6276 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6272:	441c      	add	r4, r3
  while (size--) {
   b6274:	e7f3      	b.n	b625e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6276:	2c00      	cmp	r4, #0
   b6278:	bf08      	it	eq
   b627a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b627c:	4620      	mov	r0, r4
   b627e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6280 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6280:	b513      	push	{r0, r1, r4, lr}
   b6282:	4604      	mov	r4, r0
    }
   b6284:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6286:	b159      	cbz	r1, b62a0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6288:	9101      	str	r1, [sp, #4]
   b628a:	f7fd fed1 	bl	b4030 <strlen>
   b628e:	6823      	ldr	r3, [r4, #0]
   b6290:	9901      	ldr	r1, [sp, #4]
   b6292:	68db      	ldr	r3, [r3, #12]
   b6294:	4602      	mov	r2, r0
   b6296:	4620      	mov	r0, r4
    }
   b6298:	b002      	add	sp, #8
   b629a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b629e:	4718      	bx	r3
    }
   b62a0:	b002      	add	sp, #8
   b62a2:	bd10      	pop	{r4, pc}

000b62a4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b62a4:	b508      	push	{r3, lr}
  return write(str);
   b62a6:	f7ff ffeb 	bl	b6280 <_ZN5Print5writeEPKc>
}
   b62aa:	bd08      	pop	{r3, pc}

000b62ac <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b62ac:	6803      	ldr	r3, [r0, #0]
   b62ae:	689b      	ldr	r3, [r3, #8]
   b62b0:	4718      	bx	r3

000b62b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b62b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b62b4:	210d      	movs	r1, #13
{
   b62b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b62b8:	f7ff fff8 	bl	b62ac <_ZN5Print5printEc>
  n += print('\n');
   b62bc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b62be:	4604      	mov	r4, r0
  n += print('\n');
   b62c0:	4628      	mov	r0, r5
   b62c2:	f7ff fff3 	bl	b62ac <_ZN5Print5printEc>
  return n;
}
   b62c6:	4420      	add	r0, r4
   b62c8:	bd38      	pop	{r3, r4, r5, pc}

000b62ca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b62ca:	b538      	push	{r3, r4, r5, lr}
   b62cc:	4605      	mov	r5, r0
  return write(str);
   b62ce:	f7ff ffd7 	bl	b6280 <_ZN5Print5writeEPKc>
   b62d2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b62d4:	4628      	mov	r0, r5
   b62d6:	f7ff ffec 	bl	b62b2 <_ZN5Print7printlnEv>
  return n;
}
   b62da:	4420      	add	r0, r4
   b62dc:	bd38      	pop	{r3, r4, r5, pc}

000b62de <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b62de:	b530      	push	{r4, r5, lr}
   b62e0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b62e2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b62e4:	2a01      	cmp	r2, #1
  *str = '\0';
   b62e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b62ea:	bf98      	it	ls
   b62ec:	220a      	movls	r2, #10
   b62ee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b62f0:	460d      	mov	r5, r1
   b62f2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b62f6:	fb01 5312 	mls	r3, r1, r2, r5
   b62fa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b62fe:	2b09      	cmp	r3, #9
   b6300:	bf94      	ite	ls
   b6302:	3330      	addls	r3, #48	; 0x30
   b6304:	3337      	addhi	r3, #55	; 0x37
   b6306:	b2db      	uxtb	r3, r3
  } while(n);
   b6308:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b630a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b630e:	d9ef      	bls.n	b62f0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6310:	4621      	mov	r1, r4
   b6312:	f7ff ffb5 	bl	b6280 <_ZN5Print5writeEPKc>
}
   b6316:	b00b      	add	sp, #44	; 0x2c
   b6318:	bd30      	pop	{r4, r5, pc}

000b631a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b631a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b631e:	b086      	sub	sp, #24
   b6320:	af00      	add	r7, sp, #0
   b6322:	4605      	mov	r5, r0
   b6324:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6326:	1d38      	adds	r0, r7, #4
   b6328:	2114      	movs	r1, #20
{
   b632a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b632c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b632e:	f7ff fd51 	bl	b5dd4 <vsnprintf>

    if (n<bufsize)
   b6332:	2813      	cmp	r0, #19
   b6334:	d80e      	bhi.n	b6354 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6336:	1d39      	adds	r1, r7, #4
   b6338:	4628      	mov	r0, r5
   b633a:	f7ff ffa1 	bl	b6280 <_ZN5Print5writeEPKc>
   b633e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6340:	b11e      	cbz	r6, b634a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6342:	4628      	mov	r0, r5
   b6344:	f7ff ffb5 	bl	b62b2 <_ZN5Print7printlnEv>
   b6348:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b634a:	4620      	mov	r0, r4
   b634c:	3718      	adds	r7, #24
   b634e:	46bd      	mov	sp, r7
   b6350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6354:	f100 0308 	add.w	r3, r0, #8
   b6358:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b635c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b635e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6362:	4622      	mov	r2, r4
   b6364:	1c41      	adds	r1, r0, #1
   b6366:	683b      	ldr	r3, [r7, #0]
   b6368:	4668      	mov	r0, sp
   b636a:	f7ff fd33 	bl	b5dd4 <vsnprintf>
  return write(str);
   b636e:	4669      	mov	r1, sp
   b6370:	4628      	mov	r0, r5
   b6372:	f7ff ff85 	bl	b6280 <_ZN5Print5writeEPKc>
   b6376:	4604      	mov	r4, r0
   b6378:	46c5      	mov	sp, r8
   b637a:	e7e1      	b.n	b6340 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b637c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b637c:	4b01      	ldr	r3, [pc, #4]	; (b6384 <_GLOBAL__sub_I_RGB+0x8>)
   b637e:	2200      	movs	r2, #0
   b6380:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6382:	4770      	bx	lr
   b6384:	2003e6dc 	.word	0x2003e6dc

000b6388 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6388:	2100      	movs	r1, #0
   b638a:	f7ff bbef 	b.w	b5b6c <hal_spi_release>

000b638e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b638e:	2100      	movs	r1, #0
   b6390:	f7ff bbe4 	b.w	b5b5c <hal_spi_acquire>

000b6394 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6394:	b510      	push	{r4, lr}
   b6396:	4604      	mov	r4, r0
   b6398:	4608      	mov	r0, r1
{
    _spi = spi;
   b639a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b639c:	f7ff fbbe 	bl	b5b1c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b63a0:	2300      	movs	r3, #0
   b63a2:	6063      	str	r3, [r4, #4]
}
   b63a4:	4620      	mov	r0, r4
   b63a6:	bd10      	pop	{r4, pc}

000b63a8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b63a8:	b513      	push	{r0, r1, r4, lr}
   b63aa:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b63ac:	7800      	ldrb	r0, [r0, #0]
   b63ae:	f7ff ffee 	bl	b638e <_ZN8SPIClass4lockEv.isra.0>
   b63b2:	b958      	cbnz	r0, b63cc <_ZN8SPIClass5beginEv+0x24>
   b63b4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b63b6:	9001      	str	r0, [sp, #4]
   b63b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b63bc:	f7ff fb9e 	bl	b5afc <hal_spi_begin>
        unlock();
   b63c0:	9801      	ldr	r0, [sp, #4]
    }
}
   b63c2:	b002      	add	sp, #8
   b63c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b63c8:	f7ff bfde 	b.w	b6388 <_ZN8SPIClass6unlockEv.isra.0>
   b63cc:	b002      	add	sp, #8
   b63ce:	bd10      	pop	{r4, pc}

000b63d0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b63d0:	7800      	ldrb	r0, [r0, #0]
   b63d2:	f7ff bfd9 	b.w	b6388 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b63d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b63d8:	0840      	lsrs	r0, r0, #1
{
   b63da:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b63dc:	6018      	str	r0, [r3, #0]
   b63de:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b63e0:	6818      	ldr	r0, [r3, #0]
   b63e2:	4288      	cmp	r0, r1
   b63e4:	b2e5      	uxtb	r5, r4
   b63e6:	d906      	bls.n	b63f6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b63e8:	3401      	adds	r4, #1
   b63ea:	2c08      	cmp	r4, #8
   b63ec:	d002      	beq.n	b63f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b63ee:	0840      	lsrs	r0, r0, #1
   b63f0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b63f2:	e7f5      	b.n	b63e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b63f4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b63f6:	4b02      	ldr	r3, [pc, #8]	; (b6400 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b63f8:	5d5b      	ldrb	r3, [r3, r5]
   b63fa:	7013      	strb	r3, [r2, #0]
}
   b63fc:	bd30      	pop	{r4, r5, pc}
   b63fe:	bf00      	nop
   b6400:	000b8048 	.word	0x000b8048

000b6404 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6408:	4606      	mov	r6, r0
   b640a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b640c:	7800      	ldrb	r0, [r0, #0]
{
   b640e:	460c      	mov	r4, r1
    CHECK(lock());
   b6410:	f7ff ffbd 	bl	b638e <_ZN8SPIClass4lockEv.isra.0>
   b6414:	2800      	cmp	r0, #0
   b6416:	db1b      	blt.n	b6450 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6418:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b641a:	2214      	movs	r2, #20
   b641c:	2100      	movs	r1, #0
   b641e:	a809      	add	r0, sp, #36	; 0x24
   b6420:	f000 ff42 	bl	b72a8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6424:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6426:	2200      	movs	r2, #0
   b6428:	a909      	add	r1, sp, #36	; 0x24
   b642a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b642c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6430:	f7ff fb84 	bl	b5b3c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6434:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6438:	b113      	cbz	r3, b6440 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b643a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b643e:	b155      	cbz	r5, b6456 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6440:	2700      	movs	r7, #0
   b6442:	46b9      	mov	r9, r7
   b6444:	46b8      	mov	r8, r7
   b6446:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6448:	7923      	ldrb	r3, [r4, #4]
   b644a:	b15d      	cbz	r5, b6464 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b644c:	b1c3      	cbz	r3, b6480 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b644e:	2000      	movs	r0, #0
}
   b6450:	b00f      	add	sp, #60	; 0x3c
   b6452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6456:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b645a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b645e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6462:	e7f1      	b.n	b6448 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6464:	2b00      	cmp	r3, #0
   b6466:	d135      	bne.n	b64d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6468:	68a3      	ldr	r3, [r4, #8]
   b646a:	4543      	cmp	r3, r8
   b646c:	d108      	bne.n	b6480 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b646e:	f88d 9020 	strb.w	r9, [sp, #32]
   b6472:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6476:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b647a:	89a3      	ldrh	r3, [r4, #12]
   b647c:	429a      	cmp	r2, r3
   b647e:	d0e6      	beq.n	b644e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6480:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6482:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6484:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6488:	980a      	ldr	r0, [sp, #40]	; 0x28
   b648a:	ab04      	add	r3, sp, #16
   b648c:	f10d 020f 	add.w	r2, sp, #15
   b6490:	f7ff ffa2 	bl	b63d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6494:	7921      	ldrb	r1, [r4, #4]
   b6496:	b985      	cbnz	r5, b64ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6498:	b989      	cbnz	r1, b64be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b649a:	68a3      	ldr	r3, [r4, #8]
   b649c:	4543      	cmp	r3, r8
   b649e:	d30e      	bcc.n	b64be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b64a0:	f88d 9020 	strb.w	r9, [sp, #32]
   b64a4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b64a8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b64ac:	89a3      	ldrh	r3, [r4, #12]
   b64ae:	429a      	cmp	r2, r3
   b64b0:	d105      	bne.n	b64be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b64b2:	9b04      	ldr	r3, [sp, #16]
   b64b4:	4543      	cmp	r3, r8
   b64b6:	d102      	bne.n	b64be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b64b8:	e7c9      	b.n	b644e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b64ba:	2900      	cmp	r1, #0
   b64bc:	d1f9      	bne.n	b64b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b64be:	2300      	movs	r3, #0
   b64c0:	9301      	str	r3, [sp, #4]
   b64c2:	7b63      	ldrb	r3, [r4, #13]
   b64c4:	9300      	str	r3, [sp, #0]
   b64c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b64ca:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b64cc:	7830      	ldrb	r0, [r6, #0]
   b64ce:	f7ff fb3d 	bl	b5b4c <hal_spi_set_settings>
   b64d2:	e7bc      	b.n	b644e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b64d4:	e9cd 5500 	strd	r5, r5, [sp]
   b64d8:	462b      	mov	r3, r5
   b64da:	462a      	mov	r2, r5
   b64dc:	2101      	movs	r1, #1
   b64de:	e7f5      	b.n	b64cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b64e0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b64e0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b64e2:	7800      	ldrb	r0, [r0, #0]
   b64e4:	f7ff fb12 	bl	b5b0c <hal_spi_transfer>
}
   b64e8:	b2c0      	uxtb	r0, r0
   b64ea:	bd08      	pop	{r3, pc}

000b64ec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b64ec:	4b05      	ldr	r3, [pc, #20]	; (b6504 <_GLOBAL__sub_I_System+0x18>)
   b64ee:	2202      	movs	r2, #2
   b64f0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b64f2:	4b05      	ldr	r3, [pc, #20]	; (b6508 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b64f4:	4a05      	ldr	r2, [pc, #20]	; (b650c <_GLOBAL__sub_I_System+0x20>)
   b64f6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b64f8:	2000      	movs	r0, #0
   b64fa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b64fe:	f7ff bbc5 	b.w	b5c8c <set_system_mode>
   b6502:	bf00      	nop
   b6504:	2003e6f8 	.word	0x2003e6f8
   b6508:	2003e6ec 	.word	0x2003e6ec
   b650c:	ffff0000 	.word	0xffff0000

000b6510 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6510:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6512:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6514:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6518:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b651a:	2201      	movs	r2, #1
   b651c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6520:	f10d 0107 	add.w	r1, sp, #7
   b6524:	47a0      	blx	r4
}
   b6526:	b002      	add	sp, #8
   b6528:	bd10      	pop	{r4, pc}

000b652a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b652a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b652c:	6803      	ldr	r3, [r0, #0]
   b652e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6534:	46a4      	mov	ip, r4
}
   b6536:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b653a:	4760      	bx	ip

000b653c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b653c:	b513      	push	{r0, r1, r4, lr}
   b653e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6540:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6542:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6546:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6548:	f10d 0107 	add.w	r1, sp, #7
   b654c:	2201      	movs	r2, #1
   b654e:	47a0      	blx	r4
}
   b6550:	b002      	add	sp, #8
   b6552:	bd10      	pop	{r4, pc}

000b6554 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6554:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6556:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6558:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b655c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6560:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6562:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6564:	d008      	beq.n	b6578 <_ZN9TCPClient4readEv+0x24>
   b6566:	6963      	ldr	r3, [r4, #20]
   b6568:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b656c:	1c51      	adds	r1, r2, #1
   b656e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6572:	4413      	add	r3, r2
   b6574:	7918      	ldrb	r0, [r3, #4]
}
   b6576:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6578:	6803      	ldr	r3, [r0, #0]
   b657a:	691b      	ldr	r3, [r3, #16]
   b657c:	4798      	blx	r3
   b657e:	2800      	cmp	r0, #0
   b6580:	d1f1      	bne.n	b6566 <_ZN9TCPClient4readEv+0x12>
   b6582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6586:	e7f6      	b.n	b6576 <_ZN9TCPClient4readEv+0x22>

000b6588 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6588:	4770      	bx	lr

000b658a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b658a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b658c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b658e:	43c0      	mvns	r0, r0
   b6590:	0fc0      	lsrs	r0, r0, #31
   b6592:	4770      	bx	lr

000b6594 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6594:	4770      	bx	lr
	...

000b6598 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6598:	4b06      	ldr	r3, [pc, #24]	; (b65b4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b659a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b659c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b659e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b65a2:	d005      	beq.n	b65b0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b65a4:	4608      	mov	r0, r1
   b65a6:	f000 fd59 	bl	b705c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b65aa:	2800      	cmp	r0, #0
   b65ac:	bf08      	it	eq
   b65ae:	2400      	moveq	r4, #0
      }
   b65b0:	4620      	mov	r0, r4
   b65b2:	bd10      	pop	{r4, pc}
   b65b4:	000b7f88 	.word	0x000b7f88

000b65b8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b65b8:	b510      	push	{r4, lr}
   b65ba:	21ac      	movs	r1, #172	; 0xac
   b65bc:	4604      	mov	r4, r0
   b65be:	f7fd fd7e 	bl	b40be <_ZdlPvj>
   b65c2:	4620      	mov	r0, r4
   b65c4:	bd10      	pop	{r4, pc}

000b65c6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b65c6:	21ac      	movs	r1, #172	; 0xac
   b65c8:	f7fd bd79 	b.w	b40be <_ZdlPvj>

000b65cc <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b65cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b65d0:	f04f 0800 	mov.w	r8, #0
   b65d4:	b086      	sub	sp, #24
   b65d6:	461c      	mov	r4, r3
   b65d8:	f8c0 8004 	str.w	r8, [r0, #4]
   b65dc:	4605      	mov	r5, r0
   b65de:	460e      	mov	r6, r1
   b65e0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b65e2:	4641      	mov	r1, r8
   b65e4:	2210      	movs	r2, #16
   b65e6:	a802      	add	r0, sp, #8
   b65e8:	f000 fe5e 	bl	b72a8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b65ec:	1c63      	adds	r3, r4, #1
   b65ee:	d009      	beq.n	b6604 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b65f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b65f4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b65f8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b65fc:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6600:	435c      	muls	r4, r3
   b6602:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6604:	6968      	ldr	r0, [r5, #20]
   b6606:	2310      	movs	r3, #16
   b6608:	9300      	str	r3, [sp, #0]
   b660a:	6800      	ldr	r0, [r0, #0]
   b660c:	ab02      	add	r3, sp, #8
   b660e:	f241 0205 	movw	r2, #4101	; 0x1005
   b6612:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6616:	f7ff fa41 	bl	b5a9c <sock_setsockopt>
    if (ret < 0) {
   b661a:	2800      	cmp	r0, #0
   b661c:	da07      	bge.n	b662e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b661e:	f7ff fbe1 	bl	b5de4 <__errno>
   b6622:	6803      	ldr	r3, [r0, #0]
   b6624:	606b      	str	r3, [r5, #4]
        return 0;
   b6626:	2000      	movs	r0, #0
}
   b6628:	b006      	add	sp, #24
   b662a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b662e:	6968      	ldr	r0, [r5, #20]
   b6630:	2300      	movs	r3, #0
   b6632:	6800      	ldr	r0, [r0, #0]
   b6634:	463a      	mov	r2, r7
   b6636:	4631      	mov	r1, r6
   b6638:	f7ff fa50 	bl	b5adc <sock_send>
    if (ret < 0) {
   b663c:	1e03      	subs	r3, r0, #0
   b663e:	dbee      	blt.n	b661e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6640:	4618      	mov	r0, r3
   b6642:	e7f1      	b.n	b6628 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6644 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6644:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b6646:	6984      	ldr	r4, [r0, #24]
   b6648:	4b0a      	ldr	r3, [pc, #40]	; (b6674 <_ZN9TCPClientD1Ev+0x30>)
   b664a:	6003      	str	r3, [r0, #0]
   b664c:	4605      	mov	r5, r0
   b664e:	b17c      	cbz	r4, b6670 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b6650:	6863      	ldr	r3, [r4, #4]
   b6652:	3b01      	subs	r3, #1
   b6654:	6063      	str	r3, [r4, #4]
   b6656:	b95b      	cbnz	r3, b6670 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b6658:	6823      	ldr	r3, [r4, #0]
   b665a:	4620      	mov	r0, r4
   b665c:	689b      	ldr	r3, [r3, #8]
   b665e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6660:	68a3      	ldr	r3, [r4, #8]
   b6662:	3b01      	subs	r3, #1
   b6664:	60a3      	str	r3, [r4, #8]
   b6666:	b91b      	cbnz	r3, b6670 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b6668:	6823      	ldr	r3, [r4, #0]
   b666a:	4620      	mov	r0, r4
   b666c:	68db      	ldr	r3, [r3, #12]
   b666e:	4798      	blx	r3
   b6670:	4628      	mov	r0, r5
   b6672:	bd38      	pop	{r3, r4, r5, pc}
   b6674:	000b808c 	.word	0x000b808c

000b6678 <_ZN9TCPClientD0Ev>:
   b6678:	b510      	push	{r4, lr}
   b667a:	4604      	mov	r4, r0
   b667c:	f7ff ffe2 	bl	b6644 <_ZN9TCPClientD1Ev>
   b6680:	4620      	mov	r0, r4
   b6682:	211c      	movs	r1, #28
   b6684:	f7fd fd1b 	bl	b40be <_ZdlPvj>
   b6688:	4620      	mov	r0, r4
   b668a:	bd10      	pop	{r4, pc}

000b668c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b668c:	b530      	push	{r4, r5, lr}
   b668e:	b087      	sub	sp, #28
   b6690:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6692:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6694:	4668      	mov	r0, sp
   b6696:	f7ff fd13 	bl	b60c0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b669a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b669c:	3404      	adds	r4, #4
   b669e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b66a0:	682b      	ldr	r3, [r5, #0]
   b66a2:	7023      	strb	r3, [r4, #0]
    }
   b66a4:	b007      	add	sp, #28
   b66a6:	bd30      	pop	{r4, r5, pc}

000b66a8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b66a8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b66aa:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b66ac:	4b05      	ldr	r3, [pc, #20]	; (b66c4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b66ae:	4604      	mov	r4, r0
   b66b0:	358c      	adds	r5, #140	; 0x8c
   b66b2:	f844 3b04 	str.w	r3, [r4], #4
   b66b6:	4606      	mov	r6, r0
   b66b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b66ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b66bc:	682b      	ldr	r3, [r5, #0]
   b66be:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b66c0:	4630      	mov	r0, r6
   b66c2:	bd70      	pop	{r4, r5, r6, pc}
   b66c4:	000b7ffc 	.word	0x000b7ffc

000b66c8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b66c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b66cc:	4698      	mov	r8, r3
    stop();
   b66ce:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b66d0:	b093      	sub	sp, #76	; 0x4c
   b66d2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b66d4:	2400      	movs	r4, #0
    stop();
   b66d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b66d8:	4606      	mov	r6, r0
   b66da:	4617      	mov	r7, r2
    stop();
   b66dc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b66de:	4628      	mov	r0, r5
   b66e0:	466b      	mov	r3, sp
   b66e2:	4622      	mov	r2, r4
   b66e4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b66e6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b66e8:	f7ff f9d0 	bl	b5a8c <netdb_getaddrinfo>
   b66ec:	4605      	mov	r5, r0
   b66ee:	2800      	cmp	r0, #0
   b66f0:	d163      	bne.n	b67ba <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b66f2:	9b00      	ldr	r3, [sp, #0]
   b66f4:	2b00      	cmp	r3, #0
   b66f6:	d04b      	beq.n	b6790 <_ZN9TCPClient7connectEPKctm+0xc8>
   b66f8:	695b      	ldr	r3, [r3, #20]
   b66fa:	2b00      	cmp	r3, #0
   b66fc:	d048      	beq.n	b6790 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b66fe:	a806      	add	r0, sp, #24
   b6700:	f7ff fc9a 	bl	b6038 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6704:	9b00      	ldr	r3, [sp, #0]
   b6706:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6708:	7863      	ldrb	r3, [r4, #1]
   b670a:	2b02      	cmp	r3, #2
   b670c:	d104      	bne.n	b6718 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b670e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6710:	a806      	add	r0, sp, #24
   b6712:	f7ff ffbb 	bl	b668c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6716:	e026      	b.n	b6766 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6718:	2b0a      	cmp	r3, #10
   b671a:	d124      	bne.n	b6766 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b671c:	2211      	movs	r2, #17
   b671e:	4629      	mov	r1, r5
   b6720:	a801      	add	r0, sp, #4
   b6722:	f000 fdc1 	bl	b72a8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6726:	68a3      	ldr	r3, [r4, #8]
   b6728:	2b00      	cmp	r3, #0
   b672a:	d038      	beq.n	b679e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b672c:	f104 0308 	add.w	r3, r4, #8
   b6730:	f10d 0c04 	add.w	ip, sp, #4
   b6734:	3418      	adds	r4, #24
   b6736:	6818      	ldr	r0, [r3, #0]
   b6738:	6859      	ldr	r1, [r3, #4]
   b673a:	4662      	mov	r2, ip
   b673c:	c203      	stmia	r2!, {r0, r1}
   b673e:	3308      	adds	r3, #8
   b6740:	42a3      	cmp	r3, r4
   b6742:	4694      	mov	ip, r2
   b6744:	d1f7      	bne.n	b6736 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6746:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6748:	a901      	add	r1, sp, #4
   b674a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b674c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6750:	f7ff fc80 	bl	b6054 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6754:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6758:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b675c:	ac07      	add	r4, sp, #28
   b675e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6760:	f8dc 3000 	ldr.w	r3, [ip]
   b6764:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6766:	a806      	add	r0, sp, #24
   b6768:	f7ff fc86 	bl	b6078 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b676c:	b180      	cbz	r0, b6790 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b676e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6770:	ad07      	add	r5, sp, #28
   b6772:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6776:	4b12      	ldr	r3, [pc, #72]	; (b67c0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6778:	930c      	str	r3, [sp, #48]	; 0x30
   b677a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b677c:	ac0d      	add	r4, sp, #52	; 0x34
   b677e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6780:	682b      	ldr	r3, [r5, #0]
   b6782:	7023      	strb	r3, [r4, #0]
   b6784:	463a      	mov	r2, r7
   b6786:	4643      	mov	r3, r8
   b6788:	a90c      	add	r1, sp, #48	; 0x30
   b678a:	4630      	mov	r0, r6
   b678c:	47c8      	blx	r9
   b678e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6790:	9800      	ldr	r0, [sp, #0]
   b6792:	f7ff f973 	bl	b5a7c <netdb_freeaddrinfo>
}
   b6796:	4628      	mov	r0, r5
   b6798:	b013      	add	sp, #76	; 0x4c
   b679a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b679e:	68e3      	ldr	r3, [r4, #12]
   b67a0:	2b00      	cmp	r3, #0
   b67a2:	d1c3      	bne.n	b672c <_ZN9TCPClient7connectEPKctm+0x64>
   b67a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b67a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b67ac:	f7ff f956 	bl	b5a5c <inet_htonl>
   b67b0:	4581      	cmp	r9, r0
   b67b2:	d1bb      	bne.n	b672c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b67b4:	f104 0114 	add.w	r1, r4, #20
   b67b8:	e7aa      	b.n	b6710 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b67ba:	4625      	mov	r5, r4
   b67bc:	e7e8      	b.n	b6790 <_ZN9TCPClient7connectEPKctm+0xc8>
   b67be:	bf00      	nop
   b67c0:	000b7ffc 	.word	0x000b7ffc

000b67c4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b67c4:	b538      	push	{r3, r4, r5, lr}
   b67c6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b67c8:	681a      	ldr	r2, [r3, #0]
   b67ca:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b67cc:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b67ce:	da10      	bge.n	b67f2 <_ZN9TCPClient9connectedEv+0x2e>
   b67d0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b67d4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b67d8:	429a      	cmp	r2, r3
   b67da:	d10a      	bne.n	b67f2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b67dc:	6803      	ldr	r3, [r0, #0]
   b67de:	691b      	ldr	r3, [r3, #16]
   b67e0:	4798      	blx	r3
        if (!rv) {
   b67e2:	4604      	mov	r4, r0
   b67e4:	b928      	cbnz	r0, b67f2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b67e6:	682b      	ldr	r3, [r5, #0]
   b67e8:	4628      	mov	r0, r5
   b67ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b67ec:	4798      	blx	r3
        rv = available();
   b67ee:	4620      	mov	r0, r4
}
   b67f0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b67f2:	2001      	movs	r0, #1
   b67f4:	e7fc      	b.n	b67f0 <_ZN9TCPClient9connectedEv+0x2c>

000b67f6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b67f6:	b510      	push	{r4, lr}
   b67f8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b67fa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b67fe:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6802:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6804:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6806:	d005      	beq.n	b6814 <_ZN9TCPClient4peekEv+0x1e>
   b6808:	6963      	ldr	r3, [r4, #20]
   b680a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b680e:	4413      	add	r3, r2
   b6810:	7918      	ldrb	r0, [r3, #4]
}
   b6812:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6814:	6803      	ldr	r3, [r0, #0]
   b6816:	691b      	ldr	r3, [r3, #16]
   b6818:	4798      	blx	r3
   b681a:	2800      	cmp	r0, #0
   b681c:	d1f4      	bne.n	b6808 <_ZN9TCPClient4peekEv+0x12>
   b681e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6822:	e7f6      	b.n	b6812 <_ZN9TCPClient4peekEv+0x1c>

000b6824 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6826:	6943      	ldr	r3, [r0, #20]
   b6828:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b682a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b682e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6832:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6834:	4605      	mov	r5, r0
   b6836:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6838:	d016      	beq.n	b6868 <_ZN9TCPClient4readEPhj+0x44>
   b683a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b683c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6840:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6844:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6846:	42bc      	cmp	r4, r7
   b6848:	bf28      	it	cs
   b684a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b684c:	3304      	adds	r3, #4
   b684e:	4622      	mov	r2, r4
   b6850:	4419      	add	r1, r3
   b6852:	4630      	mov	r0, r6
   b6854:	f000 fd1a 	bl	b728c <memcpy>
   b6858:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b685a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b685e:	4423      	add	r3, r4
   b6860:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6864:	4620      	mov	r0, r4
   b6866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6868:	6803      	ldr	r3, [r0, #0]
   b686a:	691b      	ldr	r3, [r3, #16]
   b686c:	4798      	blx	r3
   b686e:	2800      	cmp	r0, #0
   b6870:	d1e3      	bne.n	b683a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b6872:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b6876:	e7f5      	b.n	b6864 <_ZN9TCPClient4readEPhj+0x40>

000b6878 <_ZN9TCPClient12flush_bufferEv>:
   b6878:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b687a:	2300      	movs	r3, #0
   b687c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6880:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b6882:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b6886:	4770      	bx	lr

000b6888 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b688c:	461f      	mov	r7, r3
    stop();
   b688e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6890:	460c      	mov	r4, r1
    stop();
   b6892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6894:	b08a      	sub	sp, #40	; 0x28
   b6896:	4605      	mov	r5, r0
   b6898:	4616      	mov	r6, r2
    stop();
   b689a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b689c:	7d23      	ldrb	r3, [r4, #20]
   b689e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b68a2:	2b04      	cmp	r3, #4
   b68a4:	bf0c      	ite	eq
   b68a6:	2002      	moveq	r0, #2
   b68a8:	200a      	movne	r0, #10
   b68aa:	2206      	movs	r2, #6
   b68ac:	2101      	movs	r1, #1
   b68ae:	f7ff f91d 	bl	b5aec <sock_socket>
   b68b2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b68b6:	696b      	ldr	r3, [r5, #20]
   b68b8:	681b      	ldr	r3, [r3, #0]
   b68ba:	2b00      	cmp	r3, #0
   b68bc:	da08      	bge.n	b68d0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b68be:	682b      	ldr	r3, [r5, #0]
   b68c0:	4628      	mov	r0, r5
   b68c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b68c4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b68c6:	4798      	blx	r3
}
   b68c8:	4620      	mov	r0, r4
   b68ca:	b00a      	add	sp, #40	; 0x28
   b68cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b68d0:	4628      	mov	r0, r5
   b68d2:	f7ff ffd1 	bl	b6878 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b68d6:	b1b7      	cbz	r7, b6906 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b68d8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b68da:	a903      	add	r1, sp, #12
   b68dc:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b68de:	9303      	str	r3, [sp, #12]
   b68e0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b68e4:	f7ff f8aa 	bl	b5a3c <if_index_to_name>
   b68e8:	2800      	cmp	r0, #0
   b68ea:	d1e8      	bne.n	b68be <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b68ec:	6968      	ldr	r0, [r5, #20]
   b68ee:	2306      	movs	r3, #6
   b68f0:	9300      	str	r3, [sp, #0]
   b68f2:	6800      	ldr	r0, [r0, #0]
   b68f4:	ab03      	add	r3, sp, #12
   b68f6:	f241 020b 	movw	r2, #4107	; 0x100b
   b68fa:	f640 71ff 	movw	r1, #4095	; 0xfff
   b68fe:	f7ff f8cd 	bl	b5a9c <sock_setsockopt>
   b6902:	2800      	cmp	r0, #0
   b6904:	d1db      	bne.n	b68be <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b6906:	221c      	movs	r2, #28
   b6908:	2100      	movs	r1, #0
   b690a:	a803      	add	r0, sp, #12
   b690c:	f000 fccc 	bl	b72a8 <memset>
    if (ip.version() == 4) {
   b6910:	7d23      	ldrb	r3, [r4, #20]
   b6912:	2b04      	cmp	r3, #4
   b6914:	d11d      	bne.n	b6952 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b6916:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b691a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b691c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6920:	f7ff f8a4 	bl	b5a6c <inet_htons>
   b6924:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6928:	6860      	ldr	r0, [r4, #4]
   b692a:	f7ff f897 	bl	b5a5c <inet_htonl>
   b692e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6930:	696b      	ldr	r3, [r5, #20]
   b6932:	221c      	movs	r2, #28
   b6934:	6818      	ldr	r0, [r3, #0]
   b6936:	a903      	add	r1, sp, #12
   b6938:	f7ff f8c0 	bl	b5abc <sock_connect>
   b693c:	2800      	cmp	r0, #0
   b693e:	d1be      	bne.n	b68be <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6940:	3404      	adds	r4, #4
   b6942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6944:	696d      	ldr	r5, [r5, #20]
   b6946:	358c      	adds	r5, #140	; 0x8c
   b6948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b694a:	6823      	ldr	r3, [r4, #0]
   b694c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b694e:	2401      	movs	r4, #1
   b6950:	e7ba      	b.n	b68c8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6952:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6956:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6958:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b695c:	f7ff f886 	bl	b5a6c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6960:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6962:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6966:	1d23      	adds	r3, r4, #4
   b6968:	f104 0714 	add.w	r7, r4, #20
   b696c:	6818      	ldr	r0, [r3, #0]
   b696e:	6859      	ldr	r1, [r3, #4]
   b6970:	4632      	mov	r2, r6
   b6972:	c203      	stmia	r2!, {r0, r1}
   b6974:	3308      	adds	r3, #8
   b6976:	42bb      	cmp	r3, r7
   b6978:	4616      	mov	r6, r2
   b697a:	d1f7      	bne.n	b696c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b697c:	e7d8      	b.n	b6930 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6980 <_ZN9TCPClient9availableEv>:
{
   b6980:	b530      	push	{r4, r5, lr}
   b6982:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6984:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6988:	b08b      	sub	sp, #44	; 0x2c
   b698a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b698c:	b12b      	cbz	r3, b699a <_ZN9TCPClient9availableEv+0x1a>
   b698e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b6992:	429a      	cmp	r2, r3
   b6994:	d101      	bne.n	b699a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b6996:	f7ff ff6f 	bl	b6878 <_ZN9TCPClient12flush_bufferEv>
   b699a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b699c:	6808      	ldr	r0, [r1, #0]
   b699e:	2800      	cmp	r0, #0
   b69a0:	db18      	blt.n	b69d4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b69a2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b69a6:	2d7f      	cmp	r5, #127	; 0x7f
   b69a8:	d814      	bhi.n	b69d4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b69aa:	3104      	adds	r1, #4
   b69ac:	2308      	movs	r3, #8
   b69ae:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b69b2:	4429      	add	r1, r5
   b69b4:	f7ff f88a 	bl	b5acc <sock_recv>
            if (ret > 0) {
   b69b8:	2800      	cmp	r0, #0
   b69ba:	dd13      	ble.n	b69e4 <_ZN9TCPClient9availableEv+0x64>
   b69bc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b69be:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b69c2:	b90a      	cbnz	r2, b69c8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b69c4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b69c8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b69ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b69ce:	4410      	add	r0, r2
   b69d0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b69d4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b69d6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b69da:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b69de:	1ac0      	subs	r0, r0, r3
   b69e0:	b00b      	add	sp, #44	; 0x2c
   b69e2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b69e4:	f7ff f9fe 	bl	b5de4 <__errno>
   b69e8:	6803      	ldr	r3, [r0, #0]
   b69ea:	2b0b      	cmp	r3, #11
   b69ec:	d0f2      	beq.n	b69d4 <_ZN9TCPClient9availableEv+0x54>
   b69ee:	f7ff f9f9 	bl	b5de4 <__errno>
   b69f2:	6803      	ldr	r3, [r0, #0]
   b69f4:	2b0b      	cmp	r3, #11
   b69f6:	d0ed      	beq.n	b69d4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b69f8:	2320      	movs	r3, #32
   b69fa:	2500      	movs	r5, #0
   b69fc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6a00:	f7ff f9f0 	bl	b5de4 <__errno>
   b6a04:	6803      	ldr	r3, [r0, #0]
   b6a06:	9301      	str	r3, [sp, #4]
   b6a08:	4b08      	ldr	r3, [pc, #32]	; (b6a2c <_ZN9TCPClient9availableEv+0xac>)
   b6a0a:	4909      	ldr	r1, [pc, #36]	; (b6a30 <_ZN9TCPClient9availableEv+0xb0>)
   b6a0c:	9300      	str	r3, [sp, #0]
   b6a0e:	aa02      	add	r2, sp, #8
   b6a10:	462b      	mov	r3, r5
   b6a12:	2032      	movs	r0, #50	; 0x32
   b6a14:	f7ff f932 	bl	b5c7c <log_message>
                    sock_close(d_->sock);
   b6a18:	6963      	ldr	r3, [r4, #20]
   b6a1a:	6818      	ldr	r0, [r3, #0]
   b6a1c:	f7ff f846 	bl	b5aac <sock_close>
   b6a20:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6a26:	601a      	str	r2, [r3, #0]
   b6a28:	e7d4      	b.n	b69d4 <_ZN9TCPClient9availableEv+0x54>
   b6a2a:	bf00      	nop
   b6a2c:	000b8057 	.word	0x000b8057
   b6a30:	000b8050 	.word	0x000b8050

000b6a34 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6a34:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6a36:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6a38:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6a3a:	6818      	ldr	r0, [r3, #0]
   b6a3c:	2800      	cmp	r0, #0
   b6a3e:	db01      	blt.n	b6a44 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6a40:	f7ff f834 	bl	b5aac <sock_close>
   b6a44:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6a46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6a4a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6a4c:	6960      	ldr	r0, [r4, #20]
   b6a4e:	2211      	movs	r2, #17
   b6a50:	2100      	movs	r1, #0
   b6a52:	308c      	adds	r0, #140	; 0x8c
   b6a54:	f000 fc28 	bl	b72a8 <memset>
    flush_buffer();
   b6a58:	4620      	mov	r0, r4
}
   b6a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6a5e:	f7ff bf0b 	b.w	b6878 <_ZN9TCPClient12flush_bufferEv>

000b6a62 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6a62:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6a64:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6a66:	4604      	mov	r4, r0
          total(0) {
   b6a68:	6001      	str	r1, [r0, #0]
   b6a6a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6a6e:	3088      	adds	r0, #136	; 0x88
   b6a70:	f7ff fae2 	bl	b6038 <_ZN9IPAddressC1Ev>
}
   b6a74:	4620      	mov	r0, r4
   b6a76:	bd10      	pop	{r4, pc}

000b6a78 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6a7a:	2300      	movs	r3, #0
   b6a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6a80:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6a84:	4a0e      	ldr	r2, [pc, #56]	; (b6ac0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6a86:	6103      	str	r3, [r0, #16]
   b6a88:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6a8a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6a8c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6a8e:	20ac      	movs	r0, #172	; 0xac
   b6a90:	9101      	str	r1, [sp, #4]
   b6a92:	f7fd fb10 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b6a96:	1e05      	subs	r5, r0, #0
   b6a98:	f105 060c 	add.w	r6, r5, #12
   b6a9c:	d008      	beq.n	b6ab0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6a9e:	2301      	movs	r3, #1
   b6aa0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6aa4:	4b07      	ldr	r3, [pc, #28]	; (b6ac4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6aa6:	9901      	ldr	r1, [sp, #4]
   b6aa8:	602b      	str	r3, [r5, #0]
   b6aaa:	4630      	mov	r0, r6
   b6aac:	f7ff ffd9 	bl	b6a62 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6ab0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6ab2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6ab6:	f7ff fedf 	bl	b6878 <_ZN9TCPClient12flush_bufferEv>
}
   b6aba:	b002      	add	sp, #8
   b6abc:	bd70      	pop	{r4, r5, r6, pc}
   b6abe:	bf00      	nop
   b6ac0:	000b808c 	.word	0x000b808c
   b6ac4:	000b8070 	.word	0x000b8070

000b6ac8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6ac8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6aca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b6ace:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6ad0:	f7ff ffd2 	bl	b6a78 <_ZN9TCPClientC1Ei>
}
   b6ad4:	4620      	mov	r0, r4
   b6ad6:	bd10      	pop	{r4, pc}

000b6ad8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6ad8:	b510      	push	{r4, lr}
   b6ada:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6adc:	6800      	ldr	r0, [r0, #0]
   b6ade:	2800      	cmp	r0, #0
   b6ae0:	db01      	blt.n	b6ae6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6ae2:	f7fe ffe3 	bl	b5aac <sock_close>
    }
}
   b6ae6:	4620      	mov	r0, r4
   b6ae8:	bd10      	pop	{r4, pc}

000b6aea <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6aea:	300c      	adds	r0, #12
   b6aec:	f7ff bff4 	b.w	b6ad8 <_ZN9TCPClient4DataD1Ev>

000b6af0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6af0:	4b02      	ldr	r3, [pc, #8]	; (b6afc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6af2:	681a      	ldr	r2, [r3, #0]
   b6af4:	4b02      	ldr	r3, [pc, #8]	; (b6b00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6af6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6af8:	4770      	bx	lr
   b6afa:	bf00      	nop
   b6afc:	2003e574 	.word	0x2003e574
   b6b00:	2003e6fc 	.word	0x2003e6fc

000b6b04 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6b04:	4770      	bx	lr

000b6b06 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6b06:	7441      	strb	r1, [r0, #17]
}
   b6b08:	4770      	bx	lr

000b6b0a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6b0a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6b0c:	7c00      	ldrb	r0, [r0, #16]
   b6b0e:	f7ff f865 	bl	b5bdc <hal_usart_available_data_for_write>
}
   b6b12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6b16:	bd08      	pop	{r3, pc}

000b6b18 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6b18:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6b1a:	7c00      	ldrb	r0, [r0, #16]
   b6b1c:	f7ff f836 	bl	b5b8c <hal_usart_available>
}
   b6b20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6b24:	bd08      	pop	{r3, pc}

000b6b26 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6b26:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6b28:	7c00      	ldrb	r0, [r0, #16]
   b6b2a:	f7ff f83f 	bl	b5bac <hal_usart_peek>
}
   b6b2e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6b32:	bd08      	pop	{r3, pc}

000b6b34 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6b34:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6b36:	7c00      	ldrb	r0, [r0, #16]
   b6b38:	f7ff f830 	bl	b5b9c <hal_usart_read>
}
   b6b3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6b40:	bd08      	pop	{r3, pc}

000b6b42 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6b42:	7c00      	ldrb	r0, [r0, #16]
   b6b44:	f7ff b83a 	b.w	b5bbc <hal_usart_flush>

000b6b48 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6b4a:	7c45      	ldrb	r5, [r0, #17]
{
   b6b4c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6b4e:	b12d      	cbz	r5, b6b5c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6b50:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6b52:	b003      	add	sp, #12
   b6b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6b58:	f7ff b810 	b.w	b5b7c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6b5c:	7c00      	ldrb	r0, [r0, #16]
   b6b5e:	9101      	str	r1, [sp, #4]
   b6b60:	f7ff f83c 	bl	b5bdc <hal_usart_available_data_for_write>
   b6b64:	2800      	cmp	r0, #0
   b6b66:	9901      	ldr	r1, [sp, #4]
   b6b68:	dcf2      	bgt.n	b6b50 <_ZN11USARTSerial5writeEh+0x8>
}
   b6b6a:	4628      	mov	r0, r5
   b6b6c:	b003      	add	sp, #12
   b6b6e:	bd30      	pop	{r4, r5, pc}

000b6b70 <_ZN11USARTSerialD0Ev>:
   b6b70:	b510      	push	{r4, lr}
   b6b72:	2114      	movs	r1, #20
   b6b74:	4604      	mov	r4, r0
   b6b76:	f7fd faa2 	bl	b40be <_ZdlPvj>
   b6b7a:	4620      	mov	r0, r4
   b6b7c:	bd10      	pop	{r4, pc}
	...

000b6b80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6b80:	b510      	push	{r4, lr}
   b6b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6b86:	4604      	mov	r4, r0
   b6b88:	4608      	mov	r0, r1
   b6b8a:	4611      	mov	r1, r2
   b6b8c:	2200      	movs	r2, #0
   b6b8e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6b92:	4b04      	ldr	r3, [pc, #16]	; (b6ba4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6b94:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6b96:	2301      	movs	r3, #1
  _serial = serial;
   b6b98:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6b9a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6b9c:	f7ff f826 	bl	b5bec <hal_usart_init_ex>
}
   b6ba0:	4620      	mov	r0, r4
   b6ba2:	bd10      	pop	{r4, pc}
   b6ba4:	000b80f4 	.word	0x000b80f4

000b6ba8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6ba8:	7441      	strb	r1, [r0, #17]
}
   b6baa:	4770      	bx	lr

000b6bac <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6bac:	4770      	bx	lr

000b6bae <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6bae:	4770      	bx	lr

000b6bb0 <_ZN9USBSerial4readEv>:
{
   b6bb0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6bb2:	2100      	movs	r1, #0
   b6bb4:	7c00      	ldrb	r0, [r0, #16]
   b6bb6:	f7ff f841 	bl	b5c3c <HAL_USB_USART_Receive_Data>
}
   b6bba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6bbe:	bd08      	pop	{r3, pc}

000b6bc0 <_ZN9USBSerial4peekEv>:
{
   b6bc0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6bc2:	2101      	movs	r1, #1
   b6bc4:	7c00      	ldrb	r0, [r0, #16]
   b6bc6:	f7ff f839 	bl	b5c3c <HAL_USB_USART_Receive_Data>
}
   b6bca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6bce:	bd08      	pop	{r3, pc}

000b6bd0 <_ZN9USBSerial17availableForWriteEv>:
{
   b6bd0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6bd2:	7c00      	ldrb	r0, [r0, #16]
   b6bd4:	f7ff f82a 	bl	b5c2c <HAL_USB_USART_Available_Data_For_Write>
}
   b6bd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6bdc:	bd08      	pop	{r3, pc}

000b6bde <_ZN9USBSerial9availableEv>:
{
   b6bde:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6be0:	7c00      	ldrb	r0, [r0, #16]
   b6be2:	f7ff f81b 	bl	b5c1c <HAL_USB_USART_Available_Data>
}
   b6be6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6bea:	bd08      	pop	{r3, pc}

000b6bec <_ZN9USBSerial5writeEh>:
{
   b6bec:	b513      	push	{r0, r1, r4, lr}
   b6bee:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6bf0:	7c00      	ldrb	r0, [r0, #16]
{
   b6bf2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6bf4:	f7ff f81a 	bl	b5c2c <HAL_USB_USART_Available_Data_For_Write>
   b6bf8:	2800      	cmp	r0, #0
   b6bfa:	9901      	ldr	r1, [sp, #4]
   b6bfc:	dc01      	bgt.n	b6c02 <_ZN9USBSerial5writeEh+0x16>
   b6bfe:	7c60      	ldrb	r0, [r4, #17]
   b6c00:	b120      	cbz	r0, b6c0c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6c02:	7c20      	ldrb	r0, [r4, #16]
   b6c04:	f7ff f822 	bl	b5c4c <HAL_USB_USART_Send_Data>
   b6c08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6c0c:	b002      	add	sp, #8
   b6c0e:	bd10      	pop	{r4, pc}

000b6c10 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6c10:	7c00      	ldrb	r0, [r0, #16]
   b6c12:	f7ff b823 	b.w	b5c5c <HAL_USB_USART_Flush_Data>

000b6c16 <_ZN9USBSerialD0Ev>:
   b6c16:	b510      	push	{r4, lr}
   b6c18:	2114      	movs	r1, #20
   b6c1a:	4604      	mov	r4, r0
   b6c1c:	f7fd fa4f 	bl	b40be <_ZdlPvj>
   b6c20:	4620      	mov	r0, r4
   b6c22:	bd10      	pop	{r4, pc}

000b6c24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6c24:	b510      	push	{r4, lr}
   b6c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6c2a:	4604      	mov	r4, r0
   b6c2c:	4608      	mov	r0, r1
   b6c2e:	2100      	movs	r1, #0
   b6c30:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6c34:	4b04      	ldr	r3, [pc, #16]	; (b6c48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6c36:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6c38:	2301      	movs	r3, #1
  _serial = serial;
   b6c3a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6c3c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6c3e:	4611      	mov	r1, r2
   b6c40:	f7fe ffdc 	bl	b5bfc <HAL_USB_USART_Init>
}
   b6c44:	4620      	mov	r0, r4
   b6c46:	bd10      	pop	{r4, pc}
   b6c48:	000b8124 	.word	0x000b8124

000b6c4c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6c4c:	7c00      	ldrb	r0, [r0, #16]
   b6c4e:	2200      	movs	r2, #0
   b6c50:	f7fe bfdc 	b.w	b5c0c <HAL_USB_USART_Begin>

000b6c54 <_Z19acquireSerialBufferv>:
{
   b6c54:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6c56:	2214      	movs	r2, #20
{
   b6c58:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6c5a:	2100      	movs	r1, #0
   b6c5c:	f000 fb24 	bl	b72a8 <memset>
}
   b6c60:	4620      	mov	r0, r4
   b6c62:	bd10      	pop	{r4, pc}

000b6c64 <_Z16_fetch_usbserialv>:
{
   b6c64:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6c66:	4c0f      	ldr	r4, [pc, #60]	; (b6ca4 <_Z16_fetch_usbserialv+0x40>)
{
   b6c68:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6c6a:	a803      	add	r0, sp, #12
   b6c6c:	f7ff fff2 	bl	b6c54 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6c70:	7821      	ldrb	r1, [r4, #0]
   b6c72:	f3bf 8f5b 	dmb	ish
   b6c76:	f011 0101 	ands.w	r1, r1, #1
   b6c7a:	d10f      	bne.n	b6c9c <_Z16_fetch_usbserialv+0x38>
   b6c7c:	4620      	mov	r0, r4
   b6c7e:	9101      	str	r1, [sp, #4]
   b6c80:	f7fd fa2c 	bl	b40dc <__cxa_guard_acquire>
   b6c84:	9901      	ldr	r1, [sp, #4]
   b6c86:	b148      	cbz	r0, b6c9c <_Z16_fetch_usbserialv+0x38>
   b6c88:	aa03      	add	r2, sp, #12
   b6c8a:	4807      	ldr	r0, [pc, #28]	; (b6ca8 <_Z16_fetch_usbserialv+0x44>)
   b6c8c:	f7ff ffca 	bl	b6c24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6c90:	4620      	mov	r0, r4
   b6c92:	f7fd fa28 	bl	b40e6 <__cxa_guard_release>
   b6c96:	4805      	ldr	r0, [pc, #20]	; (b6cac <_Z16_fetch_usbserialv+0x48>)
   b6c98:	f000 faf2 	bl	b7280 <atexit>
	return _usbserial;
}
   b6c9c:	4802      	ldr	r0, [pc, #8]	; (b6ca8 <_Z16_fetch_usbserialv+0x44>)
   b6c9e:	b008      	add	sp, #32
   b6ca0:	bd10      	pop	{r4, pc}
   b6ca2:	bf00      	nop
   b6ca4:	2003e700 	.word	0x2003e700
   b6ca8:	2003e704 	.word	0x2003e704
   b6cac:	000b6bad 	.word	0x000b6bad

000b6cb0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6cb0:	2200      	movs	r2, #0
   b6cb2:	6840      	ldr	r0, [r0, #4]
   b6cb4:	4611      	mov	r1, r2
   b6cb6:	f7ff b835 	b.w	b5d24 <network_ready>

000b6cba <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6cba:	2200      	movs	r2, #0
   b6cbc:	6840      	ldr	r0, [r0, #4]
   b6cbe:	4611      	mov	r1, r2
   b6cc0:	f7ff b850 	b.w	b5d64 <network_listening>

000b6cc4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6cc4:	2200      	movs	r2, #0
   b6cc6:	6840      	ldr	r0, [r0, #4]
   b6cc8:	4611      	mov	r1, r2
   b6cca:	f7ff b85b 	b.w	b5d84 <network_get_listen_timeout>

000b6cce <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6cce:	6840      	ldr	r0, [r0, #4]
   b6cd0:	2200      	movs	r2, #0
   b6cd2:	f7ff b84f 	b.w	b5d74 <network_set_listen_timeout>

000b6cd6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6cd6:	6840      	ldr	r0, [r0, #4]
   b6cd8:	2200      	movs	r2, #0
   b6cda:	f081 0101 	eor.w	r1, r1, #1
   b6cde:	f7ff b839 	b.w	b5d54 <network_listen>

000b6ce2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6ce2:	2300      	movs	r3, #0
   b6ce4:	6840      	ldr	r0, [r0, #4]
   b6ce6:	461a      	mov	r2, r3
   b6ce8:	4619      	mov	r1, r3
   b6cea:	f7ff b82b 	b.w	b5d44 <network_off>

000b6cee <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6cee:	2300      	movs	r3, #0
   b6cf0:	6840      	ldr	r0, [r0, #4]
   b6cf2:	461a      	mov	r2, r3
   b6cf4:	4619      	mov	r1, r3
   b6cf6:	f7ff b81d 	b.w	b5d34 <network_on>

000b6cfa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6cfa:	2200      	movs	r2, #0
   b6cfc:	6840      	ldr	r0, [r0, #4]
   b6cfe:	4611      	mov	r1, r2
   b6d00:	f7ff b800 	b.w	b5d04 <network_connecting>

000b6d04 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6d04:	6840      	ldr	r0, [r0, #4]
   b6d06:	2200      	movs	r2, #0
   b6d08:	2102      	movs	r1, #2
   b6d0a:	f7ff b803 	b.w	b5d14 <network_disconnect>

000b6d0e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6d0e:	2300      	movs	r3, #0
   b6d10:	6840      	ldr	r0, [r0, #4]
   b6d12:	461a      	mov	r2, r3
   b6d14:	f7fe bfee 	b.w	b5cf4 <network_connect>

000b6d18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6d18:	4b02      	ldr	r3, [pc, #8]	; (b6d24 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6d1a:	2204      	movs	r2, #4
   b6d1c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6d1e:	4a02      	ldr	r2, [pc, #8]	; (b6d28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6d20:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6d22:	4770      	bx	lr
   b6d24:	2003e718 	.word	0x2003e718
   b6d28:	000b8154 	.word	0x000b8154

000b6d2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6d2c:	4b01      	ldr	r3, [pc, #4]	; (b6d34 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6d2e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6d30:	4770      	bx	lr
   b6d32:	bf00      	nop
   b6d34:	2003e578 	.word	0x2003e578

000b6d38 <serialEventRun>:
{
   b6d38:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6d3a:	4b0b      	ldr	r3, [pc, #44]	; (b6d68 <serialEventRun+0x30>)
   b6d3c:	b143      	cbz	r3, b6d50 <serialEventRun+0x18>
   b6d3e:	f7ff ff91 	bl	b6c64 <_Z16_fetch_usbserialv>
   b6d42:	6803      	ldr	r3, [r0, #0]
   b6d44:	691b      	ldr	r3, [r3, #16]
   b6d46:	4798      	blx	r3
   b6d48:	2800      	cmp	r0, #0
   b6d4a:	dd01      	ble.n	b6d50 <serialEventRun+0x18>
        serialEvent();
   b6d4c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6d50:	4b06      	ldr	r3, [pc, #24]	; (b6d6c <serialEventRun+0x34>)
   b6d52:	b143      	cbz	r3, b6d66 <serialEventRun+0x2e>
   b6d54:	f000 f95c 	bl	b7010 <_Z22__fetch_global_Serial1v>
   b6d58:	6803      	ldr	r3, [r0, #0]
   b6d5a:	691b      	ldr	r3, [r3, #16]
   b6d5c:	4798      	blx	r3
   b6d5e:	2800      	cmp	r0, #0
   b6d60:	dd01      	ble.n	b6d66 <serialEventRun+0x2e>
        serialEvent1();
   b6d62:	f3af 8000 	nop.w
}
   b6d66:	bd08      	pop	{r3, pc}
	...

000b6d70 <_post_loop>:
{
   b6d70:	b508      	push	{r3, lr}
	serialEventRun();
   b6d72:	f7ff ffe1 	bl	b6d38 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6d76:	f7fe fdd9 	bl	b592c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6d7a:	4b01      	ldr	r3, [pc, #4]	; (b6d80 <_post_loop+0x10>)
   b6d7c:	6018      	str	r0, [r3, #0]
}
   b6d7e:	bd08      	pop	{r3, pc}
   b6d80:	2003e728 	.word	0x2003e728

000b6d84 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6d84:	4805      	ldr	r0, [pc, #20]	; (b6d9c <_Z33system_initialize_user_backup_ramv+0x18>)
   b6d86:	4a06      	ldr	r2, [pc, #24]	; (b6da0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6d88:	4906      	ldr	r1, [pc, #24]	; (b6da4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6d8a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6d8c:	1a12      	subs	r2, r2, r0
   b6d8e:	f000 fa7d 	bl	b728c <memcpy>
    __backup_sram_signature = signature;
   b6d92:	4b05      	ldr	r3, [pc, #20]	; (b6da8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6d94:	4a05      	ldr	r2, [pc, #20]	; (b6dac <_Z33system_initialize_user_backup_ramv+0x28>)
   b6d96:	601a      	str	r2, [r3, #0]
}
   b6d98:	bd08      	pop	{r3, pc}
   b6d9a:	bf00      	nop
   b6d9c:	2003f400 	.word	0x2003f400
   b6da0:	2003f404 	.word	0x2003f404
   b6da4:	000b83a4 	.word	0x000b83a4
   b6da8:	2003f400 	.word	0x2003f400
   b6dac:	9a271c1e 	.word	0x9a271c1e

000b6db0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6db0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6db2:	2300      	movs	r3, #0
   b6db4:	9300      	str	r3, [sp, #0]
   b6db6:	461a      	mov	r2, r3
   b6db8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6dbc:	f7fe ff88 	bl	b5cd0 <system_ctrl_set_result>
}
   b6dc0:	b003      	add	sp, #12
   b6dc2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6dc8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6dc8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6dca:	8843      	ldrh	r3, [r0, #2]
   b6dcc:	2b0a      	cmp	r3, #10
   b6dce:	d008      	beq.n	b6de2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6dd0:	2b50      	cmp	r3, #80	; 0x50
   b6dd2:	d10b      	bne.n	b6dec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6dd4:	4b09      	ldr	r3, [pc, #36]	; (b6dfc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6dd6:	681b      	ldr	r3, [r3, #0]
   b6dd8:	b14b      	cbz	r3, b6dee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6dda:	b003      	add	sp, #12
   b6ddc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6de0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6de2:	f7ff ffe5 	bl	b6db0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6de6:	b003      	add	sp, #12
   b6de8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6dec:	2300      	movs	r3, #0
   b6dee:	9300      	str	r3, [sp, #0]
   b6df0:	461a      	mov	r2, r3
   b6df2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6df6:	f7fe ff6b 	bl	b5cd0 <system_ctrl_set_result>
}
   b6dfa:	e7f4      	b.n	b6de6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6dfc:	2003e724 	.word	0x2003e724

000b6e00 <module_user_init_hook>:
{
   b6e00:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6e02:	4812      	ldr	r0, [pc, #72]	; (b6e4c <module_user_init_hook+0x4c>)
   b6e04:	2100      	movs	r1, #0
   b6e06:	f7fe fffd 	bl	b5e04 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6e0a:	4b11      	ldr	r3, [pc, #68]	; (b6e50 <module_user_init_hook+0x50>)
   b6e0c:	681a      	ldr	r2, [r3, #0]
   b6e0e:	4b11      	ldr	r3, [pc, #68]	; (b6e54 <module_user_init_hook+0x54>)
   b6e10:	429a      	cmp	r2, r3
   b6e12:	4b11      	ldr	r3, [pc, #68]	; (b6e58 <module_user_init_hook+0x58>)
   b6e14:	bf0c      	ite	eq
   b6e16:	2201      	moveq	r2, #1
   b6e18:	2200      	movne	r2, #0
   b6e1a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6e1c:	d001      	beq.n	b6e22 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6e1e:	f7ff ffb1 	bl	b6d84 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6e22:	f7fe fd73 	bl	b590c <HAL_RNG_GetRandomNumber>
   b6e26:	4604      	mov	r4, r0
    srand(seed);
   b6e28:	f000 fa46 	bl	b72b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6e2c:	4b0b      	ldr	r3, [pc, #44]	; (b6e5c <module_user_init_hook+0x5c>)
   b6e2e:	b113      	cbz	r3, b6e36 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6e30:	4620      	mov	r0, r4
   b6e32:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6e36:	2100      	movs	r1, #0
   b6e38:	4808      	ldr	r0, [pc, #32]	; (b6e5c <module_user_init_hook+0x5c>)
   b6e3a:	f7fe ff53 	bl	b5ce4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6e42:	4807      	ldr	r0, [pc, #28]	; (b6e60 <module_user_init_hook+0x60>)
   b6e44:	2100      	movs	r1, #0
   b6e46:	f7fe bf39 	b.w	b5cbc <system_ctrl_set_app_request_handler>
   b6e4a:	bf00      	nop
   b6e4c:	000b6d2d 	.word	0x000b6d2d
   b6e50:	2003f400 	.word	0x2003f400
   b6e54:	9a271c1e 	.word	0x9a271c1e
   b6e58:	2003e720 	.word	0x2003e720
   b6e5c:	00000000 	.word	0x00000000
   b6e60:	000b6dc9 	.word	0x000b6dc9

000b6e64 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6e64:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6e66:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6e68:	d902      	bls.n	b6e70 <pinAvailable+0xc>
    return false;
   b6e6a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6e6c:	b002      	add	sp, #8
   b6e6e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6e70:	f1a0 030b 	sub.w	r3, r0, #11
   b6e74:	2b02      	cmp	r3, #2
   b6e76:	d81a      	bhi.n	b6eae <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6e78:	4c17      	ldr	r4, [pc, #92]	; (b6ed8 <pinAvailable+0x74>)
   b6e7a:	7821      	ldrb	r1, [r4, #0]
   b6e7c:	f3bf 8f5b 	dmb	ish
   b6e80:	f011 0101 	ands.w	r1, r1, #1
   b6e84:	d10b      	bne.n	b6e9e <pinAvailable+0x3a>
   b6e86:	4620      	mov	r0, r4
   b6e88:	9101      	str	r1, [sp, #4]
   b6e8a:	f7fd f927 	bl	b40dc <__cxa_guard_acquire>
   b6e8e:	9901      	ldr	r1, [sp, #4]
   b6e90:	b128      	cbz	r0, b6e9e <pinAvailable+0x3a>
   b6e92:	4812      	ldr	r0, [pc, #72]	; (b6edc <pinAvailable+0x78>)
   b6e94:	f7ff fa7e 	bl	b6394 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6e98:	4620      	mov	r0, r4
   b6e9a:	f7fd f924 	bl	b40e6 <__cxa_guard_release>
   b6e9e:	4b0f      	ldr	r3, [pc, #60]	; (b6edc <pinAvailable+0x78>)
   b6ea0:	7818      	ldrb	r0, [r3, #0]
   b6ea2:	f7fe fe43 	bl	b5b2c <hal_spi_is_enabled>
   b6ea6:	2800      	cmp	r0, #0
   b6ea8:	d1df      	bne.n	b6e6a <pinAvailable+0x6>
  return true; // 'pin' is available
   b6eaa:	2001      	movs	r0, #1
   b6eac:	e7de      	b.n	b6e6c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6eae:	2801      	cmp	r0, #1
   b6eb0:	d809      	bhi.n	b6ec6 <pinAvailable+0x62>
   b6eb2:	f000 f86d 	bl	b6f90 <_Z19__fetch_global_Wirev>
   b6eb6:	2100      	movs	r1, #0
   b6eb8:	7c00      	ldrb	r0, [r0, #16]
   b6eba:	f7fe fda7 	bl	b5a0c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6ebe:	f080 0001 	eor.w	r0, r0, #1
   b6ec2:	b2c0      	uxtb	r0, r0
   b6ec4:	e7d2      	b.n	b6e6c <pinAvailable+0x8>
   b6ec6:	3809      	subs	r0, #9
   b6ec8:	2801      	cmp	r0, #1
   b6eca:	d8ee      	bhi.n	b6eaa <pinAvailable+0x46>
   b6ecc:	f000 f8a0 	bl	b7010 <_Z22__fetch_global_Serial1v>
   b6ed0:	7c00      	ldrb	r0, [r0, #16]
   b6ed2:	f7fe fe7b 	bl	b5bcc <hal_usart_is_enabled>
   b6ed6:	e7f2      	b.n	b6ebe <pinAvailable+0x5a>
   b6ed8:	2003e6b8 	.word	0x2003e6b8
   b6edc:	2003e6bc 	.word	0x2003e6bc

000b6ee0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6ee0:	2823      	cmp	r0, #35	; 0x23
{
   b6ee2:	b538      	push	{r3, r4, r5, lr}
   b6ee4:	4604      	mov	r4, r0
   b6ee6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6ee8:	d80a      	bhi.n	b6f00 <pinMode+0x20>
   b6eea:	29ff      	cmp	r1, #255	; 0xff
   b6eec:	d008      	beq.n	b6f00 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6eee:	f7ff ffb9 	bl	b6e64 <pinAvailable>
   b6ef2:	b128      	cbz	r0, b6f00 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b6ef4:	4629      	mov	r1, r5
   b6ef6:	4620      	mov	r0, r4
}
   b6ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b6efc:	f7fe bd1e 	b.w	b593c <hal_gpio_mode>
}
   b6f00:	bd38      	pop	{r3, r4, r5, pc}

000b6f02 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b6f02:	b538      	push	{r3, r4, r5, lr}
   b6f04:	4604      	mov	r4, r0
   b6f06:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b6f08:	f7fe fd20 	bl	b594c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6f0c:	28ff      	cmp	r0, #255	; 0xff
   b6f0e:	d010      	beq.n	b6f32 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6f10:	2806      	cmp	r0, #6
   b6f12:	d804      	bhi.n	b6f1e <digitalWrite+0x1c>
   b6f14:	234d      	movs	r3, #77	; 0x4d
   b6f16:	fa23 f000 	lsr.w	r0, r3, r0
   b6f1a:	07c3      	lsls	r3, r0, #31
   b6f1c:	d409      	bmi.n	b6f32 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6f1e:	4620      	mov	r0, r4
   b6f20:	f7ff ffa0 	bl	b6e64 <pinAvailable>
   b6f24:	b128      	cbz	r0, b6f32 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b6f26:	4629      	mov	r1, r5
   b6f28:	4620      	mov	r0, r4
}
   b6f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b6f2e:	f7fe bd15 	b.w	b595c <hal_gpio_write>
}
   b6f32:	bd38      	pop	{r3, r4, r5, pc}

000b6f34 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b6f34:	b510      	push	{r4, lr}
   b6f36:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b6f38:	f7fe fd08 	bl	b594c <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6f3c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6f3e:	b2db      	uxtb	r3, r3
   b6f40:	2b01      	cmp	r3, #1
   b6f42:	d908      	bls.n	b6f56 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6f44:	4620      	mov	r0, r4
   b6f46:	f7ff ff8d 	bl	b6e64 <pinAvailable>
   b6f4a:	b120      	cbz	r0, b6f56 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b6f4c:	4620      	mov	r0, r4
}
   b6f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b6f52:	f7fe bd0b 	b.w	b596c <hal_gpio_read>
}
   b6f56:	2000      	movs	r0, #0
   b6f58:	bd10      	pop	{r4, pc}

000b6f5a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6f5a:	4770      	bx	lr

000b6f5c <_Z17acquireWireBufferv>:
{
   b6f5c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6f5e:	4b0a      	ldr	r3, [pc, #40]	; (b6f88 <_Z17acquireWireBufferv+0x2c>)
   b6f60:	6003      	str	r3, [r0, #0]
   b6f62:	2301      	movs	r3, #1
{
   b6f64:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6f66:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6f68:	4908      	ldr	r1, [pc, #32]	; (b6f8c <_Z17acquireWireBufferv+0x30>)
   b6f6a:	2020      	movs	r0, #32
   b6f6c:	f000 f874 	bl	b7058 <_ZnajRKSt9nothrow_t>
	};
   b6f70:	2520      	movs	r5, #32
   b6f72:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6f74:	4905      	ldr	r1, [pc, #20]	; (b6f8c <_Z17acquireWireBufferv+0x30>)
	};
   b6f76:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6f78:	4628      	mov	r0, r5
   b6f7a:	f000 f86d 	bl	b7058 <_ZnajRKSt9nothrow_t>
	};
   b6f7e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6f82:	4620      	mov	r0, r4
   b6f84:	bd38      	pop	{r3, r4, r5, pc}
   b6f86:	bf00      	nop
   b6f88:	00010018 	.word	0x00010018
   b6f8c:	000b8188 	.word	0x000b8188

000b6f90 <_Z19__fetch_global_Wirev>:
{
   b6f90:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6f92:	4d0e      	ldr	r5, [pc, #56]	; (b6fcc <_Z19__fetch_global_Wirev+0x3c>)
   b6f94:	7829      	ldrb	r1, [r5, #0]
   b6f96:	f3bf 8f5b 	dmb	ish
   b6f9a:	f011 0401 	ands.w	r4, r1, #1
{
   b6f9e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6fa0:	d111      	bne.n	b6fc6 <_Z19__fetch_global_Wirev+0x36>
   b6fa2:	4628      	mov	r0, r5
   b6fa4:	f7fd f89a 	bl	b40dc <__cxa_guard_acquire>
   b6fa8:	b168      	cbz	r0, b6fc6 <_Z19__fetch_global_Wirev+0x36>
   b6faa:	4668      	mov	r0, sp
   b6fac:	f7ff ffd6 	bl	b6f5c <_Z17acquireWireBufferv>
   b6fb0:	466a      	mov	r2, sp
   b6fb2:	4621      	mov	r1, r4
   b6fb4:	4806      	ldr	r0, [pc, #24]	; (b6fd0 <_Z19__fetch_global_Wirev+0x40>)
   b6fb6:	f7fe ffa3 	bl	b5f00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6fba:	4628      	mov	r0, r5
   b6fbc:	f7fd f893 	bl	b40e6 <__cxa_guard_release>
   b6fc0:	4804      	ldr	r0, [pc, #16]	; (b6fd4 <_Z19__fetch_global_Wirev+0x44>)
   b6fc2:	f000 f95d 	bl	b7280 <atexit>
	return wire;
}
   b6fc6:	4802      	ldr	r0, [pc, #8]	; (b6fd0 <_Z19__fetch_global_Wirev+0x40>)
   b6fc8:	b007      	add	sp, #28
   b6fca:	bd30      	pop	{r4, r5, pc}
   b6fcc:	2003e72c 	.word	0x2003e72c
   b6fd0:	2003e730 	.word	0x2003e730
   b6fd4:	000b6f5b 	.word	0x000b6f5b

000b6fd8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6fd8:	4770      	bx	lr
	...

000b6fdc <_Z20acquireSerial1Bufferv>:
{
   b6fdc:	b538      	push	{r3, r4, r5, lr}
   b6fde:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6fe0:	2514      	movs	r5, #20
   b6fe2:	462a      	mov	r2, r5
   b6fe4:	2100      	movs	r1, #0
   b6fe6:	f000 f95f 	bl	b72a8 <memset>
   b6fea:	8025      	strh	r5, [r4, #0]
   b6fec:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6fee:	4907      	ldr	r1, [pc, #28]	; (b700c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6ff0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6ff2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6ff4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6ff6:	f000 f82f 	bl	b7058 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6ffa:	4904      	ldr	r1, [pc, #16]	; (b700c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6ffc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6ffe:	4628      	mov	r0, r5
   b7000:	f000 f82a 	bl	b7058 <_ZnajRKSt9nothrow_t>
    };
   b7004:	60e0      	str	r0, [r4, #12]
}
   b7006:	4620      	mov	r0, r4
   b7008:	bd38      	pop	{r3, r4, r5, pc}
   b700a:	bf00      	nop
   b700c:	000b8188 	.word	0x000b8188

000b7010 <_Z22__fetch_global_Serial1v>:
{
   b7010:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7012:	4d0e      	ldr	r5, [pc, #56]	; (b704c <_Z22__fetch_global_Serial1v+0x3c>)
   b7014:	7829      	ldrb	r1, [r5, #0]
   b7016:	f3bf 8f5b 	dmb	ish
   b701a:	f011 0401 	ands.w	r4, r1, #1
{
   b701e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7020:	d111      	bne.n	b7046 <_Z22__fetch_global_Serial1v+0x36>
   b7022:	4628      	mov	r0, r5
   b7024:	f7fd f85a 	bl	b40dc <__cxa_guard_acquire>
   b7028:	b168      	cbz	r0, b7046 <_Z22__fetch_global_Serial1v+0x36>
   b702a:	a801      	add	r0, sp, #4
   b702c:	f7ff ffd6 	bl	b6fdc <_Z20acquireSerial1Bufferv>
   b7030:	aa01      	add	r2, sp, #4
   b7032:	4621      	mov	r1, r4
   b7034:	4806      	ldr	r0, [pc, #24]	; (b7050 <_Z22__fetch_global_Serial1v+0x40>)
   b7036:	f7ff fda3 	bl	b6b80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b703a:	4628      	mov	r0, r5
   b703c:	f7fd f853 	bl	b40e6 <__cxa_guard_release>
   b7040:	4804      	ldr	r0, [pc, #16]	; (b7054 <_Z22__fetch_global_Serial1v+0x44>)
   b7042:	f000 f91d 	bl	b7280 <atexit>
    return serial1;
}
   b7046:	4802      	ldr	r0, [pc, #8]	; (b7050 <_Z22__fetch_global_Serial1v+0x40>)
   b7048:	b007      	add	sp, #28
   b704a:	bd30      	pop	{r4, r5, pc}
   b704c:	2003e744 	.word	0x2003e744
   b7050:	2003e748 	.word	0x2003e748
   b7054:	000b6fd9 	.word	0x000b6fd9

000b7058 <_ZnajRKSt9nothrow_t>:
   b7058:	f7fd b82f 	b.w	b40ba <_Znaj>

000b705c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b705c:	4901      	ldr	r1, [pc, #4]	; (b7064 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b705e:	f000 b8f9 	b.w	b7254 <_ZNKSt9type_infoeqERKS_>
   b7062:	bf00      	nop
   b7064:	000b81a4 	.word	0x000b81a4

000b7068 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7068:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b706a:	2400      	movs	r4, #0
   b706c:	2310      	movs	r3, #16
   b706e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7072:	6803      	ldr	r3, [r0, #0]
   b7074:	4615      	mov	r5, r2
   b7076:	699e      	ldr	r6, [r3, #24]
   b7078:	6812      	ldr	r2, [r2, #0]
   b707a:	466b      	mov	r3, sp
   b707c:	e9cd 4400 	strd	r4, r4, [sp]
   b7080:	47b0      	blx	r6
   b7082:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7086:	f003 0306 	and.w	r3, r3, #6
   b708a:	2b06      	cmp	r3, #6
   b708c:	bf03      	ittte	eq
   b708e:	9b00      	ldreq	r3, [sp, #0]
   b7090:	602b      	streq	r3, [r5, #0]
   b7092:	2001      	moveq	r0, #1
   b7094:	4620      	movne	r0, r4
   b7096:	b004      	add	sp, #16
   b7098:	bd70      	pop	{r4, r5, r6, pc}

000b709a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b709a:	9800      	ldr	r0, [sp, #0]
   b709c:	4290      	cmp	r0, r2
   b709e:	bf14      	ite	ne
   b70a0:	2001      	movne	r0, #1
   b70a2:	2006      	moveq	r0, #6
   b70a4:	4770      	bx	lr
	...

000b70a8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b70a8:	b510      	push	{r4, lr}
   b70aa:	4b03      	ldr	r3, [pc, #12]	; (b70b8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b70ac:	6003      	str	r3, [r0, #0]
   b70ae:	4604      	mov	r4, r0
   b70b0:	f000 f8cd 	bl	b724e <_ZNSt9type_infoD1Ev>
   b70b4:	4620      	mov	r0, r4
   b70b6:	bd10      	pop	{r4, pc}
   b70b8:	000b81e4 	.word	0x000b81e4

000b70bc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b70bc:	b510      	push	{r4, lr}
   b70be:	4604      	mov	r4, r0
   b70c0:	f7ff fff2 	bl	b70a8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b70c4:	4620      	mov	r0, r4
   b70c6:	2108      	movs	r1, #8
   b70c8:	f7fc fff9 	bl	b40be <_ZdlPvj>
   b70cc:	4620      	mov	r0, r4
   b70ce:	bd10      	pop	{r4, pc}

000b70d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b70d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b70d4:	461f      	mov	r7, r3
   b70d6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b70da:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b70de:	4598      	cmp	r8, r3
   b70e0:	4606      	mov	r6, r0
   b70e2:	4615      	mov	r5, r2
   b70e4:	d107      	bne.n	b70f6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b70e6:	9907      	ldr	r1, [sp, #28]
   b70e8:	f000 f8b4 	bl	b7254 <_ZNKSt9type_infoeqERKS_>
   b70ec:	b118      	cbz	r0, b70f6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b70ee:	7165      	strb	r5, [r4, #5]
   b70f0:	2000      	movs	r0, #0
   b70f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b70f6:	4639      	mov	r1, r7
   b70f8:	4630      	mov	r0, r6
   b70fa:	f000 f8ab 	bl	b7254 <_ZNKSt9type_infoeqERKS_>
   b70fe:	2800      	cmp	r0, #0
   b7100:	d0f6      	beq.n	b70f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7102:	2301      	movs	r3, #1
   b7104:	f8c4 8000 	str.w	r8, [r4]
   b7108:	7125      	strb	r5, [r4, #4]
   b710a:	71a3      	strb	r3, [r4, #6]
   b710c:	e7f0      	b.n	b70f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b710e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b710e:	b538      	push	{r3, r4, r5, lr}
   b7110:	4615      	mov	r5, r2
   b7112:	461c      	mov	r4, r3
   b7114:	f000 f89e 	bl	b7254 <_ZNKSt9type_infoeqERKS_>
   b7118:	b120      	cbz	r0, b7124 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b711a:	2308      	movs	r3, #8
   b711c:	60e3      	str	r3, [r4, #12]
   b711e:	2306      	movs	r3, #6
   b7120:	6025      	str	r5, [r4, #0]
   b7122:	7123      	strb	r3, [r4, #4]
   b7124:	bd38      	pop	{r3, r4, r5, pc}

000b7126 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7126:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7128:	4605      	mov	r5, r0
   b712a:	460c      	mov	r4, r1
   b712c:	9201      	str	r2, [sp, #4]
   b712e:	461e      	mov	r6, r3
   b7130:	f000 f890 	bl	b7254 <_ZNKSt9type_infoeqERKS_>
   b7134:	b950      	cbnz	r0, b714c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7136:	2e03      	cmp	r6, #3
   b7138:	d808      	bhi.n	b714c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b713a:	6823      	ldr	r3, [r4, #0]
   b713c:	9a01      	ldr	r2, [sp, #4]
   b713e:	695b      	ldr	r3, [r3, #20]
   b7140:	4629      	mov	r1, r5
   b7142:	4620      	mov	r0, r4
   b7144:	b002      	add	sp, #8
   b7146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b714a:	4718      	bx	r3
   b714c:	b002      	add	sp, #8
   b714e:	bd70      	pop	{r4, r5, r6, pc}

000b7150 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7150:	b510      	push	{r4, lr}
   b7152:	4b03      	ldr	r3, [pc, #12]	; (b7160 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7154:	6003      	str	r3, [r0, #0]
   b7156:	4604      	mov	r4, r0
   b7158:	f7ff ffa6 	bl	b70a8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b715c:	4620      	mov	r0, r4
   b715e:	bd10      	pop	{r4, pc}
   b7160:	000b8244 	.word	0x000b8244

000b7164 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7164:	b510      	push	{r4, lr}
   b7166:	4604      	mov	r4, r0
   b7168:	f7ff fff2 	bl	b7150 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b716c:	4620      	mov	r0, r4
   b716e:	210c      	movs	r1, #12
   b7170:	f7fc ffa5 	bl	b40be <_ZdlPvj>
   b7174:	4620      	mov	r0, r4
   b7176:	bd10      	pop	{r4, pc}

000b7178 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b717a:	9f08      	ldr	r7, [sp, #32]
   b717c:	4297      	cmp	r7, r2
   b717e:	4605      	mov	r5, r0
   b7180:	460e      	mov	r6, r1
   b7182:	4614      	mov	r4, r2
   b7184:	d00a      	beq.n	b719c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7186:	68a8      	ldr	r0, [r5, #8]
   b7188:	6802      	ldr	r2, [r0, #0]
   b718a:	9708      	str	r7, [sp, #32]
   b718c:	6a15      	ldr	r5, [r2, #32]
   b718e:	4631      	mov	r1, r6
   b7190:	4622      	mov	r2, r4
   b7192:	46ac      	mov	ip, r5
   b7194:	b003      	add	sp, #12
   b7196:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b719a:	4760      	bx	ip
   b719c:	4619      	mov	r1, r3
   b719e:	9301      	str	r3, [sp, #4]
   b71a0:	f000 f858 	bl	b7254 <_ZNKSt9type_infoeqERKS_>
   b71a4:	9b01      	ldr	r3, [sp, #4]
   b71a6:	2800      	cmp	r0, #0
   b71a8:	d0ed      	beq.n	b7186 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b71aa:	2006      	movs	r0, #6
   b71ac:	b003      	add	sp, #12
   b71ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b71b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b71b0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b71b4:	460d      	mov	r5, r1
   b71b6:	4619      	mov	r1, r3
   b71b8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b71bc:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b71c0:	4681      	mov	r9, r0
   b71c2:	4617      	mov	r7, r2
   b71c4:	4698      	mov	r8, r3
   b71c6:	f000 f845 	bl	b7254 <_ZNKSt9type_infoeqERKS_>
   b71ca:	b190      	cbz	r0, b71f2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b71cc:	2d00      	cmp	r5, #0
   b71ce:	6034      	str	r4, [r6, #0]
   b71d0:	7137      	strb	r7, [r6, #4]
   b71d2:	db09      	blt.n	b71e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b71d4:	1961      	adds	r1, r4, r5
   b71d6:	458a      	cmp	sl, r1
   b71d8:	bf0c      	ite	eq
   b71da:	2106      	moveq	r1, #6
   b71dc:	2101      	movne	r1, #1
   b71de:	71b1      	strb	r1, [r6, #6]
   b71e0:	2000      	movs	r0, #0
   b71e2:	b001      	add	sp, #4
   b71e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b71e8:	3502      	adds	r5, #2
   b71ea:	d1f9      	bne.n	b71e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b71ec:	2301      	movs	r3, #1
   b71ee:	71b3      	strb	r3, [r6, #6]
   b71f0:	e7f6      	b.n	b71e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b71f2:	4554      	cmp	r4, sl
   b71f4:	d106      	bne.n	b7204 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b71f6:	4659      	mov	r1, fp
   b71f8:	4648      	mov	r0, r9
   b71fa:	f000 f82b 	bl	b7254 <_ZNKSt9type_infoeqERKS_>
   b71fe:	b108      	cbz	r0, b7204 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7200:	7177      	strb	r7, [r6, #5]
   b7202:	e7ed      	b.n	b71e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7204:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7208:	6803      	ldr	r3, [r0, #0]
   b720a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b720e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7212:	69dc      	ldr	r4, [r3, #28]
   b7214:	463a      	mov	r2, r7
   b7216:	4643      	mov	r3, r8
   b7218:	4629      	mov	r1, r5
   b721a:	46a4      	mov	ip, r4
   b721c:	b001      	add	sp, #4
   b721e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7222:	4760      	bx	ip

000b7224 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7228:	4607      	mov	r7, r0
   b722a:	460c      	mov	r4, r1
   b722c:	4615      	mov	r5, r2
   b722e:	461e      	mov	r6, r3
   b7230:	f7ff ff6d 	bl	b710e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7234:	b948      	cbnz	r0, b724a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7236:	68b8      	ldr	r0, [r7, #8]
   b7238:	6803      	ldr	r3, [r0, #0]
   b723a:	699f      	ldr	r7, [r3, #24]
   b723c:	462a      	mov	r2, r5
   b723e:	4633      	mov	r3, r6
   b7240:	4621      	mov	r1, r4
   b7242:	46bc      	mov	ip, r7
   b7244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7248:	4760      	bx	ip
   b724a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b724e <_ZNSt9type_infoD1Ev>:
   b724e:	4770      	bx	lr

000b7250 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7250:	2000      	movs	r0, #0
   b7252:	4770      	bx	lr

000b7254 <_ZNKSt9type_infoeqERKS_>:
   b7254:	4281      	cmp	r1, r0
   b7256:	b508      	push	{r3, lr}
   b7258:	d00e      	beq.n	b7278 <_ZNKSt9type_infoeqERKS_+0x24>
   b725a:	6840      	ldr	r0, [r0, #4]
   b725c:	7803      	ldrb	r3, [r0, #0]
   b725e:	2b2a      	cmp	r3, #42	; 0x2a
   b7260:	d00c      	beq.n	b727c <_ZNKSt9type_infoeqERKS_+0x28>
   b7262:	6849      	ldr	r1, [r1, #4]
   b7264:	780b      	ldrb	r3, [r1, #0]
   b7266:	2b2a      	cmp	r3, #42	; 0x2a
   b7268:	bf08      	it	eq
   b726a:	3101      	addeq	r1, #1
   b726c:	f7fc fed6 	bl	b401c <strcmp>
   b7270:	fab0 f080 	clz	r0, r0
   b7274:	0940      	lsrs	r0, r0, #5
   b7276:	bd08      	pop	{r3, pc}
   b7278:	2001      	movs	r0, #1
   b727a:	e7fc      	b.n	b7276 <_ZNKSt9type_infoeqERKS_+0x22>
   b727c:	2000      	movs	r0, #0
   b727e:	e7fa      	b.n	b7276 <_ZNKSt9type_infoeqERKS_+0x22>

000b7280 <atexit>:
   b7280:	2300      	movs	r3, #0
   b7282:	4601      	mov	r1, r0
   b7284:	461a      	mov	r2, r3
   b7286:	4618      	mov	r0, r3
   b7288:	f000 b844 	b.w	b7314 <__register_exitproc>

000b728c <memcpy>:
   b728c:	440a      	add	r2, r1
   b728e:	4291      	cmp	r1, r2
   b7290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7294:	d100      	bne.n	b7298 <memcpy+0xc>
   b7296:	4770      	bx	lr
   b7298:	b510      	push	{r4, lr}
   b729a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b729e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b72a2:	4291      	cmp	r1, r2
   b72a4:	d1f9      	bne.n	b729a <memcpy+0xe>
   b72a6:	bd10      	pop	{r4, pc}

000b72a8 <memset>:
   b72a8:	4402      	add	r2, r0
   b72aa:	4603      	mov	r3, r0
   b72ac:	4293      	cmp	r3, r2
   b72ae:	d100      	bne.n	b72b2 <memset+0xa>
   b72b0:	4770      	bx	lr
   b72b2:	f803 1b01 	strb.w	r1, [r3], #1
   b72b6:	e7f9      	b.n	b72ac <memset+0x4>

000b72b8 <srand>:
   b72b8:	b538      	push	{r3, r4, r5, lr}
   b72ba:	4b10      	ldr	r3, [pc, #64]	; (b72fc <srand+0x44>)
   b72bc:	681d      	ldr	r5, [r3, #0]
   b72be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b72c0:	4604      	mov	r4, r0
   b72c2:	b9b3      	cbnz	r3, b72f2 <srand+0x3a>
   b72c4:	2018      	movs	r0, #24
   b72c6:	f7fe fd75 	bl	b5db4 <malloc>
   b72ca:	4602      	mov	r2, r0
   b72cc:	63a8      	str	r0, [r5, #56]	; 0x38
   b72ce:	b920      	cbnz	r0, b72da <srand+0x22>
   b72d0:	4b0b      	ldr	r3, [pc, #44]	; (b7300 <srand+0x48>)
   b72d2:	480c      	ldr	r0, [pc, #48]	; (b7304 <srand+0x4c>)
   b72d4:	2142      	movs	r1, #66	; 0x42
   b72d6:	f7fe fd8d 	bl	b5df4 <__assert_func>
   b72da:	490b      	ldr	r1, [pc, #44]	; (b7308 <srand+0x50>)
   b72dc:	4b0b      	ldr	r3, [pc, #44]	; (b730c <srand+0x54>)
   b72de:	e9c0 1300 	strd	r1, r3, [r0]
   b72e2:	4b0b      	ldr	r3, [pc, #44]	; (b7310 <srand+0x58>)
   b72e4:	6083      	str	r3, [r0, #8]
   b72e6:	230b      	movs	r3, #11
   b72e8:	8183      	strh	r3, [r0, #12]
   b72ea:	2100      	movs	r1, #0
   b72ec:	2001      	movs	r0, #1
   b72ee:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b72f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b72f4:	2200      	movs	r2, #0
   b72f6:	611c      	str	r4, [r3, #16]
   b72f8:	615a      	str	r2, [r3, #20]
   b72fa:	bd38      	pop	{r3, r4, r5, pc}
   b72fc:	2003e578 	.word	0x2003e578
   b7300:	000b827d 	.word	0x000b827d
   b7304:	000b8294 	.word	0x000b8294
   b7308:	abcd330e 	.word	0xabcd330e
   b730c:	e66d1234 	.word	0xe66d1234
   b7310:	0005deec 	.word	0x0005deec

000b7314 <__register_exitproc>:
   b7314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7318:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b73d4 <__register_exitproc+0xc0>
   b731c:	4606      	mov	r6, r0
   b731e:	f8d8 0000 	ldr.w	r0, [r8]
   b7322:	461f      	mov	r7, r3
   b7324:	460d      	mov	r5, r1
   b7326:	4691      	mov	r9, r2
   b7328:	f000 f856 	bl	b73d8 <__retarget_lock_acquire_recursive>
   b732c:	4b25      	ldr	r3, [pc, #148]	; (b73c4 <__register_exitproc+0xb0>)
   b732e:	681c      	ldr	r4, [r3, #0]
   b7330:	b934      	cbnz	r4, b7340 <__register_exitproc+0x2c>
   b7332:	4c25      	ldr	r4, [pc, #148]	; (b73c8 <__register_exitproc+0xb4>)
   b7334:	601c      	str	r4, [r3, #0]
   b7336:	4b25      	ldr	r3, [pc, #148]	; (b73cc <__register_exitproc+0xb8>)
   b7338:	b113      	cbz	r3, b7340 <__register_exitproc+0x2c>
   b733a:	681b      	ldr	r3, [r3, #0]
   b733c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7340:	6863      	ldr	r3, [r4, #4]
   b7342:	2b1f      	cmp	r3, #31
   b7344:	dd07      	ble.n	b7356 <__register_exitproc+0x42>
   b7346:	f8d8 0000 	ldr.w	r0, [r8]
   b734a:	f000 f847 	bl	b73dc <__retarget_lock_release_recursive>
   b734e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7356:	b34e      	cbz	r6, b73ac <__register_exitproc+0x98>
   b7358:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b735c:	b988      	cbnz	r0, b7382 <__register_exitproc+0x6e>
   b735e:	4b1c      	ldr	r3, [pc, #112]	; (b73d0 <__register_exitproc+0xbc>)
   b7360:	b923      	cbnz	r3, b736c <__register_exitproc+0x58>
   b7362:	f8d8 0000 	ldr.w	r0, [r8]
   b7366:	f000 f838 	bl	b73da <__retarget_lock_release>
   b736a:	e7f0      	b.n	b734e <__register_exitproc+0x3a>
   b736c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7370:	f7fe fd20 	bl	b5db4 <malloc>
   b7374:	2800      	cmp	r0, #0
   b7376:	d0f4      	beq.n	b7362 <__register_exitproc+0x4e>
   b7378:	2300      	movs	r3, #0
   b737a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b737e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7382:	6863      	ldr	r3, [r4, #4]
   b7384:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7388:	2201      	movs	r2, #1
   b738a:	409a      	lsls	r2, r3
   b738c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7390:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7394:	4313      	orrs	r3, r2
   b7396:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b739a:	2e02      	cmp	r6, #2
   b739c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b73a0:	bf02      	ittt	eq
   b73a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b73a6:	4313      	orreq	r3, r2
   b73a8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b73ac:	6863      	ldr	r3, [r4, #4]
   b73ae:	f8d8 0000 	ldr.w	r0, [r8]
   b73b2:	1c5a      	adds	r2, r3, #1
   b73b4:	3302      	adds	r3, #2
   b73b6:	6062      	str	r2, [r4, #4]
   b73b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b73bc:	f000 f80e 	bl	b73dc <__retarget_lock_release_recursive>
   b73c0:	2000      	movs	r0, #0
   b73c2:	e7c6      	b.n	b7352 <__register_exitproc+0x3e>
   b73c4:	2003e7e8 	.word	0x2003e7e8
   b73c8:	2003e75c 	.word	0x2003e75c
   b73cc:	00000000 	.word	0x00000000
   b73d0:	000b5db5 	.word	0x000b5db5
   b73d4:	2003e5dc 	.word	0x2003e5dc

000b73d8 <__retarget_lock_acquire_recursive>:
   b73d8:	4770      	bx	lr

000b73da <__retarget_lock_release>:
   b73da:	4770      	bx	lr

000b73dc <__retarget_lock_release_recursive>:
   b73dc:	4770      	bx	lr

000b73de <link_code_end>:
	...

000b73e0 <dynalib_user>:
   b73e0:	4041 000b 407d 000b 40a5 000b 40a9 000b     A@..}@...@...@..
   b73f0:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7400:	7620 7269 7574 6c61 5300 6174 7472 6e69      virtual.Startin
   b7410:	2067 6164 6174 7220 6165 6964 676e 2e2e     g data reading..
   b7420:	4300 7275 6572 746e 7020 6f72 6978 696d     .Current proximi
   b7430:	7974 7220 7365 6c75 7374 203a 4300 7275     ty results: .Cur
   b7440:	6572 746e 6c20 6769 7468 6c20 7665 6c65     rent light level
   b7450:	203a                                         : .

000b7453 <_ZL4font>:
   b7453:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b7463:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b7473:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b7483:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b7493:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b74a3:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b74b3:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b74c3:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b74d3:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b74e3:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b74f3:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b7503:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b7513:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b7523:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b7533:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b7543:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b7553:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b7563:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b7573:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b7583:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b7593:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b75a3:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b75b3:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b75c3:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b75d3:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b75e3:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b75f3:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b7603:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b7613:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b7623:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b7633:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b7643:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b7653:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b7663:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b7673:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b7683:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b7693:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b76a3:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b76b3:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b76c3:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b76d3:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b76e3:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b76f3:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b7703:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b7713:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b7723:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b7733:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b7743:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b7753:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b7763:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b7773:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b7783:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b7793:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b77a3:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b77b3:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b77c3:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b77d3:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b77e3:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b77f3:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b7803:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b7813:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b7823:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b7833:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b7843:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b7853:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b7863:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b7873:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b7883:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b7893:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b78a3:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b78b3:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b78c3:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b78d3:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b78e3:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b78f3:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b7903:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b7913:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b7923:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b7933:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b7943:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000b7954 <_ZTV12Adafruit_GFX>:
	...
   b7964:	499d 000b 6255 000b 40c5 000b 43a3 000b     .I..Ub...@...C..
   b7974:	43a5 000b 43d7 000b 43b3 000b 43c5 000b     .C...C...C...C..
   b7984:	42e5 000b 43a3 000b 45cf 000b 45cd 000b     .B...C...E...E..
   b7994:	43ef 000b 442d 000b 4467 000b 44ad 000b     .C..-D..gD...D..
   b79a4:	44c9 000b 454d 000b 6564 6166 6c75 2074     .D..ME..default 
   b79b4:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b79c4:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b79d4:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b79e4:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b79f0 <_ZTVN8particle11SPISettingsE>:
	...
   b79f8:	4ad9 000b 4aab 000b 4aad 000b               .J...J...J..

000b7a04 <_ZL12splash1_data>:
   b7a04:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b7a14:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b7a24:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b7a34:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b7a44:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b7a54:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b7a6c:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b7a7c:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b7a8c:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b7a9c:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b7aac:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b7abc:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b7acc:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b7adc:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b7aec:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b7afc:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b7b0c:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b7b1c:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b7b2c:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b7b3c:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b7b4c:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b7b5c:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b7b6c:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b7b7c:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b7b94:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b7bac:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b7bbc:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b7bcc:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b7bdc:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b7bec:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b7bfc:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b7c0c:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b7c1c:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b7c2c:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b7c3c:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b7c4c:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b7c5c:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b7c6c:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b7c7c:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b7c8c:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b7c9c:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b7cac:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b7cbc:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b7cc4 <_ZL12splash2_data>:
   b7cc4:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b7cd4:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b7ce4:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b7d00:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b7d10:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b7d20:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b7d30:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b7d40:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b7d50:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b7d60:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b7d70:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b7d80:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b7d90:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b7da0:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b7db0:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b7dc0:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b7dd0:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b7de0:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b7df0:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b7e00:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b7e10:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b7e20:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b7e30:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b7e40:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b7e58:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b7e68:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b7e78:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b7e88:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b7e98:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b7ea4 <_ZTV16Adafruit_SSD1306>:
	...
   b7eac:	4b2d 000b 4b45 000b 499d 000b 6255 000b     -K..EK...I..Ub..
   b7ebc:	4b59 000b 43a3 000b 43a5 000b 43d7 000b     YK...C...C...C..
   b7ecc:	43b3 000b 43c5 000b 42e5 000b 43a3 000b     .C...C...B...C..
   b7edc:	45cf 000b 4cf7 000b 529f 000b 5251 000b     .E...L...R..QR..
   b7eec:	4467 000b 44ad 000b 44c9 000b 454d 000b     gD...D...D..ME..

000b7efc <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b7efc:	8000 e0c0 f8f0 fefc                         ........

000b7f04 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b7f04:	0100 0703 1f0f 7f3f                         ......?.

000b7f0c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b7f0c:	d5ae a880                                   ....

000b7f10 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b7f10:	00d3 8d40                                   ..@.

000b7f14 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b7f14:	0020 c8a1                                    ...

000b7f18 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b7f18:	40db a6a4 af2e                              .@....

000b7f1e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b7f1e:	02da 8f81                                   ....

000b7f22 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b7f22:	12da                                         ...

000b7f25 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b7f25:	02da                                         ...

000b7f28 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b7f28:	0022 21ff 0000 0000                         "..!....

000b7f30 <_ZTV16OledWingAdafruit>:
	...
   b7f38:	578d 000b 57ad 000b 499d 000b 6255 000b     .W...W...I..Ub..
   b7f48:	4b59 000b 43a3 000b 43a5 000b 43d7 000b     YK...C...C...C..
   b7f58:	43b3 000b 43c5 000b 42e5 000b 43a3 000b     .C...C...B...C..
   b7f68:	45cf 000b 4cf7 000b 529f 000b 5251 000b     .E...L...R..QR..
   b7f78:	4467 000b 44ad 000b 44c9 000b 454d 000b     gD...D...D..ME..

000b7f88 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b7f90 <_ZTVN5spark13EthernetClassE>:
	...
   b7f98:	5e8b 000b 5e81 000b 5e77 000b 5e6d 000b     .^...^..w^..m^..
   b7fa8:	5e61 000b 5e55 000b 6131 000b 6139 000b     a^..U^..1a..9a..
   b7fb8:	5e49 000b 5e41 000b 5e37 000b 5e2d 000b     I^..A^..7^..-^..
   b7fc8:	6169 000b                                   ia..

000b7fcc <_ZTV7TwoWire>:
	...
   b7fd4:	5ea9 000b 5ef3 000b 5ecb 000b 5eab 000b     .^...^...^...^..
   b7fe4:	5ed3 000b 5edb 000b 5ee3 000b 5eeb 000b     .^...^...^...^..

000b7ff4 <_ZTV9IPAddress>:
	...
   b7ffc:	5fd5 000b 5fc5 000b 5fc7 000b 7061 0070     ._..._..._..app.

000b800c <_ZTVN5spark12NetworkClassE>:
	...
   b8014:	60f1 000b 60fb 000b 6105 000b 610f 000b     .`...`...a...a..
   b8024:	6119 000b 6125 000b 6131 000b 6139 000b     .a..%a..1a..9a..
   b8034:	6141 000b 614d 000b 6155 000b 615f 000b     Aa..Ma..Ua.._a..
   b8044:	6169 000b                                   ia..

000b8048 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8048:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   b8058:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b8068 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8070:	6595 000b 65b9 000b 6aeb 000b 65c7 000b     .e...e...j...e..
   b8080:	6599 000b                                   .e..

000b8084 <_ZTV9TCPClient>:
	...
   b808c:	6645 000b 6679 000b 6511 000b 652b 000b     Ef..yf...e..+e..
   b809c:	6981 000b 6555 000b 67f7 000b 6589 000b     .i..Ue...g...e..
   b80ac:	6889 000b 66c9 000b 6825 000b 6a35 000b     .h...f..%h..5j..
   b80bc:	67c5 000b 658b 000b 653d 000b 65cd 000b     .g...e..=e...e..
   b80cc:	66a9 000b 5925 252d 2d6d 6425 2554 3a48     .f..%Y-%m-%dT%H:
   b80dc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b80ec <_ZTV11USARTSerial>:
	...
   b80f4:	6b05 000b 6b71 000b 6b49 000b 6255 000b     .k..qk..Ik..Ub..
   b8104:	6b19 000b 6b35 000b 6b27 000b 6b43 000b     .k..5k..'k..Ck..
   b8114:	6b07 000b 6b0b 000b                         .k...k..

000b811c <_ZTV9USBSerial>:
	...
   b8124:	6baf 000b 6c17 000b 6bed 000b 6255 000b     .k...l...k..Ub..
   b8134:	6bdf 000b 6bb1 000b 6bc1 000b 6c11 000b     .k...k...k...l..
   b8144:	6bd1 000b 6ba9 000b                         .k...k..

000b814c <_ZTVN5spark9WiFiClassE>:
	...
   b8154:	6d0f 000b 6d05 000b 6cfb 000b 6cb1 000b     .m...m...l...l..
   b8164:	6cef 000b 6ce3 000b 6131 000b 6139 000b     .l...l..1a..9a..
   b8174:	6cd7 000b 6ccf 000b 6cc5 000b 6cbb 000b     .l...l...l...l..
   b8184:	6169 000b                                   ia..

000b8188 <_ZSt7nothrow>:
	...

000b8189 <_ZTSSt19_Sp_make_shared_tag>:
   b8189:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b8199:	6572 5f64 6174 0067 0000                     red_tag....

000b81a4 <_ZTISt19_Sp_make_shared_tag>:
   b81a4:	81e4 000b 8189 000b                         ........

000b81ac <_ZTIN10__cxxabiv117__class_type_infoE>:
   b81ac:	8244 000b 81b8 000b 8268 000b               D.......h...

000b81b8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b81b8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b81c8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b81d8:	0045 0000                                   E...

000b81dc <_ZTVN10__cxxabiv117__class_type_infoE>:
   b81dc:	0000 0000 81ac 000b 70a9 000b 70bd 000b     .........p...p..
   b81ec:	7251 000b 7251 000b 7127 000b 7069 000b     Qr..Qr..'q..ip..
   b81fc:	710f 000b 70d1 000b 709b 000b               .q...p...p..

000b8208 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8208:	8244 000b 8214 000b 81ac 000b               D...........

000b8214 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8214:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b8224:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b8234:	666e 456f 0000 0000                         nfoE....

000b823c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b823c:	0000 0000 8208 000b 7151 000b 7165 000b     ........Qq..eq..
   b824c:	7251 000b 7251 000b 7127 000b 7069 000b     Qr..Qr..'q..ip..
   b825c:	7225 000b 71b1 000b 7179 000b               %r...q..yq..

000b8268 <_ZTISt9type_info>:
   b8268:	81e4 000b 8270 000b                         ....p...

000b8270 <_ZTSSt9type_info>:
   b8270:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b8280:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b8290:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b82a0:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b82b0:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b82c0:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b82d0:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b82e0:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b82ed <link_const_data_end>:
   b82ed:	00          	.byte	0x00
	...

000b82f0 <link_constructors_location>:
   b82f0:	000b4291 	.word	0x000b4291
   b82f4:	000b5e1d 	.word	0x000b5e1d
   b82f8:	000b5e95 	.word	0x000b5e95
   b82fc:	000b60e1 	.word	0x000b60e1
   b8300:	000b6241 	.word	0x000b6241
   b8304:	000b637d 	.word	0x000b637d
   b8308:	000b64ed 	.word	0x000b64ed
   b830c:	000b6af1 	.word	0x000b6af1
   b8310:	000b6d19 	.word	0x000b6d19
